%% -*- coding: utf-8 -*-
%% % this file is @generated
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1
%% Version source: file
-module(mumble).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Reject.RejectType'/1, 'enum_value_by_symbol_Reject.RejectType'/1]).
-export(['enum_symbol_by_value_PermissionDenied.DenyType'/1, 'enum_value_by_symbol_PermissionDenied.DenyType'/1]).
-export(['enum_symbol_by_value_ContextActionModify.Context'/1, 'enum_value_by_symbol_ContextActionModify.Context'/1]).
-export(['enum_symbol_by_value_ContextActionModify.Operation'/1, 'enum_value_by_symbol_ContextActionModify.Operation'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).
-export([gpb_version_source/0]).

-include("mumble.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Reject.RejectType'() :: 'None' | 'WrongVersion' | 'InvalidUsername' | 'WrongUserPW' | 'WrongServerPW' | 'UsernameInUse' | 'ServerFull' | 'NoCertificate' | 'AuthenticatorFail'.
-type 'PermissionDenied.DenyType'() :: 'Text' | 'Permission' | 'SuperUser' | 'ChannelName' | 'TextTooLong' | 'H9K' | 'TemporaryChannel' | 'MissingCertificate' | 'UserName' | 'ChannelFull' | 'NestingLimit' | 'ChannelCountLimit' | 'ChannelListenerLimit' | 'UserListenerLimit'.
-type 'ContextActionModify.Context'() :: 'Server' | 'Channel' | 'User'.
-type 'ContextActionModify.Operation'() :: 'Add' | 'Remove'.
-export_type(['Reject.RejectType'/0, 'PermissionDenied.DenyType'/0, 'ContextActionModify.Context'/0, 'ContextActionModify.Operation'/0]).

%% message types
-type 'Version'() :: #'Version'{}.

-type 'UDPTunnel'() :: #'UDPTunnel'{}.

-type 'Authenticate'() :: #'Authenticate'{}.

-type 'Ping'() :: #'Ping'{}.

-type 'Reject'() :: #'Reject'{}.

-type 'ServerSync'() :: #'ServerSync'{}.

-type 'ChannelRemove'() :: #'ChannelRemove'{}.

-type 'ChannelState'() :: #'ChannelState'{}.

-type 'UserRemove'() :: #'UserRemove'{}.

-type 'UserState.VolumeAdjustment'() :: #'UserState.VolumeAdjustment'{}.

-type 'UserState'() :: #'UserState'{}.

-type 'BanList.BanEntry'() :: #'BanList.BanEntry'{}.

-type 'BanList'() :: #'BanList'{}.

-type 'TextMessage'() :: #'TextMessage'{}.

-type 'PermissionDenied'() :: #'PermissionDenied'{}.

-type 'ACL.ChanGroup'() :: #'ACL.ChanGroup'{}.

-type 'ACL.ChanACL'() :: #'ACL.ChanACL'{}.

-type 'ACL'() :: #'ACL'{}.

-type 'QueryUsers'() :: #'QueryUsers'{}.

-type 'CryptSetup'() :: #'CryptSetup'{}.

-type 'ContextActionModify'() :: #'ContextActionModify'{}.

-type 'ContextAction'() :: #'ContextAction'{}.

-type 'UserList.User'() :: #'UserList.User'{}.

-type 'UserList'() :: #'UserList'{}.

-type 'VoiceTarget.Target'() :: #'VoiceTarget.Target'{}.

-type 'VoiceTarget'() :: #'VoiceTarget'{}.

-type 'PermissionQuery'() :: #'PermissionQuery'{}.

-type 'CodecVersion'() :: #'CodecVersion'{}.

-type 'UserStats.Stats'() :: #'UserStats.Stats'{}.

-type 'UserStats'() :: #'UserStats'{}.

-type 'RequestBlob'() :: #'RequestBlob'{}.

-type 'ServerConfig'() :: #'ServerConfig'{}.

-type 'SuggestConfig'() :: #'SuggestConfig'{}.

-type 'PluginDataTransmission'() :: #'PluginDataTransmission'{}.

-export_type(['Version'/0, 'UDPTunnel'/0, 'Authenticate'/0, 'Ping'/0, 'Reject'/0, 'ServerSync'/0, 'ChannelRemove'/0, 'ChannelState'/0, 'UserRemove'/0, 'UserState.VolumeAdjustment'/0, 'UserState'/0, 'BanList.BanEntry'/0, 'BanList'/0, 'TextMessage'/0, 'PermissionDenied'/0, 'ACL.ChanGroup'/0, 'ACL.ChanACL'/0, 'ACL'/0, 'QueryUsers'/0, 'CryptSetup'/0, 'ContextActionModify'/0, 'ContextAction'/0, 'UserList.User'/0, 'UserList'/0, 'VoiceTarget.Target'/0, 'VoiceTarget'/0, 'PermissionQuery'/0, 'CodecVersion'/0, 'UserStats.Stats'/0, 'UserStats'/0, 'RequestBlob'/0, 'ServerConfig'/0, 'SuggestConfig'/0, 'PluginDataTransmission'/0]).
-type '$msg_name'() :: 'Version' | 'UDPTunnel' | 'Authenticate' | 'Ping' | 'Reject' | 'ServerSync' | 'ChannelRemove' | 'ChannelState' | 'UserRemove' | 'UserState.VolumeAdjustment' | 'UserState' | 'BanList.BanEntry' | 'BanList' | 'TextMessage' | 'PermissionDenied' | 'ACL.ChanGroup' | 'ACL.ChanACL' | 'ACL' | 'QueryUsers' | 'CryptSetup' | 'ContextActionModify' | 'ContextAction' | 'UserList.User' | 'UserList' | 'VoiceTarget.Target' | 'VoiceTarget' | 'PermissionQuery' | 'CodecVersion' | 'UserStats.Stats' | 'UserStats' | 'RequestBlob' | 'ServerConfig' | 'SuggestConfig' | 'PluginDataTransmission'.
-type '$msg'() :: 'Version'() | 'UDPTunnel'() | 'Authenticate'() | 'Ping'() | 'Reject'() | 'ServerSync'() | 'ChannelRemove'() | 'ChannelState'() | 'UserRemove'() | 'UserState.VolumeAdjustment'() | 'UserState'() | 'BanList.BanEntry'() | 'BanList'() | 'TextMessage'() | 'PermissionDenied'() | 'ACL.ChanGroup'() | 'ACL.ChanACL'() | 'ACL'() | 'QueryUsers'() | 'CryptSetup'() | 'ContextActionModify'() | 'ContextAction'() | 'UserList.User'() | 'UserList'() | 'VoiceTarget.Target'() | 'VoiceTarget'() | 'PermissionQuery'() | 'CodecVersion'() | 'UserStats.Stats'() | 'UserStats'() | 'RequestBlob'() | 'ServerConfig'() | 'SuggestConfig'() | 'PluginDataTransmission'().
-export_type(['$msg_name'/0, '$msg'/0]).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/1}).
-endif.
-spec encode_msg('$msg'()) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/2}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-if(?OTP_RELEASE >= 24).
-dialyzer({no_underspecs, encode_msg/3}).
-endif.
-spec encode_msg('$msg'(), '$msg_name'(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Version' -> encode_msg_Version(id(Msg, TrUserData), TrUserData);
        'UDPTunnel' -> encode_msg_UDPTunnel(id(Msg, TrUserData), TrUserData);
        'Authenticate' -> encode_msg_Authenticate(id(Msg, TrUserData), TrUserData);
        'Ping' -> encode_msg_Ping(id(Msg, TrUserData), TrUserData);
        'Reject' -> encode_msg_Reject(id(Msg, TrUserData), TrUserData);
        'ServerSync' -> encode_msg_ServerSync(id(Msg, TrUserData), TrUserData);
        'ChannelRemove' -> encode_msg_ChannelRemove(id(Msg, TrUserData), TrUserData);
        'ChannelState' -> encode_msg_ChannelState(id(Msg, TrUserData), TrUserData);
        'UserRemove' -> encode_msg_UserRemove(id(Msg, TrUserData), TrUserData);
        'UserState.VolumeAdjustment' -> 'encode_msg_UserState.VolumeAdjustment'(id(Msg, TrUserData), TrUserData);
        'UserState' -> encode_msg_UserState(id(Msg, TrUserData), TrUserData);
        'BanList.BanEntry' -> 'encode_msg_BanList.BanEntry'(id(Msg, TrUserData), TrUserData);
        'BanList' -> encode_msg_BanList(id(Msg, TrUserData), TrUserData);
        'TextMessage' -> encode_msg_TextMessage(id(Msg, TrUserData), TrUserData);
        'PermissionDenied' -> encode_msg_PermissionDenied(id(Msg, TrUserData), TrUserData);
        'ACL.ChanGroup' -> 'encode_msg_ACL.ChanGroup'(id(Msg, TrUserData), TrUserData);
        'ACL.ChanACL' -> 'encode_msg_ACL.ChanACL'(id(Msg, TrUserData), TrUserData);
        'ACL' -> encode_msg_ACL(id(Msg, TrUserData), TrUserData);
        'QueryUsers' -> encode_msg_QueryUsers(id(Msg, TrUserData), TrUserData);
        'CryptSetup' -> encode_msg_CryptSetup(id(Msg, TrUserData), TrUserData);
        'ContextActionModify' -> encode_msg_ContextActionModify(id(Msg, TrUserData), TrUserData);
        'ContextAction' -> encode_msg_ContextAction(id(Msg, TrUserData), TrUserData);
        'UserList.User' -> 'encode_msg_UserList.User'(id(Msg, TrUserData), TrUserData);
        'UserList' -> encode_msg_UserList(id(Msg, TrUserData), TrUserData);
        'VoiceTarget.Target' -> 'encode_msg_VoiceTarget.Target'(id(Msg, TrUserData), TrUserData);
        'VoiceTarget' -> encode_msg_VoiceTarget(id(Msg, TrUserData), TrUserData);
        'PermissionQuery' -> encode_msg_PermissionQuery(id(Msg, TrUserData), TrUserData);
        'CodecVersion' -> encode_msg_CodecVersion(id(Msg, TrUserData), TrUserData);
        'UserStats.Stats' -> 'encode_msg_UserStats.Stats'(id(Msg, TrUserData), TrUserData);
        'UserStats' -> encode_msg_UserStats(id(Msg, TrUserData), TrUserData);
        'RequestBlob' -> encode_msg_RequestBlob(id(Msg, TrUserData), TrUserData);
        'ServerConfig' -> encode_msg_ServerConfig(id(Msg, TrUserData), TrUserData);
        'SuggestConfig' -> encode_msg_SuggestConfig(id(Msg, TrUserData), TrUserData);
        'PluginDataTransmission' -> encode_msg_PluginDataTransmission(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Version(Msg, TrUserData) -> encode_msg_Version(Msg, <<>>, TrUserData).


encode_msg_Version(#'Version'{version_v1 = F1, version_v2 = F2, release = F3, os = F4, os_version = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 40>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 18>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_string(TrF4, <<B3/binary, 26>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 34>>, TrUserData) end
    end.

encode_msg_UDPTunnel(Msg, TrUserData) -> encode_msg_UDPTunnel(Msg, <<>>, TrUserData).


encode_msg_UDPTunnel(#'UDPTunnel'{packet = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData) end.

encode_msg_Authenticate(Msg, TrUserData) -> encode_msg_Authenticate(Msg, <<>>, TrUserData).


encode_msg_Authenticate(#'Authenticate'{username = F1, password = F2, tokens = F3, celt_versions = F4, opus = F5, client_type = F6}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_Authenticate_tokens(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_Authenticate_celt_versions(TrF4, B3, TrUserData)
             end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    if F6 == undefined -> B5;
       true -> begin TrF6 = id(F6, TrUserData), e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData) end
    end.

encode_msg_Ping(Msg, TrUserData) -> encode_msg_Ping(Msg, <<>>, TrUserData).


encode_msg_Ping(#'Ping'{timestamp = F1, good = F2, late = F3, lost = F4, resync = F5, udp_packets = F6, tcp_packets = F7, udp_ping_avg = F8, udp_ping_var = F9, tcp_ping_avg = F10, tcp_ping_var = F11}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_type_float(TrF8, <<B7/binary, 69>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_float(TrF9, <<B8/binary, 77>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_float(TrF10, <<B9/binary, 85>>, TrUserData) end
          end,
    if F11 == undefined -> B10;
       true -> begin TrF11 = id(F11, TrUserData), e_type_float(TrF11, <<B10/binary, 93>>, TrUserData) end
    end.

encode_msg_Reject(Msg, TrUserData) -> encode_msg_Reject(Msg, <<>>, TrUserData).


encode_msg_Reject(#'Reject'{type = F1, reason = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), 'e_enum_Reject.RejectType'(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
    end.

encode_msg_ServerSync(Msg, TrUserData) -> encode_msg_ServerSync(Msg, <<>>, TrUserData).


encode_msg_ServerSync(#'ServerSync'{session = F1, max_bandwidth = F2, welcome_text = F3, permissions = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

encode_msg_ChannelRemove(Msg, TrUserData) -> encode_msg_ChannelRemove(Msg, <<>>, TrUserData).


encode_msg_ChannelRemove(#'ChannelRemove'{channel_id = F1}, Bin, TrUserData) -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end.

encode_msg_ChannelState(Msg, TrUserData) -> encode_msg_ChannelState(Msg, <<>>, TrUserData).


encode_msg_ChannelState(#'ChannelState'{channel_id = F1, parent = F2, name = F3, links = F4, description = F5, links_add = F6, links_remove = F7, temporary = F8, position = F9, description_hash = F10, max_users = F11, is_enter_restricted = F12,
                                        can_enter = F13},
                        Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_ChannelState_links(TrF4, B3, TrUserData)
             end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    B6 = begin
             TrF6 = id(F6, TrUserData),
             if TrF6 == [] -> B5;
                true -> e_field_ChannelState_links_add(TrF6, B5, TrUserData)
             end
         end,
    B7 = begin
             TrF7 = id(F7, TrUserData),
             if TrF7 == [] -> B6;
                true -> e_field_ChannelState_links_remove(TrF7, B6, TrUserData)
             end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_bytes(TrF10, <<B9/binary, 82>>, TrUserData) end
          end,
    B11 = if F11 == undefined -> B10;
             true -> begin TrF11 = id(F11, TrUserData), e_varint(TrF11, <<B10/binary, 88>>, TrUserData) end
          end,
    B12 = if F12 == undefined -> B11;
             true -> begin TrF12 = id(F12, TrUserData), e_type_bool(TrF12, <<B11/binary, 96>>, TrUserData) end
          end,
    if F13 == undefined -> B12;
       true -> begin TrF13 = id(F13, TrUserData), e_type_bool(TrF13, <<B12/binary, 104>>, TrUserData) end
    end.

encode_msg_UserRemove(Msg, TrUserData) -> encode_msg_UserRemove(Msg, <<>>, TrUserData).


encode_msg_UserRemove(#'UserRemove'{session = F1, actor = F2, reason = F3, ban = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

'encode_msg_UserState.VolumeAdjustment'(Msg, TrUserData) -> 'encode_msg_UserState.VolumeAdjustment'(Msg, <<>>, TrUserData).


'encode_msg_UserState.VolumeAdjustment'(#'UserState.VolumeAdjustment'{listening_channel = F1, volume_adjustment = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_type_float(TrF2, <<B1/binary, 21>>, TrUserData) end
    end.

encode_msg_UserState(Msg, TrUserData) -> encode_msg_UserState(Msg, <<>>, TrUserData).


encode_msg_UserState(#'UserState'{session = F1, actor = F2, name = F3, user_id = F4, channel_id = F5, mute = F6, deaf = F7, suppress = F8, self_mute = F9, self_deaf = F10, texture = F11, plugin_context = F12, plugin_identity = F13, comment = F14,
                                  hash = F15, comment_hash = F16, texture_hash = F17, priority_speaker = F18, recording = F19, temporary_access_tokens = F20, listening_channel_add = F21, listening_channel_remove = F22, listening_volume_adjustment = F23},
                     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_bool(TrF10, <<B9/binary, 80>>, TrUserData) end
          end,
    B11 = if F11 == undefined -> B10;
             true -> begin TrF11 = id(F11, TrUserData), e_type_bytes(TrF11, <<B10/binary, 90>>, TrUserData) end
          end,
    B12 = if F12 == undefined -> B11;
             true -> begin TrF12 = id(F12, TrUserData), e_type_bytes(TrF12, <<B11/binary, 98>>, TrUserData) end
          end,
    B13 = if F13 == undefined -> B12;
             true -> begin TrF13 = id(F13, TrUserData), e_type_string(TrF13, <<B12/binary, 106>>, TrUserData) end
          end,
    B14 = if F14 == undefined -> B13;
             true -> begin TrF14 = id(F14, TrUserData), e_type_string(TrF14, <<B13/binary, 114>>, TrUserData) end
          end,
    B15 = if F15 == undefined -> B14;
             true -> begin TrF15 = id(F15, TrUserData), e_type_string(TrF15, <<B14/binary, 122>>, TrUserData) end
          end,
    B16 = if F16 == undefined -> B15;
             true -> begin TrF16 = id(F16, TrUserData), e_type_bytes(TrF16, <<B15/binary, 130, 1>>, TrUserData) end
          end,
    B17 = if F17 == undefined -> B16;
             true -> begin TrF17 = id(F17, TrUserData), e_type_bytes(TrF17, <<B16/binary, 138, 1>>, TrUserData) end
          end,
    B18 = if F18 == undefined -> B17;
             true -> begin TrF18 = id(F18, TrUserData), e_type_bool(TrF18, <<B17/binary, 144, 1>>, TrUserData) end
          end,
    B19 = if F19 == undefined -> B18;
             true -> begin TrF19 = id(F19, TrUserData), e_type_bool(TrF19, <<B18/binary, 152, 1>>, TrUserData) end
          end,
    B20 = begin
              TrF20 = id(F20, TrUserData),
              if TrF20 == [] -> B19;
                 true -> e_field_UserState_temporary_access_tokens(TrF20, B19, TrUserData)
              end
          end,
    B21 = begin
              TrF21 = id(F21, TrUserData),
              if TrF21 == [] -> B20;
                 true -> e_field_UserState_listening_channel_add(TrF21, B20, TrUserData)
              end
          end,
    B22 = begin
              TrF22 = id(F22, TrUserData),
              if TrF22 == [] -> B21;
                 true -> e_field_UserState_listening_channel_remove(TrF22, B21, TrUserData)
              end
          end,
    begin
        TrF23 = id(F23, TrUserData),
        if TrF23 == [] -> B22;
           true -> e_field_UserState_listening_volume_adjustment(TrF23, B22, TrUserData)
        end
    end.

'encode_msg_BanList.BanEntry'(Msg, TrUserData) -> 'encode_msg_BanList.BanEntry'(Msg, <<>>, TrUserData).


'encode_msg_BanList.BanEntry'(#'BanList.BanEntry'{address = F1, mask = F2, name = F3, hash = F4, reason = F5, start = F6, duration = F7}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_string(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_type_string(TrF6, <<B5/binary, 50>>, TrUserData) end
         end,
    if F7 == undefined -> B6;
       true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
    end.

encode_msg_BanList(Msg, TrUserData) -> encode_msg_BanList(Msg, <<>>, TrUserData).


encode_msg_BanList(#'BanList'{bans = F1, query = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_BanList_bans(TrF1, Bin, TrUserData)
             end
         end,
    if F2 == undefined -> B1;
       true -> begin TrF2 = id(F2, TrUserData), e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData) end
    end.

encode_msg_TextMessage(Msg, TrUserData) -> encode_msg_TextMessage(Msg, <<>>, TrUserData).


encode_msg_TextMessage(#'TextMessage'{actor = F1, session = F2, channel_id = F3, tree_id = F4, message = F5}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_TextMessage_session(TrF2, B1, TrUserData)
             end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_TextMessage_channel_id(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_TextMessage_tree_id(TrF4, B3, TrUserData)
             end
         end,
    begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end.

encode_msg_PermissionDenied(Msg, TrUserData) -> encode_msg_PermissionDenied(Msg, <<>>, TrUserData).


encode_msg_PermissionDenied(#'PermissionDenied'{permission = F1, channel_id = F2, session = F3, reason = F4, type = F5, name = F6}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_string(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), 'e_enum_PermissionDenied.DenyType'(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    if F6 == undefined -> B5;
       true -> begin TrF6 = id(F6, TrUserData), e_type_string(TrF6, <<B5/binary, 50>>, TrUserData) end
    end.

'encode_msg_ACL.ChanGroup'(Msg, TrUserData) -> 'encode_msg_ACL.ChanGroup'(Msg, <<>>, TrUserData).


'encode_msg_ACL.ChanGroup'(#'ACL.ChanGroup'{name = F1, inherited = F2, inherit = F3, inheritable = F4, add = F5, remove = F6, inherited_members = F7}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = begin
             TrF5 = id(F5, TrUserData),
             if TrF5 == [] -> B4;
                true -> 'e_field_ACL.ChanGroup_add'(TrF5, B4, TrUserData)
             end
         end,
    B6 = begin
             TrF6 = id(F6, TrUserData),
             if TrF6 == [] -> B5;
                true -> 'e_field_ACL.ChanGroup_remove'(TrF6, B5, TrUserData)
             end
         end,
    begin
        TrF7 = id(F7, TrUserData),
        if TrF7 == [] -> B6;
           true -> 'e_field_ACL.ChanGroup_inherited_members'(TrF7, B6, TrUserData)
        end
    end.

'encode_msg_ACL.ChanACL'(Msg, TrUserData) -> 'encode_msg_ACL.ChanACL'(Msg, <<>>, TrUserData).


'encode_msg_ACL.ChanACL'(#'ACL.ChanACL'{apply_here = F1, apply_subs = F2, inherited = F3, user_id = F4, group = F5, grant = F6, deny = F7}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_type_string(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    if F7 == undefined -> B6;
       true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
    end.

encode_msg_ACL(Msg, TrUserData) -> encode_msg_ACL(Msg, <<>>, TrUserData).


encode_msg_ACL(#'ACL'{channel_id = F1, inherit_acls = F2, groups = F3, acls = F4, query = F5}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_ACL_groups(TrF3, B2, TrUserData)
             end
         end,
    B4 = begin
             TrF4 = id(F4, TrUserData),
             if TrF4 == [] -> B3;
                true -> e_field_ACL_acls(TrF4, B3, TrUserData)
             end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData) end
    end.

encode_msg_QueryUsers(Msg, TrUserData) -> encode_msg_QueryUsers(Msg, <<>>, TrUserData).


encode_msg_QueryUsers(#'QueryUsers'{ids = F1, names = F2}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_QueryUsers_ids(TrF1, Bin, TrUserData)
             end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_QueryUsers_names(TrF2, B1, TrUserData)
        end
    end.

encode_msg_CryptSetup(Msg, TrUserData) -> encode_msg_CryptSetup(Msg, <<>>, TrUserData).


encode_msg_CryptSetup(#'CryptSetup'{key = F1, client_nonce = F2, server_nonce = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
    end.

encode_msg_ContextActionModify(Msg, TrUserData) -> encode_msg_ContextActionModify(Msg, <<>>, TrUserData).


encode_msg_ContextActionModify(#'ContextActionModify'{action = F1, text = F2, context = F3, operation = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), 'e_enum_ContextActionModify.Operation'(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

encode_msg_ContextAction(Msg, TrUserData) -> encode_msg_ContextAction(Msg, <<>>, TrUserData).


encode_msg_ContextAction(#'ContextAction'{session = F1, channel_id = F2, action = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end.

'encode_msg_UserList.User'(Msg, TrUserData) -> 'encode_msg_UserList.User'(Msg, <<>>, TrUserData).


'encode_msg_UserList.User'(#'UserList.User'{user_id = F1, name = F2, last_seen = F3, last_channel = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

encode_msg_UserList(Msg, TrUserData) -> encode_msg_UserList(Msg, <<>>, TrUserData).


encode_msg_UserList(#'UserList'{users = F1}, Bin, TrUserData) ->
    begin
        TrF1 = id(F1, TrUserData),
        if TrF1 == [] -> Bin;
           true -> e_field_UserList_users(TrF1, Bin, TrUserData)
        end
    end.

'encode_msg_VoiceTarget.Target'(Msg, TrUserData) -> 'encode_msg_VoiceTarget.Target'(Msg, <<>>, TrUserData).


'encode_msg_VoiceTarget.Target'(#'VoiceTarget.Target'{session = F1, channel_id = F2, group = F3, links = F4, children = F5}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> 'e_field_VoiceTarget.Target_session'(TrF1, Bin, TrUserData)
             end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    if F5 == undefined -> B4;
       true -> begin TrF5 = id(F5, TrUserData), e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData) end
    end.

encode_msg_VoiceTarget(Msg, TrUserData) -> encode_msg_VoiceTarget(Msg, <<>>, TrUserData).


encode_msg_VoiceTarget(#'VoiceTarget'{id = F1, targets = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true -> e_field_VoiceTarget_targets(TrF2, B1, TrUserData)
        end
    end.

encode_msg_PermissionQuery(Msg, TrUserData) -> encode_msg_PermissionQuery(Msg, <<>>, TrUserData).


encode_msg_PermissionQuery(#'PermissionQuery'{channel_id = F1, permissions = F2, flush = F3}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    if F3 == undefined -> B2;
       true -> begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData) end
    end.

encode_msg_CodecVersion(Msg, TrUserData) -> encode_msg_CodecVersion(Msg, <<>>, TrUserData).


encode_msg_CodecVersion(#'CodecVersion'{alpha = F1, beta = F2, prefer_alpha = F3, opus = F4}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData) end,
    B3 = begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData) end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

'encode_msg_UserStats.Stats'(Msg, TrUserData) -> 'encode_msg_UserStats.Stats'(Msg, <<>>, TrUserData).


'encode_msg_UserStats.Stats'(#'UserStats.Stats'{good = F1, late = F2, lost = F3, resync = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_varint(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
    end.

encode_msg_UserStats(Msg, TrUserData) -> encode_msg_UserStats(Msg, <<>>, TrUserData).


encode_msg_UserStats(#'UserStats'{session = F1, stats_only = F2, certificates = F3, from_client = F4, from_server = F5, udp_packets = F6, tcp_packets = F7, udp_ping_avg = F8, udp_ping_var = F9, tcp_ping_avg = F10, tcp_ping_var = F11, version = F12,
                                  celt_versions = F13, address = F14, bandwidth = F15, onlinesecs = F16, idlesecs = F17, strong_certificate = F18, opus = F19},
                     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData) end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_UserStats_certificates(TrF3, B2, TrUserData)
             end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_mfield_UserStats_from_client(TrF4, <<B3/binary, 34>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_mfield_UserStats_from_server(TrF5, <<B4/binary, 42>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    B7 = if F7 == undefined -> B6;
            true -> begin TrF7 = id(F7, TrUserData), e_varint(TrF7, <<B6/binary, 56>>, TrUserData) end
         end,
    B8 = if F8 == undefined -> B7;
            true -> begin TrF8 = id(F8, TrUserData), e_type_float(TrF8, <<B7/binary, 69>>, TrUserData) end
         end,
    B9 = if F9 == undefined -> B8;
            true -> begin TrF9 = id(F9, TrUserData), e_type_float(TrF9, <<B8/binary, 77>>, TrUserData) end
         end,
    B10 = if F10 == undefined -> B9;
             true -> begin TrF10 = id(F10, TrUserData), e_type_float(TrF10, <<B9/binary, 85>>, TrUserData) end
          end,
    B11 = if F11 == undefined -> B10;
             true -> begin TrF11 = id(F11, TrUserData), e_type_float(TrF11, <<B10/binary, 93>>, TrUserData) end
          end,
    B12 = if F12 == undefined -> B11;
             true -> begin TrF12 = id(F12, TrUserData), e_mfield_UserStats_version(TrF12, <<B11/binary, 98>>, TrUserData) end
          end,
    B13 = begin
              TrF13 = id(F13, TrUserData),
              if TrF13 == [] -> B12;
                 true -> e_field_UserStats_celt_versions(TrF13, B12, TrUserData)
              end
          end,
    B14 = if F14 == undefined -> B13;
             true -> begin TrF14 = id(F14, TrUserData), e_type_bytes(TrF14, <<B13/binary, 114>>, TrUserData) end
          end,
    B15 = if F15 == undefined -> B14;
             true -> begin TrF15 = id(F15, TrUserData), e_varint(TrF15, <<B14/binary, 120>>, TrUserData) end
          end,
    B16 = if F16 == undefined -> B15;
             true -> begin TrF16 = id(F16, TrUserData), e_varint(TrF16, <<B15/binary, 128, 1>>, TrUserData) end
          end,
    B17 = if F17 == undefined -> B16;
             true -> begin TrF17 = id(F17, TrUserData), e_varint(TrF17, <<B16/binary, 136, 1>>, TrUserData) end
          end,
    B18 = if F18 == undefined -> B17;
             true -> begin TrF18 = id(F18, TrUserData), e_type_bool(TrF18, <<B17/binary, 144, 1>>, TrUserData) end
          end,
    if F19 == undefined -> B18;
       true -> begin TrF19 = id(F19, TrUserData), e_type_bool(TrF19, <<B18/binary, 152, 1>>, TrUserData) end
    end.

encode_msg_RequestBlob(Msg, TrUserData) -> encode_msg_RequestBlob(Msg, <<>>, TrUserData).


encode_msg_RequestBlob(#'RequestBlob'{session_texture = F1, session_comment = F2, channel_description = F3}, Bin, TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             if TrF1 == [] -> Bin;
                true -> e_field_RequestBlob_session_texture(TrF1, Bin, TrUserData)
             end
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_RequestBlob_session_comment(TrF2, B1, TrUserData)
             end
         end,
    begin
        TrF3 = id(F3, TrUserData),
        if TrF3 == [] -> B2;
           true -> e_field_RequestBlob_channel_description(TrF3, B2, TrUserData)
        end
    end.

encode_msg_ServerConfig(Msg, TrUserData) -> encode_msg_ServerConfig(Msg, <<>>, TrUserData).


encode_msg_ServerConfig(#'ServerConfig'{max_bandwidth = F1, welcome_text = F2, allow_html = F3, message_length = F4, image_message_length = F5, max_users = F6, recording_allowed = F7}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData) end
         end,
    B4 = if F4 == undefined -> B3;
            true -> begin TrF4 = id(F4, TrUserData), e_varint(TrF4, <<B3/binary, 32>>, TrUserData) end
         end,
    B5 = if F5 == undefined -> B4;
            true -> begin TrF5 = id(F5, TrUserData), e_varint(TrF5, <<B4/binary, 40>>, TrUserData) end
         end,
    B6 = if F6 == undefined -> B5;
            true -> begin TrF6 = id(F6, TrUserData), e_varint(TrF6, <<B5/binary, 48>>, TrUserData) end
         end,
    if F7 == undefined -> B6;
       true -> begin TrF7 = id(F7, TrUserData), e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData) end
    end.

encode_msg_SuggestConfig(Msg, TrUserData) -> encode_msg_SuggestConfig(Msg, <<>>, TrUserData).


encode_msg_SuggestConfig(#'SuggestConfig'{version_v1 = F1, version_v2 = F2, positional = F3, push_to_talk = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = if F2 == undefined -> B1;
            true -> begin TrF2 = id(F2, TrUserData), e_varint(TrF2, <<B1/binary, 32>>, TrUserData) end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bool(TrF3, <<B2/binary, 16>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_type_bool(TrF4, <<B3/binary, 24>>, TrUserData) end
    end.

encode_msg_PluginDataTransmission(Msg, TrUserData) -> encode_msg_PluginDataTransmission(Msg, <<>>, TrUserData).


encode_msg_PluginDataTransmission(#'PluginDataTransmission'{senderSession = F1, receiverSessions = F2, data = F3, dataID = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true -> begin TrF1 = id(F1, TrUserData), e_varint(TrF1, <<Bin/binary, 8>>, TrUserData) end
         end,
    B2 = begin
             TrF2 = id(F2, TrUserData),
             if TrF2 == [] -> B1;
                true -> e_field_PluginDataTransmission_receiverSessions(TrF2, B1, TrUserData)
             end
         end,
    B3 = if F3 == undefined -> B2;
            true -> begin TrF3 = id(F3, TrUserData), e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData) end
         end,
    if F4 == undefined -> B3;
       true -> begin TrF4 = id(F4, TrUserData), e_type_string(TrF4, <<B3/binary, 34>>, TrUserData) end
    end.

e_field_Authenticate_tokens([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Authenticate_tokens(Rest, Bin3, TrUserData);
e_field_Authenticate_tokens([], Bin, _TrUserData) -> Bin.

e_field_Authenticate_celt_versions([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 32>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_Authenticate_celt_versions(Rest, Bin3, TrUserData);
e_field_Authenticate_celt_versions([], Bin, _TrUserData) -> Bin.

e_field_ChannelState_links([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 32>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ChannelState_links(Rest, Bin3, TrUserData);
e_field_ChannelState_links([], Bin, _TrUserData) -> Bin.

e_field_ChannelState_links_add([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 48>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ChannelState_links_add(Rest, Bin3, TrUserData);
e_field_ChannelState_links_add([], Bin, _TrUserData) -> Bin.

e_field_ChannelState_links_remove([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 56>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ChannelState_links_remove(Rest, Bin3, TrUserData);
e_field_ChannelState_links_remove([], Bin, _TrUserData) -> Bin.

e_field_UserState_temporary_access_tokens([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 162, 1>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UserState_temporary_access_tokens(Rest, Bin3, TrUserData);
e_field_UserState_temporary_access_tokens([], Bin, _TrUserData) -> Bin.

e_field_UserState_listening_channel_add([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 168, 1>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UserState_listening_channel_add(Rest, Bin3, TrUserData);
e_field_UserState_listening_channel_add([], Bin, _TrUserData) -> Bin.

e_field_UserState_listening_channel_remove([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 176, 1>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UserState_listening_channel_remove(Rest, Bin3, TrUserData);
e_field_UserState_listening_channel_remove([], Bin, _TrUserData) -> Bin.

e_mfield_UserState_listening_volume_adjustment(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_UserState.VolumeAdjustment'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UserState_listening_volume_adjustment([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 186, 1>>,
    Bin3 = e_mfield_UserState_listening_volume_adjustment(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UserState_listening_volume_adjustment(Rest, Bin3, TrUserData);
e_field_UserState_listening_volume_adjustment([], Bin, _TrUserData) -> Bin.

e_mfield_BanList_bans(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_BanList.BanEntry'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_BanList_bans([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_BanList_bans(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_BanList_bans(Rest, Bin3, TrUserData);
e_field_BanList_bans([], Bin, _TrUserData) -> Bin.

e_field_TextMessage_session([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TextMessage_session(Rest, Bin3, TrUserData);
e_field_TextMessage_session([], Bin, _TrUserData) -> Bin.

e_field_TextMessage_channel_id([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 24>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TextMessage_channel_id(Rest, Bin3, TrUserData);
e_field_TextMessage_channel_id([], Bin, _TrUserData) -> Bin.

e_field_TextMessage_tree_id([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 32>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_TextMessage_tree_id(Rest, Bin3, TrUserData);
e_field_TextMessage_tree_id([], Bin, _TrUserData) -> Bin.

'e_field_ACL.ChanGroup_add'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 40>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ACL.ChanGroup_add'(Rest, Bin3, TrUserData);
'e_field_ACL.ChanGroup_add'([], Bin, _TrUserData) -> Bin.

'e_field_ACL.ChanGroup_remove'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 48>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ACL.ChanGroup_remove'(Rest, Bin3, TrUserData);
'e_field_ACL.ChanGroup_remove'([], Bin, _TrUserData) -> Bin.

'e_field_ACL.ChanGroup_inherited_members'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 56>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_ACL.ChanGroup_inherited_members'(Rest, Bin3, TrUserData);
'e_field_ACL.ChanGroup_inherited_members'([], Bin, _TrUserData) -> Bin.

e_mfield_ACL_groups(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ACL.ChanGroup'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ACL_groups([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_ACL_groups(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ACL_groups(Rest, Bin3, TrUserData);
e_field_ACL_groups([], Bin, _TrUserData) -> Bin.

e_mfield_ACL_acls(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_ACL.ChanACL'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ACL_acls([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_ACL_acls(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_ACL_acls(Rest, Bin3, TrUserData);
e_field_ACL_acls([], Bin, _TrUserData) -> Bin.

e_field_QueryUsers_ids([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_QueryUsers_ids(Rest, Bin3, TrUserData);
e_field_QueryUsers_ids([], Bin, _TrUserData) -> Bin.

e_field_QueryUsers_names([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_QueryUsers_names(Rest, Bin3, TrUserData);
e_field_QueryUsers_names([], Bin, _TrUserData) -> Bin.

e_mfield_UserList_users(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_UserList.User'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UserList_users([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_UserList_users(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UserList_users(Rest, Bin3, TrUserData);
e_field_UserList_users([], Bin, _TrUserData) -> Bin.

'e_field_VoiceTarget.Target_session'([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    'e_field_VoiceTarget.Target_session'(Rest, Bin3, TrUserData);
'e_field_VoiceTarget.Target_session'([], Bin, _TrUserData) -> Bin.

e_mfield_VoiceTarget_targets(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_VoiceTarget.Target'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_VoiceTarget_targets([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_VoiceTarget_targets(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_VoiceTarget_targets(Rest, Bin3, TrUserData);
e_field_VoiceTarget_targets([], Bin, _TrUserData) -> Bin.

e_field_UserStats_certificates([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_bytes(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UserStats_certificates(Rest, Bin3, TrUserData);
e_field_UserStats_certificates([], Bin, _TrUserData) -> Bin.

e_mfield_UserStats_from_client(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_UserStats.Stats'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UserStats_from_server(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_UserStats.Stats'(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UserStats_version(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Version(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_UserStats_celt_versions([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 104>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_UserStats_celt_versions(Rest, Bin3, TrUserData);
e_field_UserStats_celt_versions([], Bin, _TrUserData) -> Bin.

e_field_RequestBlob_session_texture([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_RequestBlob_session_texture(Rest, Bin3, TrUserData);
e_field_RequestBlob_session_texture([], Bin, _TrUserData) -> Bin.

e_field_RequestBlob_session_comment([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_RequestBlob_session_comment(Rest, Bin3, TrUserData);
e_field_RequestBlob_session_comment([], Bin, _TrUserData) -> Bin.

e_field_RequestBlob_channel_description([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 24>>,
    Bin3 = e_varint(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_RequestBlob_channel_description(Rest, Bin3, TrUserData);
e_field_RequestBlob_channel_description([], Bin, _TrUserData) -> Bin.

e_field_PluginDataTransmission_receiverSessions(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_PluginDataTransmission_receiverSessions(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_PluginDataTransmission_receiverSessions([], Bin, _TrUserData) -> Bin.

e_pfield_PluginDataTransmission_receiverSessions([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_PluginDataTransmission_receiverSessions(Rest, Bin2, TrUserData);
e_pfield_PluginDataTransmission_receiverSessions([], Bin, _TrUserData) -> Bin.

'e_enum_Reject.RejectType'('None', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_Reject.RejectType'('WrongVersion', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_Reject.RejectType'('InvalidUsername', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_Reject.RejectType'('WrongUserPW', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_Reject.RejectType'('WrongServerPW', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_Reject.RejectType'('UsernameInUse', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_Reject.RejectType'('ServerFull', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_Reject.RejectType'('NoCertificate', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_Reject.RejectType'('AuthenticatorFail', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_Reject.RejectType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_PermissionDenied.DenyType'('Text', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_PermissionDenied.DenyType'('Permission', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_PermissionDenied.DenyType'('SuperUser', Bin, _TrUserData) -> <<Bin/binary, 2>>;
'e_enum_PermissionDenied.DenyType'('ChannelName', Bin, _TrUserData) -> <<Bin/binary, 3>>;
'e_enum_PermissionDenied.DenyType'('TextTooLong', Bin, _TrUserData) -> <<Bin/binary, 4>>;
'e_enum_PermissionDenied.DenyType'('H9K', Bin, _TrUserData) -> <<Bin/binary, 5>>;
'e_enum_PermissionDenied.DenyType'('TemporaryChannel', Bin, _TrUserData) -> <<Bin/binary, 6>>;
'e_enum_PermissionDenied.DenyType'('MissingCertificate', Bin, _TrUserData) -> <<Bin/binary, 7>>;
'e_enum_PermissionDenied.DenyType'('UserName', Bin, _TrUserData) -> <<Bin/binary, 8>>;
'e_enum_PermissionDenied.DenyType'('ChannelFull', Bin, _TrUserData) -> <<Bin/binary, 9>>;
'e_enum_PermissionDenied.DenyType'('NestingLimit', Bin, _TrUserData) -> <<Bin/binary, 10>>;
'e_enum_PermissionDenied.DenyType'('ChannelCountLimit', Bin, _TrUserData) -> <<Bin/binary, 11>>;
'e_enum_PermissionDenied.DenyType'('ChannelListenerLimit', Bin, _TrUserData) -> <<Bin/binary, 12>>;
'e_enum_PermissionDenied.DenyType'('UserListenerLimit', Bin, _TrUserData) -> <<Bin/binary, 13>>;
'e_enum_PermissionDenied.DenyType'(V, Bin, _TrUserData) -> e_varint(V, Bin).

'e_enum_ContextActionModify.Operation'('Add', Bin, _TrUserData) -> <<Bin/binary, 0>>;
'e_enum_ContextActionModify.Operation'('Remove', Bin, _TrUserData) -> <<Bin/binary, 1>>;
'e_enum_ContextActionModify.Operation'(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason:StackTrace ->
            erlang:raise(error, Reason, StackTrace);
        Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch
        error:{gpb_error,_}=Reason ->
            erlang:raise(error, Reason,
                         erlang:get_stacktrace());
        Class:Reason ->
            StackTrace = erlang:get_stacktrace(),
            error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Version', Bin, TrUserData) -> id(decode_msg_Version(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UDPTunnel', Bin, TrUserData) -> id(decode_msg_UDPTunnel(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Authenticate', Bin, TrUserData) -> id(decode_msg_Authenticate(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Ping', Bin, TrUserData) -> id(decode_msg_Ping(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Reject', Bin, TrUserData) -> id(decode_msg_Reject(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ServerSync', Bin, TrUserData) -> id(decode_msg_ServerSync(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ChannelRemove', Bin, TrUserData) -> id(decode_msg_ChannelRemove(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ChannelState', Bin, TrUserData) -> id(decode_msg_ChannelState(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserRemove', Bin, TrUserData) -> id(decode_msg_UserRemove(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserState.VolumeAdjustment', Bin, TrUserData) -> id('decode_msg_UserState.VolumeAdjustment'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserState', Bin, TrUserData) -> id(decode_msg_UserState(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BanList.BanEntry', Bin, TrUserData) -> id('decode_msg_BanList.BanEntry'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('BanList', Bin, TrUserData) -> id(decode_msg_BanList(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TextMessage', Bin, TrUserData) -> id(decode_msg_TextMessage(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PermissionDenied', Bin, TrUserData) -> id(decode_msg_PermissionDenied(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ACL.ChanGroup', Bin, TrUserData) -> id('decode_msg_ACL.ChanGroup'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ACL.ChanACL', Bin, TrUserData) -> id('decode_msg_ACL.ChanACL'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ACL', Bin, TrUserData) -> id(decode_msg_ACL(Bin, TrUserData), TrUserData);
decode_msg_2_doit('QueryUsers', Bin, TrUserData) -> id(decode_msg_QueryUsers(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CryptSetup', Bin, TrUserData) -> id(decode_msg_CryptSetup(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ContextActionModify', Bin, TrUserData) -> id(decode_msg_ContextActionModify(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ContextAction', Bin, TrUserData) -> id(decode_msg_ContextAction(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserList.User', Bin, TrUserData) -> id('decode_msg_UserList.User'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserList', Bin, TrUserData) -> id(decode_msg_UserList(Bin, TrUserData), TrUserData);
decode_msg_2_doit('VoiceTarget.Target', Bin, TrUserData) -> id('decode_msg_VoiceTarget.Target'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('VoiceTarget', Bin, TrUserData) -> id(decode_msg_VoiceTarget(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PermissionQuery', Bin, TrUserData) -> id(decode_msg_PermissionQuery(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CodecVersion', Bin, TrUserData) -> id(decode_msg_CodecVersion(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserStats.Stats', Bin, TrUserData) -> id('decode_msg_UserStats.Stats'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('UserStats', Bin, TrUserData) -> id(decode_msg_UserStats(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RequestBlob', Bin, TrUserData) -> id(decode_msg_RequestBlob(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ServerConfig', Bin, TrUserData) -> id(decode_msg_ServerConfig(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SuggestConfig', Bin, TrUserData) -> id(decode_msg_SuggestConfig(Bin, TrUserData), TrUserData);
decode_msg_2_doit('PluginDataTransmission', Bin, TrUserData) -> id(decode_msg_PluginDataTransmission(Bin, TrUserData), TrUserData).



decode_msg_Version(Bin, TrUserData) -> dfp_read_field_def_Version(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Version(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Version_version_v1(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Version(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Version_version_v2(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Version(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Version_release(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Version(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Version_os(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Version(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Version_os_version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Version(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'Version'{version_v1 = F@_1, version_v2 = F@_2, release = F@_3, os = F@_4, os_version = F@_5};
dfp_read_field_def_Version(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_Version(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Version(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_Version(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Version(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Version_version_v1(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_Version_version_v2(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_Version_release(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_Version_os(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_Version_os_version(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Version(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_Version(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_Version(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_Version(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_Version(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_Version(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #'Version'{version_v1 = F@_1, version_v2 = F@_2, release = F@_3, os = F@_4, os_version = F@_5}.

d_field_Version_version_v1(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Version_version_v1(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Version_version_v1(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Version(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_Version_version_v2(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Version_version_v2(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Version_version_v2(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_Version(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_Version_release(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Version_release(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Version_release(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Version(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_Version_os(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Version_os(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Version_os(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Version(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_Version_os_version(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Version_os_version(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Version_os_version(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Version(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Version(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_Version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_Version(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Version(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_Version(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_Version(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Version(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_Version(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Version(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_Version(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_Version(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_UDPTunnel(Bin, TrUserData) -> dfp_read_field_def_UDPTunnel(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_UDPTunnel(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_UDPTunnel_packet(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_UDPTunnel(<<>>, 0, 0, _, F@_1, _) -> #'UDPTunnel'{packet = F@_1};
dfp_read_field_def_UDPTunnel(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_UDPTunnel(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_UDPTunnel(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_UDPTunnel(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_UDPTunnel(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UDPTunnel_packet(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UDPTunnel(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_UDPTunnel(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_UDPTunnel(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_UDPTunnel(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_UDPTunnel(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_UDPTunnel(<<>>, 0, 0, _, F@_1, _) -> #'UDPTunnel'{packet = F@_1}.

d_field_UDPTunnel_packet(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_UDPTunnel_packet(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_UDPTunnel_packet(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_UDPTunnel(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_UDPTunnel(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_UDPTunnel(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_UDPTunnel(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UDPTunnel(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_UDPTunnel(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_UDPTunnel(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_UDPTunnel(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UDPTunnel(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_UDPTunnel(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UDPTunnel(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_UDPTunnel(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UDPTunnel(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_UDPTunnel(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UDPTunnel(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_Authenticate(Bin, TrUserData) -> dfp_read_field_def_Authenticate(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id([], TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Authenticate(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Authenticate_username(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Authenticate(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Authenticate_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Authenticate(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Authenticate_tokens(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Authenticate(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_pfield_Authenticate_celt_versions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Authenticate(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Authenticate_celt_versions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Authenticate(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Authenticate_opus(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Authenticate(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_Authenticate_client_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Authenticate(<<>>, 0, 0, _, F@_1, F@_2, R1, R2, F@_5, F@_6, TrUserData) ->
    #'Authenticate'{username = F@_1, password = F@_2, tokens = lists_reverse(R1, TrUserData), celt_versions = lists_reverse(R2, TrUserData), opus = F@_5, client_type = F@_6};
dfp_read_field_def_Authenticate(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_Authenticate(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_Authenticate(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 -> dg_read_field_def_Authenticate(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_Authenticate(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Authenticate_username(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        18 -> d_field_Authenticate_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        26 -> d_field_Authenticate_tokens(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        34 -> d_pfield_Authenticate_celt_versions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        32 -> d_field_Authenticate_celt_versions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        40 -> d_field_Authenticate_opus(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        48 -> d_field_Authenticate_client_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Authenticate(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_Authenticate(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_Authenticate(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_Authenticate(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_Authenticate(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_Authenticate(<<>>, 0, 0, _, F@_1, F@_2, R1, R2, F@_5, F@_6, TrUserData) ->
    #'Authenticate'{username = F@_1, password = F@_2, tokens = lists_reverse(R1, TrUserData), celt_versions = lists_reverse(R2, TrUserData), opus = F@_5, client_type = F@_6}.

d_field_Authenticate_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Authenticate_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Authenticate_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Authenticate(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Authenticate_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Authenticate_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Authenticate_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Authenticate(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Authenticate_tokens(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Authenticate_tokens(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Authenticate_tokens(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Authenticate(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, F@_5, F@_6, TrUserData).

d_field_Authenticate_celt_versions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Authenticate_celt_versions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Authenticate_celt_versions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Authenticate(RestF, 0, 0, F, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, F@_6, TrUserData).

d_pfield_Authenticate_celt_versions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_pfield_Authenticate_celt_versions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_pfield_Authenticate_celt_versions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, E, F@_5, F@_6, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_Authenticate_celt_versions(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_Authenticate(Rest2, 0, 0, F, F@_1, F@_2, F@_3, NewSeq, F@_5, F@_6, TrUserData).

d_packed_field_Authenticate_celt_versions(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_Authenticate_celt_versions(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_Authenticate_celt_versions(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_Authenticate_celt_versions(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_Authenticate_celt_versions(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_Authenticate_opus(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Authenticate_opus(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Authenticate_opus(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_Authenticate(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_Authenticate_client_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_Authenticate_client_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Authenticate_client_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_Authenticate(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_Authenticate(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_Authenticate(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_Authenticate(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_Authenticate(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_Authenticate(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> skip_length_delimited_Authenticate(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_Authenticate(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Authenticate(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_Authenticate(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Authenticate(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_Authenticate(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_Authenticate(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_Authenticate(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_Authenticate(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_Ping(Bin, TrUserData) ->
    dfp_read_field_def_Ping(Bin,
                            0,
                            0,
                            0,
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            id(undefined, TrUserData),
                            TrUserData).

dfp_read_field_def_Ping(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_timestamp(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_good(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_late(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_lost(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_resync(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_udp_packets(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_tcp_packets(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<69, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_udp_ping_avg(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<77, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_udp_ping_var(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<85, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_tcp_ping_avg(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<93, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    d_field_Ping_tcp_ping_var(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_Ping(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'Ping'{timestamp = F@_1, good = F@_2, late = F@_3, lost = F@_4, resync = F@_5, udp_packets = F@_6, tcp_packets = F@_7, udp_ping_avg = F@_8, udp_ping_var = F@_9, tcp_ping_avg = F@_10, tcp_ping_var = F@_11};
dfp_read_field_def_Ping(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) -> dg_read_field_def_Ping(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

dg_read_field_def_Ping(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_Ping(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dg_read_field_def_Ping(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Ping_timestamp(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        16 -> d_field_Ping_good(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        24 -> d_field_Ping_late(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        32 -> d_field_Ping_lost(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        40 -> d_field_Ping_resync(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        48 -> d_field_Ping_udp_packets(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        56 -> d_field_Ping_tcp_packets(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        69 -> d_field_Ping_udp_ping_avg(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        77 -> d_field_Ping_udp_ping_var(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        85 -> d_field_Ping_tcp_ping_avg(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        93 -> d_field_Ping_tcp_ping_var(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Ping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                1 -> skip_64_Ping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                2 -> skip_length_delimited_Ping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                3 -> skip_group_Ping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
                5 -> skip_32_Ping(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
            end
    end;
dg_read_field_def_Ping(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'Ping'{timestamp = F@_1, good = F@_2, late = F@_3, lost = F@_4, resync = F@_5, udp_packets = F@_6, tcp_packets = F@_7, udp_ping_avg = F@_8, udp_ping_var = F@_9, tcp_ping_avg = F@_10, tcp_ping_var = F@_11}.

d_field_Ping_timestamp(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Ping_timestamp(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_timestamp(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_Ping(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Ping_good(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Ping_good(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_good(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Ping(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Ping_late(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Ping_late(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_late(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Ping(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Ping_lost(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Ping_lost(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_lost(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Ping(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Ping_resync(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Ping_resync(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_resync(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Ping(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Ping_udp_packets(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Ping_udp_packets(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_udp_packets(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Ping(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Ping_tcp_packets(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    d_field_Ping_tcp_packets(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_tcp_packets(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_Ping(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_Ping_udp_ping_avg(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(infinity, TrUserData), F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_udp_ping_avg(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id('-infinity', TrUserData), F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_udp_ping_avg(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(nan, TrUserData), F@_9, F@_10, F@_11, TrUserData);
d_field_Ping_udp_ping_avg(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(Value, TrUserData), F@_9, F@_10, F@_11, TrUserData).

d_field_Ping_udp_ping_var(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(infinity, TrUserData), F@_10, F@_11, TrUserData);
d_field_Ping_udp_ping_var(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id('-infinity', TrUserData), F@_10, F@_11, TrUserData);
d_field_Ping_udp_ping_var(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(nan, TrUserData), F@_10, F@_11, TrUserData);
d_field_Ping_udp_ping_var(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(Value, TrUserData), F@_10, F@_11, TrUserData).

d_field_Ping_tcp_ping_avg(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(infinity, TrUserData), F@_11, TrUserData);
d_field_Ping_tcp_ping_avg(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id('-infinity', TrUserData), F@_11, TrUserData);
d_field_Ping_tcp_ping_avg(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(nan, TrUserData), F@_11, TrUserData);
d_field_Ping_tcp_ping_avg(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(Value, TrUserData), F@_11, TrUserData).

d_field_Ping_tcp_ping_var(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(infinity, TrUserData), TrUserData);
d_field_Ping_tcp_ping_var(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id('-infinity', TrUserData), TrUserData);
d_field_Ping_tcp_ping_var(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(nan, TrUserData), TrUserData);
d_field_Ping_tcp_ping_var(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(Value, TrUserData), TrUserData).

skip_varint_Ping(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    skip_varint_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
skip_varint_Ping(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_length_delimited_Ping(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) when N < 57 ->
    skip_length_delimited_Ping(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
skip_length_delimited_Ping(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Ping(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_group_Ping(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Ping(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_32_Ping(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_64_Ping(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_Ping(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

decode_msg_Reject(Bin, TrUserData) -> dfp_read_field_def_Reject(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Reject(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Reject_type(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Reject(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Reject_reason(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Reject(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Reject'{type = F@_1, reason = F@_2};
dfp_read_field_def_Reject(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Reject(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Reject(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Reject(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Reject(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Reject_type(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Reject_reason(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Reject(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Reject(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Reject(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Reject(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Reject(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Reject(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'Reject'{type = F@_1, reason = F@_2}.

d_field_Reject_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Reject_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Reject_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_Reject.RejectType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Reject(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Reject_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Reject_reason(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Reject_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Reject(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Reject(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Reject(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Reject(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Reject(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Reject(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Reject(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Reject(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Reject(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Reject(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Reject(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Reject(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Reject(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Reject(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Reject(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_ServerSync(Bin, TrUserData) -> dfp_read_field_def_ServerSync(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ServerSync(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ServerSync_session(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ServerSync(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ServerSync_max_bandwidth(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ServerSync(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ServerSync_welcome_text(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ServerSync(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ServerSync_permissions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ServerSync(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'ServerSync'{session = F@_1, max_bandwidth = F@_2, welcome_text = F@_3, permissions = F@_4};
dfp_read_field_def_ServerSync(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_ServerSync(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ServerSync(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_ServerSync(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_ServerSync(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ServerSync_session(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_ServerSync_max_bandwidth(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_ServerSync_welcome_text(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_ServerSync_permissions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ServerSync(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_ServerSync(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_ServerSync(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_ServerSync(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_ServerSync(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_ServerSync(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'ServerSync'{session = F@_1, max_bandwidth = F@_2, welcome_text = F@_3, permissions = F@_4}.

d_field_ServerSync_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ServerSync_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ServerSync_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ServerSync(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_ServerSync_max_bandwidth(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ServerSync_max_bandwidth(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ServerSync_max_bandwidth(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ServerSync(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_ServerSync_welcome_text(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ServerSync_welcome_text(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ServerSync_welcome_text(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ServerSync(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_ServerSync_permissions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ServerSync_permissions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ServerSync_permissions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_ServerSync(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_ServerSync(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_ServerSync(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_ServerSync(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ServerSync(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ServerSync(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_ServerSync(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_ServerSync(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerSync(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_ServerSync(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerSync(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_ServerSync(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ServerSync(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_ServerSync(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ServerSync(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_ChannelRemove(Bin, TrUserData) -> dfp_read_field_def_ChannelRemove(Bin, 0, 0, 0, id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ChannelRemove(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ChannelRemove_channel_id(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ChannelRemove(<<>>, 0, 0, _, F@_1, _) -> #'ChannelRemove'{channel_id = F@_1};
dfp_read_field_def_ChannelRemove(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ChannelRemove(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ChannelRemove(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ChannelRemove(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ChannelRemove(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ChannelRemove_channel_id(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ChannelRemove(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ChannelRemove(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ChannelRemove(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ChannelRemove(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ChannelRemove(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ChannelRemove(<<>>, 0, 0, _, F@_1, _) -> #'ChannelRemove'{channel_id = F@_1}.

d_field_ChannelRemove_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ChannelRemove_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ChannelRemove_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ChannelRemove(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_ChannelRemove(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ChannelRemove(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ChannelRemove(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ChannelRemove(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ChannelRemove(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ChannelRemove(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ChannelRemove(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChannelRemove(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ChannelRemove(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ChannelRemove(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ChannelRemove(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ChannelRemove(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ChannelRemove(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ChannelRemove(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_ChannelState(Bin, TrUserData) ->
    dfp_read_field_def_ChannelState(Bin,
                                    0,
                                    0,
                                    0,
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id([], TrUserData),
                                    id(undefined, TrUserData),
                                    id([], TrUserData),
                                    id([], TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    id(undefined, TrUserData),
                                    TrUserData).

dfp_read_field_def_ChannelState(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_parent(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_pfield_ChannelState_links(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_links(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_description(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_pfield_ChannelState_links_add(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_links_add(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_pfield_ChannelState_links_remove(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_links_remove(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_temporary(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<72, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_position(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<82, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_description_hash(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<88, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_max_users(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<96, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_is_enter_restricted(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<104, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_ChannelState_can_enter(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_ChannelState(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, F@_5, R2, R3, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    #'ChannelState'{channel_id = F@_1, parent = F@_2, name = F@_3, links = lists_reverse(R1, TrUserData), description = F@_5, links_add = lists_reverse(R2, TrUserData), links_remove = lists_reverse(R3, TrUserData), temporary = F@_8, position = F@_9,
                    description_hash = F@_10, max_users = F@_11, is_enter_restricted = F@_12, can_enter = F@_13};
dfp_read_field_def_ChannelState(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_ChannelState(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

dg_read_field_def_ChannelState(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_ChannelState(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dg_read_field_def_ChannelState(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ChannelState_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        16 -> d_field_ChannelState_parent(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        26 -> d_field_ChannelState_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        34 -> d_pfield_ChannelState_links(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        32 -> d_field_ChannelState_links(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        42 -> d_field_ChannelState_description(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        50 -> d_pfield_ChannelState_links_add(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        48 -> d_field_ChannelState_links_add(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        58 -> d_pfield_ChannelState_links_remove(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        56 -> d_field_ChannelState_links_remove(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        64 -> d_field_ChannelState_temporary(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        72 -> d_field_ChannelState_position(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        82 -> d_field_ChannelState_description_hash(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        88 -> d_field_ChannelState_max_users(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        96 -> d_field_ChannelState_is_enter_restricted(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        104 -> d_field_ChannelState_can_enter(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ChannelState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                1 -> skip_64_ChannelState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                2 -> skip_length_delimited_ChannelState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                3 -> skip_group_ChannelState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
                5 -> skip_32_ChannelState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
            end
    end;
dg_read_field_def_ChannelState(<<>>, 0, 0, _, F@_1, F@_2, F@_3, R1, F@_5, R2, R3, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    #'ChannelState'{channel_id = F@_1, parent = F@_2, name = F@_3, links = lists_reverse(R1, TrUserData), description = F@_5, links_add = lists_reverse(R2, TrUserData), links_remove = lists_reverse(R3, TrUserData), temporary = F@_8, position = F@_9,
                    description_hash = F@_10, max_users = F@_11, is_enter_restricted = F@_12, can_enter = F@_13}.

d_field_ChannelState_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_ChannelState_parent(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_parent(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_parent(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_ChannelState_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_ChannelState_links(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_links(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_links(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_pfield_ChannelState_links(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_pfield_ChannelState_links(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_pfield_ChannelState_links(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, E, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_ChannelState_links(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_ChannelState(Rest2, 0, 0, F, F@_1, F@_2, F@_3, NewSeq, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_packed_field_ChannelState_links(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_ChannelState_links(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_ChannelState_links(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_ChannelState_links(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_ChannelState_links(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_ChannelState_description(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_description(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_description(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_ChannelState_links_add(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_links_add(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_links_add(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, cons(NewFValue, Prev, TrUserData), F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_pfield_ChannelState_links_add(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_pfield_ChannelState_links_add(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_pfield_ChannelState_links_add(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, E, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_ChannelState_links_add(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_ChannelState(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewSeq, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_packed_field_ChannelState_links_add(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_ChannelState_links_add(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_ChannelState_links_add(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_ChannelState_links_add(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_ChannelState_links_add(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_ChannelState_links_remove(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_links_remove(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_links_remove(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, cons(NewFValue, Prev, TrUserData), F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_pfield_ChannelState_links_remove(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_pfield_ChannelState_links_remove(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_pfield_ChannelState_links_remove(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, E, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_ChannelState_links_remove(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_ChannelState(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewSeq, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_packed_field_ChannelState_links_remove(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_ChannelState_links_remove(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_ChannelState_links_remove(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_ChannelState_links_remove(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_ChannelState_links_remove(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_ChannelState_temporary(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_temporary(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_temporary(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_ChannelState_position(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_position(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_position(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_ChannelState_description_hash(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_description_hash(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_description_hash(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, F@_12, F@_13, TrUserData).

d_field_ChannelState_max_users(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_max_users(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_max_users(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, F@_12, F@_13, TrUserData).

d_field_ChannelState_is_enter_restricted(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_is_enter_restricted(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_is_enter_restricted(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, NewFValue, F@_13, TrUserData).

d_field_ChannelState_can_enter(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    d_field_ChannelState_can_enter(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_ChannelState_can_enter(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ChannelState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewFValue, TrUserData).

skip_varint_ChannelState(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_ChannelState(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_varint_ChannelState(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_ChannelState(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_length_delimited_ChannelState(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) when N < 57 ->
    skip_length_delimited_ChannelState(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
skip_length_delimited_ChannelState(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChannelState(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_group_ChannelState(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ChannelState(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_32_ChannelState(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_ChannelState(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_64_ChannelState(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_ChannelState(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

decode_msg_UserRemove(Bin, TrUserData) -> dfp_read_field_def_UserRemove(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_UserRemove(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_UserRemove_session(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_UserRemove(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_UserRemove_actor(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_UserRemove(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_UserRemove_reason(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_UserRemove(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_UserRemove_ban(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_UserRemove(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'UserRemove'{session = F@_1, actor = F@_2, reason = F@_3, ban = F@_4};
dfp_read_field_def_UserRemove(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_UserRemove(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_UserRemove(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_UserRemove(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_UserRemove(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_UserRemove_session(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_UserRemove_actor(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_UserRemove_reason(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_UserRemove_ban(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UserRemove(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_UserRemove(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_UserRemove(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_UserRemove(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_UserRemove(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_UserRemove(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'UserRemove'{session = F@_1, actor = F@_2, reason = F@_3, ban = F@_4}.

d_field_UserRemove_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_UserRemove_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_UserRemove_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserRemove(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_UserRemove_actor(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_UserRemove_actor(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_UserRemove_actor(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserRemove(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_UserRemove_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_UserRemove_reason(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_UserRemove_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserRemove(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_UserRemove_ban(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_UserRemove_ban(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_UserRemove_ban(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserRemove(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_UserRemove(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_UserRemove(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_UserRemove(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserRemove(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_UserRemove(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_UserRemove(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_UserRemove(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserRemove(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_UserRemove(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserRemove(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_UserRemove(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserRemove(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_UserRemove(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_UserRemove(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_UserState.VolumeAdjustment'(Bin, TrUserData) -> 'dfp_read_field_def_UserState.VolumeAdjustment'(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_UserState.VolumeAdjustment'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_UserState.VolumeAdjustment_listening_channel'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_UserState.VolumeAdjustment'(<<21, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'd_field_UserState.VolumeAdjustment_volume_adjustment'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'dfp_read_field_def_UserState.VolumeAdjustment'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'UserState.VolumeAdjustment'{listening_channel = F@_1, volume_adjustment = F@_2};
'dfp_read_field_def_UserState.VolumeAdjustment'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dg_read_field_def_UserState.VolumeAdjustment'(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

'dg_read_field_def_UserState.VolumeAdjustment'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_UserState.VolumeAdjustment'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'dg_read_field_def_UserState.VolumeAdjustment'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_UserState.VolumeAdjustment_listening_channel'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        21 -> 'd_field_UserState.VolumeAdjustment_volume_adjustment'(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_UserState.VolumeAdjustment'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> 'skip_64_UserState.VolumeAdjustment'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> 'skip_length_delimited_UserState.VolumeAdjustment'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> 'skip_group_UserState.VolumeAdjustment'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> 'skip_32_UserState.VolumeAdjustment'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
'dg_read_field_def_UserState.VolumeAdjustment'(<<>>, 0, 0, _, F@_1, F@_2, _) -> #'UserState.VolumeAdjustment'{listening_channel = F@_1, volume_adjustment = F@_2}.

'd_field_UserState.VolumeAdjustment_listening_channel'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'd_field_UserState.VolumeAdjustment_listening_channel'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'd_field_UserState.VolumeAdjustment_listening_channel'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_UserState.VolumeAdjustment'(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

'd_field_UserState.VolumeAdjustment_volume_adjustment'(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, _, TrUserData) -> 'dfp_read_field_def_UserState.VolumeAdjustment'(Rest, Z1, Z2, F, F@_1, id(infinity, TrUserData), TrUserData);
'd_field_UserState.VolumeAdjustment_volume_adjustment'(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, _, TrUserData) -> 'dfp_read_field_def_UserState.VolumeAdjustment'(Rest, Z1, Z2, F, F@_1, id('-infinity', TrUserData), TrUserData);
'd_field_UserState.VolumeAdjustment_volume_adjustment'(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, _, TrUserData) -> 'dfp_read_field_def_UserState.VolumeAdjustment'(Rest, Z1, Z2, F, F@_1, id(nan, TrUserData), TrUserData);
'd_field_UserState.VolumeAdjustment_volume_adjustment'(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, _, TrUserData) -> 'dfp_read_field_def_UserState.VolumeAdjustment'(Rest, Z1, Z2, F, F@_1, id(Value, TrUserData), TrUserData).

'skip_varint_UserState.VolumeAdjustment'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'skip_varint_UserState.VolumeAdjustment'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
'skip_varint_UserState.VolumeAdjustment'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_UserState.VolumeAdjustment'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_length_delimited_UserState.VolumeAdjustment'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> 'skip_length_delimited_UserState.VolumeAdjustment'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
'skip_length_delimited_UserState.VolumeAdjustment'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_UserState.VolumeAdjustment'(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

'skip_group_UserState.VolumeAdjustment'(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_UserState.VolumeAdjustment'(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

'skip_32_UserState.VolumeAdjustment'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_UserState.VolumeAdjustment'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

'skip_64_UserState.VolumeAdjustment'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> 'dfp_read_field_def_UserState.VolumeAdjustment'(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_UserState(Bin, TrUserData) ->
    dfp_read_field_def_UserState(Bin,
                                 0,
                                 0,
                                 0,
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id([], TrUserData),
                                 id([], TrUserData),
                                 id([], TrUserData),
                                 id([], TrUserData),
                                 TrUserData).

dfp_read_field_def_UserState(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_session(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_actor(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_user_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_mute(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_deaf(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_suppress(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<72, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_self_mute(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<80, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_self_deaf(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<90, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_texture(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<98, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_plugin_context(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<106, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_plugin_identity(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<114, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_comment(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<122, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_hash(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<130, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_comment_hash(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<138, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_texture_hash(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<144, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_priority_speaker(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<152, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_recording(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<162, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_temporary_access_tokens(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<170, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_pfield_UserState_listening_channel_add(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<168, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_listening_channel_add(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<178, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_pfield_UserState_listening_channel_remove(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<176, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_listening_channel_remove(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<186, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    d_field_UserState_listening_volume_adjustment(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dfp_read_field_def_UserState(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, R1, R2, R3, R4, TrUserData) ->
    #'UserState'{session = F@_1, actor = F@_2, name = F@_3, user_id = F@_4, channel_id = F@_5, mute = F@_6, deaf = F@_7, suppress = F@_8, self_mute = F@_9, self_deaf = F@_10, texture = F@_11, plugin_context = F@_12, plugin_identity = F@_13,
                 comment = F@_14, hash = F@_15, comment_hash = F@_16, texture_hash = F@_17, priority_speaker = F@_18, recording = F@_19, temporary_access_tokens = lists_reverse(R1, TrUserData), listening_channel_add = lists_reverse(R2, TrUserData),
                 listening_channel_remove = lists_reverse(R3, TrUserData), listening_volume_adjustment = lists_reverse(R4, TrUserData)};
dfp_read_field_def_UserState(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    dg_read_field_def_UserState(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

dg_read_field_def_UserState(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_UserState(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
dg_read_field_def_UserState(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_UserState_session(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        16 -> d_field_UserState_actor(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        26 -> d_field_UserState_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        32 -> d_field_UserState_user_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        40 -> d_field_UserState_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        48 -> d_field_UserState_mute(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        56 -> d_field_UserState_deaf(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        64 -> d_field_UserState_suppress(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        72 -> d_field_UserState_self_mute(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        80 -> d_field_UserState_self_deaf(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        90 -> d_field_UserState_texture(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        98 -> d_field_UserState_plugin_context(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        106 -> d_field_UserState_plugin_identity(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        114 -> d_field_UserState_comment(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        122 -> d_field_UserState_hash(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        130 -> d_field_UserState_comment_hash(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        138 -> d_field_UserState_texture_hash(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        144 -> d_field_UserState_priority_speaker(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        152 -> d_field_UserState_recording(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        162 -> d_field_UserState_temporary_access_tokens(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        170 -> d_pfield_UserState_listening_channel_add(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        168 -> d_field_UserState_listening_channel_add(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        178 -> d_pfield_UserState_listening_channel_remove(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        176 -> d_field_UserState_listening_channel_remove(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        186 -> d_field_UserState_listening_volume_adjustment(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UserState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
                1 -> skip_64_UserState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
                2 -> skip_length_delimited_UserState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
                3 -> skip_group_UserState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
                5 -> skip_32_UserState(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData)
            end
    end;
dg_read_field_def_UserState(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, R1, R2, R3, R4, TrUserData) ->
    #'UserState'{session = F@_1, actor = F@_2, name = F@_3, user_id = F@_4, channel_id = F@_5, mute = F@_6, deaf = F@_7, suppress = F@_8, self_mute = F@_9, self_deaf = F@_10, texture = F@_11, plugin_context = F@_12, plugin_identity = F@_13,
                 comment = F@_14, hash = F@_15, comment_hash = F@_16, texture_hash = F@_17, priority_speaker = F@_18, recording = F@_19, temporary_access_tokens = lists_reverse(R1, TrUserData), listening_channel_add = lists_reverse(R2, TrUserData),
                 listening_channel_remove = lists_reverse(R3, TrUserData), listening_volume_adjustment = lists_reverse(R4, TrUserData)}.

d_field_UserState_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_actor(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_actor(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_actor(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_user_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_user_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_user_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_mute(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_mute(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_mute(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_deaf(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_deaf(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_deaf(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_suppress(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_suppress(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_suppress(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_self_mute(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_self_mute(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_self_mute(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_self_deaf(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_self_deaf(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_self_deaf(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_texture(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_texture(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_texture(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, NewFValue, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_plugin_context(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_plugin_context(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_plugin_context(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, NewFValue, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_plugin_identity(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_plugin_identity(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_plugin_identity(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewFValue, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_comment(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, NewFValue, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_hash(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_hash(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_hash(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, NewFValue, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_comment_hash(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_comment_hash(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_comment_hash(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, NewFValue, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_texture_hash(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_texture_hash(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_texture_hash(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, NewFValue, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_priority_speaker(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData)
    when N < 57 ->
    d_field_UserState_priority_speaker(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_priority_speaker(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, _, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, NewFValue, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_recording(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    d_field_UserState_recording(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_recording(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, _, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, NewFValue, F@_20, F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_temporary_access_tokens(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData)
    when N < 57 ->
    d_field_UserState_temporary_access_tokens(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_temporary_access_tokens(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, Prev, F@_21, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, cons(NewFValue, Prev, TrUserData), F@_21, F@_22, F@_23, TrUserData).

d_field_UserState_listening_channel_add(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData)
    when N < 57 ->
    d_field_UserState_listening_channel_add(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_listening_channel_add(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, Prev, F@_22, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, cons(NewFValue, Prev, TrUserData), F@_22, F@_23, TrUserData).

d_pfield_UserState_listening_channel_add(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData)
    when N < 57 ->
    d_pfield_UserState_listening_channel_add(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_pfield_UserState_listening_channel_add(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, E, F@_22, F@_23, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_UserState_listening_channel_add(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_UserState(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, NewSeq, F@_22, F@_23, TrUserData).

d_packed_field_UserState_listening_channel_add(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_UserState_listening_channel_add(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_UserState_listening_channel_add(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_UserState_listening_channel_add(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_UserState_listening_channel_add(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_UserState_listening_channel_remove(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData)
    when N < 57 ->
    d_field_UserState_listening_channel_remove(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_listening_channel_remove(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, Prev, F@_23, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, cons(NewFValue, Prev, TrUserData), F@_23, TrUserData).

d_pfield_UserState_listening_channel_remove(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData)
    when N < 57 ->
    d_pfield_UserState_listening_channel_remove(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_pfield_UserState_listening_channel_remove(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, E, F@_23, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_UserState_listening_channel_remove(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_UserState(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, NewSeq, F@_23, TrUserData).

d_packed_field_UserState_listening_channel_remove(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_UserState_listening_channel_remove(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_UserState_listening_channel_remove(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_UserState_listening_channel_remove(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_UserState_listening_channel_remove(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_UserState_listening_volume_adjustment(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData)
    when N < 57 ->
    d_field_UserState_listening_volume_adjustment(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
d_field_UserState_listening_volume_adjustment(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_UserState.VolumeAdjustment'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UserState(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_UserState(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    skip_varint_UserState(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
skip_varint_UserState(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    dfp_read_field_def_UserState(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

skip_length_delimited_UserState(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) when N < 57 ->
    skip_length_delimited_UserState(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData);
skip_length_delimited_UserState(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserState(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

skip_group_UserState(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserState(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

skip_32_UserState(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    dfp_read_field_def_UserState(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

skip_64_UserState(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData) ->
    dfp_read_field_def_UserState(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, TrUserData).

'decode_msg_BanList.BanEntry'(Bin, TrUserData) ->
    'dfp_read_field_def_BanList.BanEntry'(Bin,
                                          0,
                                          0,
                                          0,
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          id(undefined, TrUserData),
                                          TrUserData).

'dfp_read_field_def_BanList.BanEntry'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_BanList.BanEntry_address'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_BanList.BanEntry'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_BanList.BanEntry_mask'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_BanList.BanEntry'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_BanList.BanEntry_name'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_BanList.BanEntry'(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_BanList.BanEntry_hash'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_BanList.BanEntry'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_BanList.BanEntry_reason'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_BanList.BanEntry'(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_BanList.BanEntry_start'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_BanList.BanEntry'(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_BanList.BanEntry_duration'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_BanList.BanEntry'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #'BanList.BanEntry'{address = F@_1, mask = F@_2, name = F@_3, hash = F@_4, reason = F@_5, start = F@_6, duration = F@_7};
'dfp_read_field_def_BanList.BanEntry'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dg_read_field_def_BanList.BanEntry'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'dg_read_field_def_BanList.BanEntry'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_BanList.BanEntry'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dg_read_field_def_BanList.BanEntry'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_BanList.BanEntry_address'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        16 -> 'd_field_BanList.BanEntry_mask'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        26 -> 'd_field_BanList.BanEntry_name'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        34 -> 'd_field_BanList.BanEntry_hash'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> 'd_field_BanList.BanEntry_reason'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        50 -> 'd_field_BanList.BanEntry_start'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> 'd_field_BanList.BanEntry_duration'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_BanList.BanEntry'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> 'skip_64_BanList.BanEntry'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> 'skip_length_delimited_BanList.BanEntry'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> 'skip_group_BanList.BanEntry'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> 'skip_32_BanList.BanEntry'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
'dg_read_field_def_BanList.BanEntry'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #'BanList.BanEntry'{address = F@_1, mask = F@_2, name = F@_3, hash = F@_4, reason = F@_5, start = F@_6, duration = F@_7}.

'd_field_BanList.BanEntry_address'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_BanList.BanEntry_address'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_BanList.BanEntry_address'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    'dfp_read_field_def_BanList.BanEntry'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_BanList.BanEntry_mask'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_BanList.BanEntry_mask'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_BanList.BanEntry_mask'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_BanList.BanEntry'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_BanList.BanEntry_name'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_BanList.BanEntry_name'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_BanList.BanEntry_name'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_BanList.BanEntry'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_BanList.BanEntry_hash'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_BanList.BanEntry_hash'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_BanList.BanEntry_hash'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_BanList.BanEntry'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

'd_field_BanList.BanEntry_reason'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_BanList.BanEntry_reason'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_BanList.BanEntry_reason'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_BanList.BanEntry'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

'd_field_BanList.BanEntry_start'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_BanList.BanEntry_start'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_BanList.BanEntry_start'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_BanList.BanEntry'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

'd_field_BanList.BanEntry_duration'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_BanList.BanEntry_duration'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_BanList.BanEntry_duration'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_BanList.BanEntry'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

'skip_varint_BanList.BanEntry'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'skip_varint_BanList.BanEntry'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_varint_BanList.BanEntry'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_BanList.BanEntry'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_length_delimited_BanList.BanEntry'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'skip_length_delimited_BanList.BanEntry'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_length_delimited_BanList.BanEntry'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_BanList.BanEntry'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_group_BanList.BanEntry'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_BanList.BanEntry'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_32_BanList.BanEntry'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_BanList.BanEntry'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_64_BanList.BanEntry'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_BanList.BanEntry'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_BanList(Bin, TrUserData) -> dfp_read_field_def_BanList(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_BanList(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_BanList_bans(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_BanList(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_BanList_query(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_BanList(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #'BanList'{bans = lists_reverse(R1, TrUserData), query = F@_2};
dfp_read_field_def_BanList(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_BanList(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_BanList(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_BanList(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_BanList(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_BanList_bans(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_BanList_query(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_BanList(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_BanList(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_BanList(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_BanList(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_BanList(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_BanList(<<>>, 0, 0, _, R1, F@_2, TrUserData) -> #'BanList'{bans = lists_reverse(R1, TrUserData), query = F@_2}.

d_field_BanList_bans(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_BanList_bans(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_BanList_bans(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_BanList.BanEntry'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_BanList(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_BanList_query(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_BanList_query(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_BanList_query(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_BanList(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_BanList(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_BanList(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_BanList(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BanList(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_BanList(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_BanList(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_BanList(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_BanList(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_BanList(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_BanList(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_BanList(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BanList(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_BanList(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_BanList(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_TextMessage(Bin, TrUserData) -> dfp_read_field_def_TextMessage(Bin, 0, 0, 0, id(undefined, TrUserData), id([], TrUserData), id([], TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_TextMessage(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_TextMessage_actor(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TextMessage(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_pfield_TextMessage_session(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TextMessage(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_TextMessage_session(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TextMessage(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_pfield_TextMessage_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TextMessage(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_TextMessage_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TextMessage(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_pfield_TextMessage_tree_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TextMessage(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_TextMessage_tree_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TextMessage(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_TextMessage_message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_TextMessage(<<>>, 0, 0, _, F@_1, R1, R2, R3, F@_5, TrUserData) ->
    #'TextMessage'{actor = F@_1, session = lists_reverse(R1, TrUserData), channel_id = lists_reverse(R2, TrUserData), tree_id = lists_reverse(R3, TrUserData), message = F@_5};
dfp_read_field_def_TextMessage(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_TextMessage(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_TextMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_TextMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_TextMessage(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_TextMessage_actor(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_pfield_TextMessage_session(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> d_field_TextMessage_session(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_pfield_TextMessage_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        24 -> d_field_TextMessage_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_pfield_TextMessage_tree_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> d_field_TextMessage_tree_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_TextMessage_message(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TextMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_TextMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_TextMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_TextMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_TextMessage(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_TextMessage(<<>>, 0, 0, _, F@_1, R1, R2, R3, F@_5, TrUserData) ->
    #'TextMessage'{actor = F@_1, session = lists_reverse(R1, TrUserData), channel_id = lists_reverse(R2, TrUserData), tree_id = lists_reverse(R3, TrUserData), message = F@_5}.

d_field_TextMessage_actor(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_TextMessage_actor(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TextMessage_actor(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_TextMessage(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_TextMessage_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_TextMessage_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TextMessage_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_TextMessage(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, F@_4, F@_5, TrUserData).

d_pfield_TextMessage_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_pfield_TextMessage_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_pfield_TextMessage_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, F@_3, F@_4, F@_5, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_TextMessage_session(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_TextMessage(Rest2, 0, 0, F, F@_1, NewSeq, F@_3, F@_4, F@_5, TrUserData).

d_packed_field_TextMessage_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_TextMessage_session(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_TextMessage_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_TextMessage_session(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_TextMessage_session(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_TextMessage_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_TextMessage_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TextMessage_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_TextMessage(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, F@_5, TrUserData).

d_pfield_TextMessage_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_pfield_TextMessage_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_pfield_TextMessage_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, E, F@_4, F@_5, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_TextMessage_channel_id(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_TextMessage(Rest2, 0, 0, F, F@_1, F@_2, NewSeq, F@_4, F@_5, TrUserData).

d_packed_field_TextMessage_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_TextMessage_channel_id(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_TextMessage_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_TextMessage_channel_id(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_TextMessage_channel_id(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_TextMessage_tree_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_TextMessage_tree_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TextMessage_tree_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_TextMessage(RestF, 0, 0, F, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, TrUserData).

d_pfield_TextMessage_tree_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_pfield_TextMessage_tree_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_pfield_TextMessage_tree_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, E, F@_5, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_TextMessage_tree_id(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_TextMessage(Rest2, 0, 0, F, F@_1, F@_2, F@_3, NewSeq, F@_5, TrUserData).

d_packed_field_TextMessage_tree_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_TextMessage_tree_id(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_TextMessage_tree_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_TextMessage_tree_id(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_TextMessage_tree_id(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_TextMessage_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_TextMessage_message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_TextMessage_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TextMessage(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_TextMessage(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_TextMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_TextMessage(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_TextMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_TextMessage(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_TextMessage(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_TextMessage(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TextMessage(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_TextMessage(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TextMessage(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_TextMessage(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_TextMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_TextMessage(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_TextMessage(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_PermissionDenied(Bin, TrUserData) ->
    dfp_read_field_def_PermissionDenied(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PermissionDenied(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_PermissionDenied_permission(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PermissionDenied(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_PermissionDenied_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PermissionDenied(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_PermissionDenied_session(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PermissionDenied(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_PermissionDenied_reason(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PermissionDenied(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_PermissionDenied_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PermissionDenied(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_PermissionDenied_name(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_PermissionDenied(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #'PermissionDenied'{permission = F@_1, channel_id = F@_2, session = F@_3, reason = F@_4, type = F@_5, name = F@_6};
dfp_read_field_def_PermissionDenied(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_PermissionDenied(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_PermissionDenied(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_PermissionDenied(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_PermissionDenied(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_PermissionDenied_permission(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        16 -> d_field_PermissionDenied_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        24 -> d_field_PermissionDenied_session(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        34 -> d_field_PermissionDenied_reason(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        40 -> d_field_PermissionDenied_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        50 -> d_field_PermissionDenied_name(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PermissionDenied(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_PermissionDenied(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_PermissionDenied(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_PermissionDenied(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_PermissionDenied(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_PermissionDenied(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) -> #'PermissionDenied'{permission = F@_1, channel_id = F@_2, session = F@_3, reason = F@_4, type = F@_5, name = F@_6}.

d_field_PermissionDenied_permission(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_PermissionDenied_permission(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PermissionDenied_permission(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_PermissionDenied(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_PermissionDenied_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_PermissionDenied_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PermissionDenied_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_PermissionDenied(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_PermissionDenied_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_PermissionDenied_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PermissionDenied_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_PermissionDenied(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_PermissionDenied_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_PermissionDenied_reason(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PermissionDenied_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_PermissionDenied(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_PermissionDenied_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_PermissionDenied_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PermissionDenied_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_PermissionDenied.DenyType'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_PermissionDenied(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_PermissionDenied_name(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 -> d_field_PermissionDenied_name(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_PermissionDenied_name(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_PermissionDenied(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_PermissionDenied(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_PermissionDenied(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_PermissionDenied(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_PermissionDenied(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_PermissionDenied(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_PermissionDenied(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_PermissionDenied(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PermissionDenied(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_PermissionDenied(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PermissionDenied(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_PermissionDenied(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_PermissionDenied(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_PermissionDenied(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_PermissionDenied(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'decode_msg_ACL.ChanGroup'(Bin, TrUserData) ->
    'dfp_read_field_def_ACL.ChanGroup'(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

'dfp_read_field_def_ACL.ChanGroup'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanGroup_name'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanGroup_inherited'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanGroup_inherit'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanGroup_inheritable'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_pfield_ACL.ChanGroup_add'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanGroup_add'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_pfield_ACL.ChanGroup_remove'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanGroup_remove'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<58, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_pfield_ACL.ChanGroup_inherited_members'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanGroup_inherited_members'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanGroup'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, R2, R3, TrUserData) ->
    #'ACL.ChanGroup'{name = F@_1, inherited = F@_2, inherit = F@_3, inheritable = F@_4, add = lists_reverse(R1, TrUserData), remove = lists_reverse(R2, TrUserData), inherited_members = lists_reverse(R3, TrUserData)};
'dfp_read_field_def_ACL.ChanGroup'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dg_read_field_def_ACL.ChanGroup'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'dg_read_field_def_ACL.ChanGroup'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_ACL.ChanGroup'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dg_read_field_def_ACL.ChanGroup'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_field_ACL.ChanGroup_name'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        16 -> 'd_field_ACL.ChanGroup_inherited'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> 'd_field_ACL.ChanGroup_inherit'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        32 -> 'd_field_ACL.ChanGroup_inheritable'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> 'd_pfield_ACL.ChanGroup_add'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        40 -> 'd_field_ACL.ChanGroup_add'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        50 -> 'd_pfield_ACL.ChanGroup_remove'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> 'd_field_ACL.ChanGroup_remove'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        58 -> 'd_pfield_ACL.ChanGroup_inherited_members'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> 'd_field_ACL.ChanGroup_inherited_members'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_ACL.ChanGroup'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> 'skip_64_ACL.ChanGroup'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> 'skip_length_delimited_ACL.ChanGroup'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> 'skip_group_ACL.ChanGroup'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> 'skip_32_ACL.ChanGroup'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
'dg_read_field_def_ACL.ChanGroup'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, R1, R2, R3, TrUserData) ->
    #'ACL.ChanGroup'{name = F@_1, inherited = F@_2, inherit = F@_3, inheritable = F@_4, add = lists_reverse(R1, TrUserData), remove = lists_reverse(R2, TrUserData), inherited_members = lists_reverse(R3, TrUserData)}.

'd_field_ACL.ChanGroup_name'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> 'd_field_ACL.ChanGroup_name'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanGroup_name'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_ACL.ChanGroup'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanGroup_inherited'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanGroup_inherited'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanGroup_inherited'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanGroup'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanGroup_inherit'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanGroup_inherit'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanGroup_inherit'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanGroup'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanGroup_inheritable'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanGroup_inheritable'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanGroup_inheritable'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanGroup'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanGroup_add'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> 'd_field_ACL.ChanGroup_add'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanGroup_add'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanGroup'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, cons(NewFValue, Prev, TrUserData), F@_6, F@_7, TrUserData).

'd_pfield_ACL.ChanGroup_add'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> 'd_pfield_ACL.ChanGroup_add'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_pfield_ACL.ChanGroup_add'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, E, F@_6, F@_7, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_ACL.ChanGroup_add'(PackedBytes, 0, 0, F, E, TrUserData),
    'dfp_read_field_def_ACL.ChanGroup'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewSeq, F@_6, F@_7, TrUserData).

'd_packed_field_ACL.ChanGroup_add'(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> 'd_packed_field_ACL.ChanGroup_add'(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
'd_packed_field_ACL.ChanGroup_add'(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'd_packed_field_ACL.ChanGroup_add'(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
'd_packed_field_ACL.ChanGroup_add'(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

'd_field_ACL.ChanGroup_remove'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanGroup_remove'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanGroup_remove'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanGroup'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, cons(NewFValue, Prev, TrUserData), F@_7, TrUserData).

'd_pfield_ACL.ChanGroup_remove'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_pfield_ACL.ChanGroup_remove'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_pfield_ACL.ChanGroup_remove'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, E, F@_7, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_ACL.ChanGroup_remove'(PackedBytes, 0, 0, F, E, TrUserData),
    'dfp_read_field_def_ACL.ChanGroup'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewSeq, F@_7, TrUserData).

'd_packed_field_ACL.ChanGroup_remove'(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> 'd_packed_field_ACL.ChanGroup_remove'(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
'd_packed_field_ACL.ChanGroup_remove'(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'd_packed_field_ACL.ChanGroup_remove'(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
'd_packed_field_ACL.ChanGroup_remove'(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

'd_field_ACL.ChanGroup_inherited_members'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanGroup_inherited_members'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanGroup_inherited_members'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanGroup'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, cons(NewFValue, Prev, TrUserData), TrUserData).

'd_pfield_ACL.ChanGroup_inherited_members'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_pfield_ACL.ChanGroup_inherited_members'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_pfield_ACL.ChanGroup_inherited_members'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_ACL.ChanGroup_inherited_members'(PackedBytes, 0, 0, F, E, TrUserData),
    'dfp_read_field_def_ACL.ChanGroup'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewSeq, TrUserData).

'd_packed_field_ACL.ChanGroup_inherited_members'(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> 'd_packed_field_ACL.ChanGroup_inherited_members'(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
'd_packed_field_ACL.ChanGroup_inherited_members'(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'd_packed_field_ACL.ChanGroup_inherited_members'(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
'd_packed_field_ACL.ChanGroup_inherited_members'(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

'skip_varint_ACL.ChanGroup'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'skip_varint_ACL.ChanGroup'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_varint_ACL.ChanGroup'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_ACL.ChanGroup'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_length_delimited_ACL.ChanGroup'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'skip_length_delimited_ACL.ChanGroup'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_length_delimited_ACL.ChanGroup'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ACL.ChanGroup'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_group_ACL.ChanGroup'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ACL.ChanGroup'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_32_ACL.ChanGroup'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_ACL.ChanGroup'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_64_ACL.ChanGroup'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_ACL.ChanGroup'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'decode_msg_ACL.ChanACL'(Bin, TrUserData) ->
    'dfp_read_field_def_ACL.ChanACL'(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_ACL.ChanACL'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanACL_apply_here'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanACL'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanACL_apply_subs'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanACL'(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanACL_inherited'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanACL'(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanACL_user_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanACL'(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanACL_group'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanACL'(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanACL_grant'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanACL'(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'd_field_ACL.ChanACL_deny'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ACL.ChanACL'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #'ACL.ChanACL'{apply_here = F@_1, apply_subs = F@_2, inherited = F@_3, user_id = F@_4, group = F@_5, grant = F@_6, deny = F@_7};
'dfp_read_field_def_ACL.ChanACL'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dg_read_field_def_ACL.ChanACL'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'dg_read_field_def_ACL.ChanACL'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    'dg_read_field_def_ACL.ChanACL'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'dg_read_field_def_ACL.ChanACL'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_ACL.ChanACL_apply_here'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        16 -> 'd_field_ACL.ChanACL_apply_subs'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> 'd_field_ACL.ChanACL_inherited'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        32 -> 'd_field_ACL.ChanACL_user_id'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        42 -> 'd_field_ACL.ChanACL_group'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> 'd_field_ACL.ChanACL_grant'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> 'd_field_ACL.ChanACL_deny'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_ACL.ChanACL'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> 'skip_64_ACL.ChanACL'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> 'skip_length_delimited_ACL.ChanACL'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> 'skip_group_ACL.ChanACL'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> 'skip_32_ACL.ChanACL'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
'dg_read_field_def_ACL.ChanACL'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) -> #'ACL.ChanACL'{apply_here = F@_1, apply_subs = F@_2, inherited = F@_3, user_id = F@_4, group = F@_5, grant = F@_6, deny = F@_7}.

'd_field_ACL.ChanACL_apply_here'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanACL_apply_here'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanACL_apply_here'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanACL'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanACL_apply_subs'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanACL_apply_subs'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanACL_apply_subs'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanACL'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanACL_inherited'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanACL_inherited'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanACL_inherited'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanACL'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanACL_user_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'd_field_ACL.ChanACL_user_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanACL_user_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanACL'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanACL_group'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> 'd_field_ACL.ChanACL_group'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanACL_group'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_ACL.ChanACL'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

'd_field_ACL.ChanACL_grant'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> 'd_field_ACL.ChanACL_grant'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanACL_grant'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanACL'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

'd_field_ACL.ChanACL_deny'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 -> 'd_field_ACL.ChanACL_deny'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ACL.ChanACL_deny'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_ACL.ChanACL'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

'skip_varint_ACL.ChanACL'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'skip_varint_ACL.ChanACL'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_varint_ACL.ChanACL'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_ACL.ChanACL'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_length_delimited_ACL.ChanACL'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    'skip_length_delimited_ACL.ChanACL'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
'skip_length_delimited_ACL.ChanACL'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ACL.ChanACL'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_group_ACL.ChanACL'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ACL.ChanACL'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_32_ACL.ChanACL'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_ACL.ChanACL'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'skip_64_ACL.ChanACL'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> 'dfp_read_field_def_ACL.ChanACL'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_ACL(Bin, TrUserData) -> dfp_read_field_def_ACL(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id([], TrUserData), id([], TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ACL(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_ACL_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ACL(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_ACL_inherit_acls(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ACL(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_ACL_groups(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ACL(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_ACL_acls(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ACL(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_ACL_query(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_ACL(<<>>, 0, 0, _, F@_1, F@_2, R1, R2, F@_5, TrUserData) -> #'ACL'{channel_id = F@_1, inherit_acls = F@_2, groups = lists_reverse(R1, TrUserData), acls = lists_reverse(R2, TrUserData), query = F@_5};
dfp_read_field_def_ACL(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_ACL(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_ACL(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_ACL(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_ACL(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ACL_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> d_field_ACL_inherit_acls(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_ACL_groups(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_ACL_acls(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_ACL_query(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ACL(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_ACL(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_ACL(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_ACL(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_ACL(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_ACL(<<>>, 0, 0, _, F@_1, F@_2, R1, R2, F@_5, TrUserData) -> #'ACL'{channel_id = F@_1, inherit_acls = F@_2, groups = lists_reverse(R1, TrUserData), acls = lists_reverse(R2, TrUserData), query = F@_5}.

d_field_ACL_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_ACL_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_ACL_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ACL(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_ACL_inherit_acls(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_ACL_inherit_acls(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_ACL_inherit_acls(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ACL(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_ACL_groups(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_ACL_groups(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_ACL_groups(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_ACL.ChanGroup'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ACL(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, F@_5, TrUserData).

d_field_ACL_acls(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_ACL_acls(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_ACL_acls(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_ACL.ChanACL'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_ACL(RestF, 0, 0, F, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), F@_5, TrUserData).

d_field_ACL_query(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_ACL_query(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_ACL_query(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ACL(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_ACL(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_ACL(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_ACL(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_ACL(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_ACL(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_ACL(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_ACL(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ACL(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_ACL(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ACL(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_ACL(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_ACL(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_ACL(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_ACL(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_QueryUsers(Bin, TrUserData) -> dfp_read_field_def_QueryUsers(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_QueryUsers(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_pfield_QueryUsers_ids(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_QueryUsers(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_QueryUsers_ids(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_QueryUsers(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_QueryUsers_names(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_QueryUsers(<<>>, 0, 0, _, R1, R2, TrUserData) -> #'QueryUsers'{ids = lists_reverse(R1, TrUserData), names = lists_reverse(R2, TrUserData)};
dfp_read_field_def_QueryUsers(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_QueryUsers(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_QueryUsers(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_QueryUsers(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_QueryUsers(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_pfield_QueryUsers_ids(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        8 -> d_field_QueryUsers_ids(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_QueryUsers_names(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_QueryUsers(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_QueryUsers(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_QueryUsers(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_QueryUsers(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_QueryUsers(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_QueryUsers(<<>>, 0, 0, _, R1, R2, TrUserData) -> #'QueryUsers'{ids = lists_reverse(R1, TrUserData), names = lists_reverse(R2, TrUserData)}.

d_field_QueryUsers_ids(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_QueryUsers_ids(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_QueryUsers_ids(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_QueryUsers(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_pfield_QueryUsers_ids(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_pfield_QueryUsers_ids(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_pfield_QueryUsers_ids(<<0:1, X:7, Rest/binary>>, N, Acc, F, E, F@_2, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_QueryUsers_ids(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_QueryUsers(Rest2, 0, 0, F, NewSeq, F@_2, TrUserData).

d_packed_field_QueryUsers_ids(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_QueryUsers_ids(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_QueryUsers_ids(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_QueryUsers_ids(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_QueryUsers_ids(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_QueryUsers_names(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_QueryUsers_names(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_QueryUsers_names(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_QueryUsers(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_QueryUsers(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_QueryUsers(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_QueryUsers(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_QueryUsers(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_QueryUsers(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_QueryUsers(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_QueryUsers(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_QueryUsers(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_QueryUsers(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_QueryUsers(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_QueryUsers(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_QueryUsers(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_QueryUsers(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_QueryUsers(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_CryptSetup(Bin, TrUserData) -> dfp_read_field_def_CryptSetup(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_CryptSetup(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_CryptSetup_key(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_CryptSetup(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_CryptSetup_client_nonce(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_CryptSetup(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_CryptSetup_server_nonce(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_CryptSetup(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'CryptSetup'{key = F@_1, client_nonce = F@_2, server_nonce = F@_3};
dfp_read_field_def_CryptSetup(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_CryptSetup(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_CryptSetup(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_CryptSetup(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_CryptSetup(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_CryptSetup_key(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_CryptSetup_client_nonce(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_CryptSetup_server_nonce(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CryptSetup(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_CryptSetup(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_CryptSetup(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_CryptSetup(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_CryptSetup(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_CryptSetup(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'CryptSetup'{key = F@_1, client_nonce = F@_2, server_nonce = F@_3}.

d_field_CryptSetup_key(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_CryptSetup_key(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_CryptSetup_key(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_CryptSetup(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_CryptSetup_client_nonce(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_CryptSetup_client_nonce(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_CryptSetup_client_nonce(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_CryptSetup(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_CryptSetup_server_nonce(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_CryptSetup_server_nonce(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_CryptSetup_server_nonce(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_CryptSetup(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_CryptSetup(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_CryptSetup(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_CryptSetup(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_CryptSetup(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_CryptSetup(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_CryptSetup(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_CryptSetup(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CryptSetup(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_CryptSetup(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CryptSetup(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_CryptSetup(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_CryptSetup(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_CryptSetup(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_CryptSetup(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_ContextActionModify(Bin, TrUserData) -> dfp_read_field_def_ContextActionModify(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ContextActionModify(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ContextActionModify_action(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ContextActionModify(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ContextActionModify_text(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ContextActionModify(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ContextActionModify_context(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ContextActionModify(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ContextActionModify_operation(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ContextActionModify(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'ContextActionModify'{action = F@_1, text = F@_2, context = F@_3, operation = F@_4};
dfp_read_field_def_ContextActionModify(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_ContextActionModify(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ContextActionModify(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_ContextActionModify(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_ContextActionModify(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ContextActionModify_action(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_field_ContextActionModify_text(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_ContextActionModify_context(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_ContextActionModify_operation(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ContextActionModify(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_ContextActionModify(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_ContextActionModify(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_ContextActionModify(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_ContextActionModify(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_ContextActionModify(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'ContextActionModify'{action = F@_1, text = F@_2, context = F@_3, operation = F@_4}.

d_field_ContextActionModify_action(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ContextActionModify_action(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ContextActionModify_action(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ContextActionModify(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_ContextActionModify_text(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ContextActionModify_text(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ContextActionModify_text(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ContextActionModify(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_ContextActionModify_context(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ContextActionModify_context(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ContextActionModify_context(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ContextActionModify(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_ContextActionModify_operation(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ContextActionModify_operation(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ContextActionModify_operation(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_ContextActionModify.Operation'(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_ContextActionModify(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_ContextActionModify(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_ContextActionModify(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_ContextActionModify(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ContextActionModify(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ContextActionModify(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_ContextActionModify(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_ContextActionModify(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ContextActionModify(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_ContextActionModify(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ContextActionModify(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_ContextActionModify(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ContextActionModify(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_ContextActionModify(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ContextActionModify(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_ContextAction(Bin, TrUserData) -> dfp_read_field_def_ContextAction(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ContextAction(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_ContextAction_session(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ContextAction(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_ContextAction_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ContextAction(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_ContextAction_action(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_ContextAction(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'ContextAction'{session = F@_1, channel_id = F@_2, action = F@_3};
dfp_read_field_def_ContextAction(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_ContextAction(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_ContextAction(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_ContextAction(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_ContextAction(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ContextAction_session(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_ContextAction_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_ContextAction_action(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ContextAction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_ContextAction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_ContextAction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_ContextAction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_ContextAction(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_ContextAction(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'ContextAction'{session = F@_1, channel_id = F@_2, action = F@_3}.

d_field_ContextAction_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ContextAction_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_ContextAction_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ContextAction(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_ContextAction_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ContextAction_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_ContextAction_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ContextAction(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_ContextAction_action(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_ContextAction_action(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_ContextAction_action(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ContextAction(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_ContextAction(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_ContextAction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_ContextAction(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ContextAction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_ContextAction(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_ContextAction(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_ContextAction(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ContextAction(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_ContextAction(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ContextAction(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_ContextAction(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ContextAction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_ContextAction(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_ContextAction(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

'decode_msg_UserList.User'(Bin, TrUserData) -> 'dfp_read_field_def_UserList.User'(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_UserList.User'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_UserList.User_user_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_UserList.User'(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_UserList.User_name'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_UserList.User'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_UserList.User_last_seen'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_UserList.User'(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_UserList.User_last_channel'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_UserList.User'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'UserList.User'{user_id = F@_1, name = F@_2, last_seen = F@_3, last_channel = F@_4};
'dfp_read_field_def_UserList.User'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dg_read_field_def_UserList.User'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_UserList.User'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_UserList.User'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dg_read_field_def_UserList.User'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_UserList.User_user_id'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> 'd_field_UserList.User_name'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> 'd_field_UserList.User_last_seen'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> 'd_field_UserList.User_last_channel'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_UserList.User'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> 'skip_64_UserList.User'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> 'skip_length_delimited_UserList.User'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> 'skip_group_UserList.User'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> 'skip_32_UserList.User'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
'dg_read_field_def_UserList.User'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'UserList.User'{user_id = F@_1, name = F@_2, last_seen = F@_3, last_channel = F@_4}.

'd_field_UserList.User_user_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_UserList.User_user_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_UserList.User_user_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_UserList.User'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

'd_field_UserList.User_name'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_UserList.User_name'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_UserList.User_name'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_UserList.User'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

'd_field_UserList.User_last_seen'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_UserList.User_last_seen'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_UserList.User_last_seen'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_UserList.User'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

'd_field_UserList.User_last_channel'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_UserList.User_last_channel'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_UserList.User_last_channel'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_UserList.User'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

'skip_varint_UserList.User'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'skip_varint_UserList.User'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_UserList.User'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_UserList.User'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_UserList.User'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'skip_length_delimited_UserList.User'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_UserList.User'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_UserList.User'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_UserList.User'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_UserList.User'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_32_UserList.User'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_UserList.User'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_UserList.User'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_UserList.User'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_UserList(Bin, TrUserData) -> dfp_read_field_def_UserList(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_UserList(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_UserList_users(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_UserList(<<>>, 0, 0, _, R1, TrUserData) -> #'UserList'{users = lists_reverse(R1, TrUserData)};
dfp_read_field_def_UserList(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_UserList(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_UserList(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_UserList(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_UserList(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_UserList_users(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UserList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_UserList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_UserList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_UserList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_UserList(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_UserList(<<>>, 0, 0, _, R1, TrUserData) -> #'UserList'{users = lists_reverse(R1, TrUserData)}.

d_field_UserList_users(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_UserList_users(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_UserList_users(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_UserList.User'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UserList(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_UserList(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_UserList(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_UserList(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UserList(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_UserList(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_UserList(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_UserList(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserList(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_UserList(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserList(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_UserList(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UserList(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_UserList(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_UserList(Rest, Z1, Z2, F, F@_1, TrUserData).

'decode_msg_VoiceTarget.Target'(Bin, TrUserData) -> 'dfp_read_field_def_VoiceTarget.Target'(Bin, 0, 0, 0, id([], TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_VoiceTarget.Target'(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_pfield_VoiceTarget.Target_session'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_VoiceTarget.Target'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_VoiceTarget.Target_session'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_VoiceTarget.Target'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_VoiceTarget.Target_channel_id'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_VoiceTarget.Target'(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_VoiceTarget.Target_group'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_VoiceTarget.Target'(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_VoiceTarget.Target_links'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_VoiceTarget.Target'(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'd_field_VoiceTarget.Target_children'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dfp_read_field_def_VoiceTarget.Target'(<<>>, 0, 0, _, R1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> #'VoiceTarget.Target'{session = lists_reverse(R1, TrUserData), channel_id = F@_2, group = F@_3, links = F@_4, children = F@_5};
'dfp_read_field_def_VoiceTarget.Target'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dg_read_field_def_VoiceTarget.Target'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'dg_read_field_def_VoiceTarget.Target'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_VoiceTarget.Target'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'dg_read_field_def_VoiceTarget.Target'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> 'd_pfield_VoiceTarget.Target_session'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        8 -> 'd_field_VoiceTarget.Target_session'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> 'd_field_VoiceTarget.Target_channel_id'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> 'd_field_VoiceTarget.Target_group'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> 'd_field_VoiceTarget.Target_links'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> 'd_field_VoiceTarget.Target_children'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_VoiceTarget.Target'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> 'skip_64_VoiceTarget.Target'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> 'skip_length_delimited_VoiceTarget.Target'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> 'skip_group_VoiceTarget.Target'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> 'skip_32_VoiceTarget.Target'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
'dg_read_field_def_VoiceTarget.Target'(<<>>, 0, 0, _, R1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> #'VoiceTarget.Target'{session = lists_reverse(R1, TrUserData), channel_id = F@_2, group = F@_3, links = F@_4, children = F@_5}.

'd_field_VoiceTarget.Target_session'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_VoiceTarget.Target_session'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_VoiceTarget.Target_session'(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_VoiceTarget.Target'(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_pfield_VoiceTarget.Target_session'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_pfield_VoiceTarget.Target_session'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_pfield_VoiceTarget.Target_session'(<<0:1, X:7, Rest/binary>>, N, Acc, F, E, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_VoiceTarget.Target_session'(PackedBytes, 0, 0, F, E, TrUserData),
    'dfp_read_field_def_VoiceTarget.Target'(Rest2, 0, 0, F, NewSeq, F@_2, F@_3, F@_4, F@_5, TrUserData).

'd_packed_field_VoiceTarget.Target_session'(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> 'd_packed_field_VoiceTarget.Target_session'(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
'd_packed_field_VoiceTarget.Target_session'(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'd_packed_field_VoiceTarget.Target_session'(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
'd_packed_field_VoiceTarget.Target_session'(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

'd_field_VoiceTarget.Target_channel_id'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_VoiceTarget.Target_channel_id'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_VoiceTarget.Target_channel_id'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_VoiceTarget.Target'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

'd_field_VoiceTarget.Target_group'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_VoiceTarget.Target_group'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_VoiceTarget.Target_group'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    'dfp_read_field_def_VoiceTarget.Target'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

'd_field_VoiceTarget.Target_links'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_VoiceTarget.Target_links'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_VoiceTarget.Target_links'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_VoiceTarget.Target'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

'd_field_VoiceTarget.Target_children'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> 'd_field_VoiceTarget.Target_children'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'd_field_VoiceTarget.Target_children'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    'dfp_read_field_def_VoiceTarget.Target'(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

'skip_varint_VoiceTarget.Target'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'skip_varint_VoiceTarget.Target'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_VoiceTarget.Target'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_VoiceTarget.Target'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_length_delimited_VoiceTarget.Target'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    'skip_length_delimited_VoiceTarget.Target'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_length_delimited_VoiceTarget.Target'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_VoiceTarget.Target'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_group_VoiceTarget.Target'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_VoiceTarget.Target'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_32_VoiceTarget.Target'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_VoiceTarget.Target'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

'skip_64_VoiceTarget.Target'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> 'dfp_read_field_def_VoiceTarget.Target'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_VoiceTarget(Bin, TrUserData) -> dfp_read_field_def_VoiceTarget(Bin, 0, 0, 0, id(undefined, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_VoiceTarget(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_VoiceTarget_id(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_VoiceTarget(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_VoiceTarget_targets(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_VoiceTarget(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #'VoiceTarget'{id = F@_1, targets = lists_reverse(R1, TrUserData)};
dfp_read_field_def_VoiceTarget(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_VoiceTarget(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_VoiceTarget(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_VoiceTarget(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_VoiceTarget(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_VoiceTarget_id(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_VoiceTarget_targets(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_VoiceTarget(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_VoiceTarget(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_VoiceTarget(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_VoiceTarget(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_VoiceTarget(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_VoiceTarget(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #'VoiceTarget'{id = F@_1, targets = lists_reverse(R1, TrUserData)}.

d_field_VoiceTarget_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_VoiceTarget_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_VoiceTarget_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_VoiceTarget(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_VoiceTarget_targets(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_VoiceTarget_targets(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_VoiceTarget_targets(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_VoiceTarget.Target'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_VoiceTarget(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_VoiceTarget(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_VoiceTarget(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_VoiceTarget(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_VoiceTarget(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_VoiceTarget(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_VoiceTarget(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_VoiceTarget(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VoiceTarget(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_VoiceTarget(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_VoiceTarget(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_VoiceTarget(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_VoiceTarget(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_VoiceTarget(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_VoiceTarget(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_PermissionQuery(Bin, TrUserData) -> dfp_read_field_def_PermissionQuery(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PermissionQuery(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PermissionQuery_channel_id(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PermissionQuery(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PermissionQuery_permissions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PermissionQuery(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_PermissionQuery_flush(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_PermissionQuery(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'PermissionQuery'{channel_id = F@_1, permissions = F@_2, flush = F@_3};
dfp_read_field_def_PermissionQuery(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_PermissionQuery(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_PermissionQuery(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_PermissionQuery(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_PermissionQuery(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_PermissionQuery_channel_id(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_PermissionQuery_permissions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_PermissionQuery_flush(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PermissionQuery(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_PermissionQuery(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_PermissionQuery(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_PermissionQuery(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_PermissionQuery(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_PermissionQuery(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #'PermissionQuery'{channel_id = F@_1, permissions = F@_2, flush = F@_3}.

d_field_PermissionQuery_channel_id(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PermissionQuery_channel_id(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PermissionQuery_channel_id(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_PermissionQuery(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_PermissionQuery_permissions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PermissionQuery_permissions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PermissionQuery_permissions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_PermissionQuery(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_PermissionQuery_flush(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_PermissionQuery_flush(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_PermissionQuery_flush(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_PermissionQuery(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_PermissionQuery(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_PermissionQuery(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_PermissionQuery(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PermissionQuery(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_PermissionQuery(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_PermissionQuery(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_PermissionQuery(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PermissionQuery(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_PermissionQuery(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PermissionQuery(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_PermissionQuery(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PermissionQuery(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_PermissionQuery(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_PermissionQuery(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_CodecVersion(Bin, TrUserData) -> dfp_read_field_def_CodecVersion(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_CodecVersion(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_CodecVersion_alpha(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CodecVersion(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_CodecVersion_beta(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CodecVersion(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_CodecVersion_prefer_alpha(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CodecVersion(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_CodecVersion_opus(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CodecVersion(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'CodecVersion'{alpha = F@_1, beta = F@_2, prefer_alpha = F@_3, opus = F@_4};
dfp_read_field_def_CodecVersion(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_CodecVersion(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_CodecVersion(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_CodecVersion(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_CodecVersion(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_CodecVersion_alpha(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_CodecVersion_beta(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_CodecVersion_prefer_alpha(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_CodecVersion_opus(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_CodecVersion(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_CodecVersion(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_CodecVersion(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_CodecVersion(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_CodecVersion(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_CodecVersion(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'CodecVersion'{alpha = F@_1, beta = F@_2, prefer_alpha = F@_3, opus = F@_4}.

d_field_CodecVersion_alpha(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_CodecVersion_alpha(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_CodecVersion_alpha(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_CodecVersion(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_CodecVersion_beta(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_CodecVersion_beta(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_CodecVersion_beta(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_CodecVersion(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_CodecVersion_prefer_alpha(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_CodecVersion_prefer_alpha(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_CodecVersion_prefer_alpha(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_CodecVersion(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_CodecVersion_opus(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_CodecVersion_opus(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_CodecVersion_opus(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_CodecVersion(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_CodecVersion(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_CodecVersion(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_CodecVersion(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_CodecVersion(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_CodecVersion(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_CodecVersion(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_CodecVersion(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CodecVersion(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_CodecVersion(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CodecVersion(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_CodecVersion(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_CodecVersion(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_CodecVersion(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_CodecVersion(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'decode_msg_UserStats.Stats'(Bin, TrUserData) -> 'dfp_read_field_def_UserStats.Stats'(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_UserStats.Stats'(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_UserStats.Stats_good'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_UserStats.Stats'(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_UserStats.Stats_late'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_UserStats.Stats'(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_UserStats.Stats_lost'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_UserStats.Stats'(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'd_field_UserStats.Stats_resync'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_UserStats.Stats'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'UserStats.Stats'{good = F@_1, late = F@_2, lost = F@_3, resync = F@_4};
'dfp_read_field_def_UserStats.Stats'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dg_read_field_def_UserStats.Stats'(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'dg_read_field_def_UserStats.Stats'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> 'dg_read_field_def_UserStats.Stats'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'dg_read_field_def_UserStats.Stats'(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> 'd_field_UserStats.Stats_good'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> 'd_field_UserStats.Stats_late'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> 'd_field_UserStats.Stats_lost'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> 'd_field_UserStats.Stats_resync'(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> 'skip_varint_UserStats.Stats'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> 'skip_64_UserStats.Stats'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> 'skip_length_delimited_UserStats.Stats'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> 'skip_group_UserStats.Stats'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> 'skip_32_UserStats.Stats'(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
'dg_read_field_def_UserStats.Stats'(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'UserStats.Stats'{good = F@_1, late = F@_2, lost = F@_3, resync = F@_4}.

'd_field_UserStats.Stats_good'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_UserStats.Stats_good'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_UserStats.Stats_good'(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_UserStats.Stats'(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

'd_field_UserStats.Stats_late'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_UserStats.Stats_late'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_UserStats.Stats_late'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_UserStats.Stats'(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

'd_field_UserStats.Stats_lost'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_UserStats.Stats_lost'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_UserStats.Stats_lost'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_UserStats.Stats'(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

'd_field_UserStats.Stats_resync'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'd_field_UserStats.Stats_resync'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'd_field_UserStats.Stats_resync'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    'dfp_read_field_def_UserStats.Stats'(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

'skip_varint_UserStats.Stats'(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'skip_varint_UserStats.Stats'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_varint_UserStats.Stats'(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_UserStats.Stats'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_length_delimited_UserStats.Stats'(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> 'skip_length_delimited_UserStats.Stats'(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_UserStats.Stats'(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_UserStats.Stats'(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_group_UserStats.Stats'(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_UserStats.Stats'(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_32_UserStats.Stats'(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_UserStats.Stats'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'skip_64_UserStats.Stats'(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> 'dfp_read_field_def_UserStats.Stats'(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_UserStats(Bin, TrUserData) ->
    dfp_read_field_def_UserStats(Bin,
                                 0,
                                 0,
                                 0,
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id([], TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id([], TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 id(undefined, TrUserData),
                                 TrUserData).

dfp_read_field_def_UserStats(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_session(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_stats_only(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_certificates(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_from_client(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_from_server(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_udp_packets(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_tcp_packets(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<69, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_udp_ping_avg(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<77, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_udp_ping_var(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<85, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_tcp_ping_avg(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<93, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_tcp_ping_var(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<98, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_version(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<106, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_pfield_UserStats_celt_versions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<104, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_celt_versions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<114, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_address(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<120, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_bandwidth(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<128, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_onlinesecs(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<136, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_idlesecs(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<144, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_strong_certificate(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<152, 1, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    d_field_UserStats_opus(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dfp_read_field_def_UserStats(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, R2, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    #'UserStats'{session = F@_1, stats_only = F@_2, certificates = lists_reverse(R1, TrUserData), from_client = F@_4, from_server = F@_5, udp_packets = F@_6, tcp_packets = F@_7, udp_ping_avg = F@_8, udp_ping_var = F@_9, tcp_ping_avg = F@_10,
                 tcp_ping_var = F@_11, version = F@_12, celt_versions = lists_reverse(R2, TrUserData), address = F@_14, bandwidth = F@_15, onlinesecs = F@_16, idlesecs = F@_17, strong_certificate = F@_18, opus = F@_19};
dfp_read_field_def_UserStats(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dg_read_field_def_UserStats(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

dg_read_field_def_UserStats(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_UserStats(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
dg_read_field_def_UserStats(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_UserStats_session(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        16 -> d_field_UserStats_stats_only(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        26 -> d_field_UserStats_certificates(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        34 -> d_field_UserStats_from_client(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        42 -> d_field_UserStats_from_server(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        48 -> d_field_UserStats_udp_packets(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        56 -> d_field_UserStats_tcp_packets(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        69 -> d_field_UserStats_udp_ping_avg(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        77 -> d_field_UserStats_udp_ping_var(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        85 -> d_field_UserStats_tcp_ping_avg(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        93 -> d_field_UserStats_tcp_ping_var(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        98 -> d_field_UserStats_version(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        106 -> d_pfield_UserStats_celt_versions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        104 -> d_field_UserStats_celt_versions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        114 -> d_field_UserStats_address(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        120 -> d_field_UserStats_bandwidth(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        128 -> d_field_UserStats_onlinesecs(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        136 -> d_field_UserStats_idlesecs(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        144 -> d_field_UserStats_strong_certificate(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        152 -> d_field_UserStats_opus(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_UserStats(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
                1 -> skip_64_UserStats(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
                2 -> skip_length_delimited_UserStats(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
                3 -> skip_group_UserStats(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
                5 -> skip_32_UserStats(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData)
            end
    end;
dg_read_field_def_UserStats(<<>>, 0, 0, _, F@_1, F@_2, R1, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, R2, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    #'UserStats'{session = F@_1, stats_only = F@_2, certificates = lists_reverse(R1, TrUserData), from_client = F@_4, from_server = F@_5, udp_packets = F@_6, tcp_packets = F@_7, udp_ping_avg = F@_8, udp_ping_var = F@_9, tcp_ping_avg = F@_10,
                 tcp_ping_var = F@_11, version = F@_12, celt_versions = lists_reverse(R2, TrUserData), address = F@_14, bandwidth = F@_15, onlinesecs = F@_16, idlesecs = F@_17, strong_certificate = F@_18, opus = F@_19}.

d_field_UserStats_session(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_session(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_session(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_stats_only(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_stats_only(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_stats_only(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_certificates(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_certificates(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_certificates(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_from_client(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_from_client(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_from_client(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_UserStats.Stats'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UserStats(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 if Prev == undefined -> NewFValue;
                                    true -> 'merge_msg_UserStats.Stats'(Prev, NewFValue, TrUserData)
                                 end,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 F@_11,
                                 F@_12,
                                 F@_13,
                                 F@_14,
                                 F@_15,
                                 F@_16,
                                 F@_17,
                                 F@_18,
                                 F@_19,
                                 TrUserData).

d_field_UserStats_from_server(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_from_server(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_from_server(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id('decode_msg_UserStats.Stats'(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UserStats(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 if Prev == undefined -> NewFValue;
                                    true -> 'merge_msg_UserStats.Stats'(Prev, NewFValue, TrUserData)
                                 end,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 F@_11,
                                 F@_12,
                                 F@_13,
                                 F@_14,
                                 F@_15,
                                 F@_16,
                                 F@_17,
                                 F@_18,
                                 F@_19,
                                 TrUserData).

d_field_UserStats_udp_packets(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_udp_packets(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_udp_packets(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_tcp_packets(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_tcp_packets(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_tcp_packets(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_udp_ping_avg(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(infinity, TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_udp_ping_avg(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id('-infinity', TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_udp_ping_avg(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(nan, TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_udp_ping_avg(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, id(Value, TrUserData), F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_udp_ping_var(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(infinity, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_udp_ping_var(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id('-infinity', TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_udp_ping_var(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(nan, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_udp_ping_var(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, id(Value, TrUserData), F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_tcp_ping_avg(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(infinity, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_tcp_ping_avg(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id('-infinity', TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_tcp_ping_avg(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(nan, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_tcp_ping_avg(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, id(Value, TrUserData), F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_tcp_ping_var(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(infinity, TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_tcp_ping_var(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id('-infinity', TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_tcp_ping_var(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(nan, TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_tcp_ping_var(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, id(Value, TrUserData), F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_version(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_version(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_version(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, Prev, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Version(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_UserStats(RestF,
                                 0,
                                 0,
                                 F,
                                 F@_1,
                                 F@_2,
                                 F@_3,
                                 F@_4,
                                 F@_5,
                                 F@_6,
                                 F@_7,
                                 F@_8,
                                 F@_9,
                                 F@_10,
                                 F@_11,
                                 if Prev == undefined -> NewFValue;
                                    true -> merge_msg_Version(Prev, NewFValue, TrUserData)
                                 end,
                                 F@_13,
                                 F@_14,
                                 F@_15,
                                 F@_16,
                                 F@_17,
                                 F@_18,
                                 F@_19,
                                 TrUserData).

d_field_UserStats_celt_versions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_celt_versions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_celt_versions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, Prev, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, cons(NewFValue, Prev, TrUserData), F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_pfield_UserStats_celt_versions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_pfield_UserStats_celt_versions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_pfield_UserStats_celt_versions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, E, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_UserStats_celt_versions(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_UserStats(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, NewSeq, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_packed_field_UserStats_celt_versions(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_UserStats_celt_versions(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_UserStats_celt_versions(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    d_packed_field_UserStats_celt_versions(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_UserStats_celt_versions(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_UserStats_address(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_address(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_address(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, NewFValue, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_bandwidth(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_bandwidth(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_bandwidth(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, NewFValue, F@_16, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_onlinesecs(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_onlinesecs(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_onlinesecs(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _, F@_17, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, NewFValue, F@_17, F@_18, F@_19, TrUserData).

d_field_UserStats_idlesecs(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_idlesecs(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_idlesecs(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, _, F@_18, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, NewFValue, F@_18, F@_19, TrUserData).

d_field_UserStats_strong_certificate(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_strong_certificate(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_strong_certificate(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, _, F@_19, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, NewFValue, F@_19, TrUserData).

d_field_UserStats_opus(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    d_field_UserStats_opus(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
d_field_UserStats_opus(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_UserStats(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, NewFValue, TrUserData).

skip_varint_UserStats(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    skip_varint_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
skip_varint_UserStats(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

skip_length_delimited_UserStats(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) when N < 57 ->
    skip_length_delimited_UserStats(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData);
skip_length_delimited_UserStats(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserStats(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

skip_group_UserStats(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserStats(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

skip_32_UserStats(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

skip_64_UserStats(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData) ->
    dfp_read_field_def_UserStats(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, TrUserData).

decode_msg_RequestBlob(Bin, TrUserData) -> dfp_read_field_def_RequestBlob(Bin, 0, 0, 0, id([], TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_RequestBlob(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_pfield_RequestBlob_session_texture(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RequestBlob(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_RequestBlob_session_texture(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RequestBlob(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_pfield_RequestBlob_session_comment(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RequestBlob(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_RequestBlob_session_comment(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RequestBlob(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_pfield_RequestBlob_channel_description(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RequestBlob(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_RequestBlob_channel_description(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_RequestBlob(<<>>, 0, 0, _, R1, R2, R3, TrUserData) -> #'RequestBlob'{session_texture = lists_reverse(R1, TrUserData), session_comment = lists_reverse(R2, TrUserData), channel_description = lists_reverse(R3, TrUserData)};
dfp_read_field_def_RequestBlob(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_RequestBlob(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_RequestBlob(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_RequestBlob(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_RequestBlob(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_pfield_RequestBlob_session_texture(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        8 -> d_field_RequestBlob_session_texture(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_pfield_RequestBlob_session_comment(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_RequestBlob_session_comment(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_pfield_RequestBlob_channel_description(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        24 -> d_field_RequestBlob_channel_description(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_RequestBlob(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_RequestBlob(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_RequestBlob(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_RequestBlob(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_RequestBlob(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_RequestBlob(<<>>, 0, 0, _, R1, R2, R3, TrUserData) -> #'RequestBlob'{session_texture = lists_reverse(R1, TrUserData), session_comment = lists_reverse(R2, TrUserData), channel_description = lists_reverse(R3, TrUserData)}.

d_field_RequestBlob_session_texture(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RequestBlob_session_texture(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_RequestBlob_session_texture(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_RequestBlob(RestF, 0, 0, F, cons(NewFValue, Prev, TrUserData), F@_2, F@_3, TrUserData).

d_pfield_RequestBlob_session_texture(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_pfield_RequestBlob_session_texture(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_pfield_RequestBlob_session_texture(<<0:1, X:7, Rest/binary>>, N, Acc, F, E, F@_2, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_RequestBlob_session_texture(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_RequestBlob(Rest2, 0, 0, F, NewSeq, F@_2, F@_3, TrUserData).

d_packed_field_RequestBlob_session_texture(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_RequestBlob_session_texture(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_RequestBlob_session_texture(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_RequestBlob_session_texture(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_RequestBlob_session_texture(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_RequestBlob_session_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RequestBlob_session_comment(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_RequestBlob_session_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_RequestBlob(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, TrUserData).

d_pfield_RequestBlob_session_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_pfield_RequestBlob_session_comment(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_pfield_RequestBlob_session_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, F@_3, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_RequestBlob_session_comment(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_RequestBlob(Rest2, 0, 0, F, F@_1, NewSeq, F@_3, TrUserData).

d_packed_field_RequestBlob_session_comment(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_RequestBlob_session_comment(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_RequestBlob_session_comment(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_RequestBlob_session_comment(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_RequestBlob_session_comment(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_RequestBlob_channel_description(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_RequestBlob_channel_description(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_RequestBlob_channel_description(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_RequestBlob(RestF, 0, 0, F, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_RequestBlob_channel_description(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_pfield_RequestBlob_channel_description(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_pfield_RequestBlob_channel_description(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_RequestBlob_channel_description(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_RequestBlob(Rest2, 0, 0, F, F@_1, F@_2, NewSeq, TrUserData).

d_packed_field_RequestBlob_channel_description(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_RequestBlob_channel_description(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_RequestBlob_channel_description(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_RequestBlob_channel_description(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_RequestBlob_channel_description(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

skip_varint_RequestBlob(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_RequestBlob(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_RequestBlob(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RequestBlob(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_RequestBlob(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_RequestBlob(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_RequestBlob(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RequestBlob(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_RequestBlob(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RequestBlob(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_RequestBlob(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RequestBlob(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_RequestBlob(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_RequestBlob(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_ServerConfig(Bin, TrUserData) ->
    dfp_read_field_def_ServerConfig(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ServerConfig(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_ServerConfig_max_bandwidth(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ServerConfig(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_ServerConfig_welcome_text(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ServerConfig(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_ServerConfig_allow_html(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ServerConfig(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_ServerConfig_message_length(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ServerConfig(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_ServerConfig_image_message_length(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ServerConfig(<<48, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_ServerConfig_max_users(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ServerConfig(<<56, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> d_field_ServerConfig_recording_allowed(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_ServerConfig(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'ServerConfig'{max_bandwidth = F@_1, welcome_text = F@_2, allow_html = F@_3, message_length = F@_4, image_message_length = F@_5, max_users = F@_6, recording_allowed = F@_7};
dfp_read_field_def_ServerConfig(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dg_read_field_def_ServerConfig(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_ServerConfig(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_ServerConfig(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_ServerConfig(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ServerConfig_max_bandwidth(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        18 -> d_field_ServerConfig_welcome_text(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        24 -> d_field_ServerConfig_allow_html(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        32 -> d_field_ServerConfig_message_length(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        40 -> d_field_ServerConfig_image_message_length(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        48 -> d_field_ServerConfig_max_users(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        56 -> d_field_ServerConfig_recording_allowed(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ServerConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                1 -> skip_64_ServerConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                2 -> skip_length_delimited_ServerConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                3 -> skip_group_ServerConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
                5 -> skip_32_ServerConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
            end
    end;
dg_read_field_def_ServerConfig(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #'ServerConfig'{max_bandwidth = F@_1, welcome_text = F@_2, allow_html = F@_3, message_length = F@_4, image_message_length = F@_5, max_users = F@_6, recording_allowed = F@_7}.

d_field_ServerConfig_max_bandwidth(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_ServerConfig_max_bandwidth(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_ServerConfig_max_bandwidth(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ServerConfig(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_ServerConfig_welcome_text(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_ServerConfig_welcome_text(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_ServerConfig_welcome_text(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_ServerConfig(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_ServerConfig_allow_html(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_ServerConfig_allow_html(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_ServerConfig_allow_html(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ServerConfig(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_ServerConfig_message_length(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_ServerConfig_message_length(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_ServerConfig_message_length(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ServerConfig(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_ServerConfig_image_message_length(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_ServerConfig_image_message_length(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_ServerConfig_image_message_length(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ServerConfig(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_ServerConfig_max_users(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_ServerConfig_max_users(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_ServerConfig_max_users(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_ServerConfig(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_ServerConfig_recording_allowed(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    d_field_ServerConfig_recording_allowed(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_ServerConfig_recording_allowed(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ServerConfig(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_ServerConfig(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> skip_varint_ServerConfig(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_ServerConfig(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_ServerConfig(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_ServerConfig(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) when N < 57 ->
    skip_length_delimited_ServerConfig(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_ServerConfig(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerConfig(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_ServerConfig(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerConfig(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_ServerConfig(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_ServerConfig(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_ServerConfig(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) -> dfp_read_field_def_ServerConfig(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_SuggestConfig(Bin, TrUserData) -> dfp_read_field_def_SuggestConfig(Bin, 0, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_SuggestConfig(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_SuggestConfig_version_v1(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SuggestConfig(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_SuggestConfig_version_v2(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SuggestConfig(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_SuggestConfig_positional(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SuggestConfig(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_SuggestConfig_push_to_talk(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SuggestConfig(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'SuggestConfig'{version_v1 = F@_1, version_v2 = F@_2, positional = F@_3, push_to_talk = F@_4};
dfp_read_field_def_SuggestConfig(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_SuggestConfig(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_SuggestConfig(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_SuggestConfig(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_SuggestConfig(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_SuggestConfig_version_v1(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_SuggestConfig_version_v2(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_SuggestConfig_positional(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_SuggestConfig_push_to_talk(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SuggestConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_SuggestConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_SuggestConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_SuggestConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_SuggestConfig(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_SuggestConfig(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #'SuggestConfig'{version_v1 = F@_1, version_v2 = F@_2, positional = F@_3, push_to_talk = F@_4}.

d_field_SuggestConfig_version_v1(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_SuggestConfig_version_v1(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_SuggestConfig_version_v1(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_SuggestConfig(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_SuggestConfig_version_v2(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_SuggestConfig_version_v2(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_SuggestConfig_version_v2(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 18446744073709551615, TrUserData), Rest},
    dfp_read_field_def_SuggestConfig(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_SuggestConfig_positional(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_SuggestConfig_positional(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_SuggestConfig_positional(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_SuggestConfig(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_SuggestConfig_push_to_talk(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_SuggestConfig_push_to_talk(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_SuggestConfig_push_to_talk(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_SuggestConfig(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_SuggestConfig(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_SuggestConfig(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_SuggestConfig(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_SuggestConfig(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_SuggestConfig(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_SuggestConfig(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_SuggestConfig(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SuggestConfig(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_SuggestConfig(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SuggestConfig(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_SuggestConfig(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_SuggestConfig(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_SuggestConfig(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_SuggestConfig(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_PluginDataTransmission(Bin, TrUserData) -> dfp_read_field_def_PluginDataTransmission(Bin, 0, 0, 0, id(undefined, TrUserData), id([], TrUserData), id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_PluginDataTransmission(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_PluginDataTransmission_senderSession(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_PluginDataTransmission(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_pfield_PluginDataTransmission_receiverSessions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_PluginDataTransmission(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_PluginDataTransmission_receiverSessions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_PluginDataTransmission(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_PluginDataTransmission_data(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_PluginDataTransmission(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_PluginDataTransmission_dataID(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_PluginDataTransmission(<<>>, 0, 0, _, F@_1, R1, F@_3, F@_4, TrUserData) -> #'PluginDataTransmission'{senderSession = F@_1, receiverSessions = lists_reverse(R1, TrUserData), data = F@_3, dataID = F@_4};
dfp_read_field_def_PluginDataTransmission(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_PluginDataTransmission(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_PluginDataTransmission(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_PluginDataTransmission(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_PluginDataTransmission(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_PluginDataTransmission_senderSession(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        18 -> d_pfield_PluginDataTransmission_receiverSessions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_PluginDataTransmission_receiverSessions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_PluginDataTransmission_data(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_field_PluginDataTransmission_dataID(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PluginDataTransmission(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_PluginDataTransmission(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_PluginDataTransmission(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_PluginDataTransmission(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_PluginDataTransmission(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_PluginDataTransmission(<<>>, 0, 0, _, F@_1, R1, F@_3, F@_4, TrUserData) -> #'PluginDataTransmission'{senderSession = F@_1, receiverSessions = lists_reverse(R1, TrUserData), data = F@_3, dataID = F@_4}.

d_field_PluginDataTransmission_senderSession(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_PluginDataTransmission_senderSession(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_PluginDataTransmission_senderSession(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_PluginDataTransmission(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_PluginDataTransmission_receiverSessions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    d_field_PluginDataTransmission_receiverSessions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_PluginDataTransmission_receiverSessions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    dfp_read_field_def_PluginDataTransmission(RestF, 0, 0, F, F@_1, cons(NewFValue, Prev, TrUserData), F@_3, F@_4, TrUserData).

d_pfield_PluginDataTransmission_receiverSessions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    d_pfield_PluginDataTransmission_receiverSessions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_pfield_PluginDataTransmission_receiverSessions(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, F@_3, F@_4, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_PluginDataTransmission_receiverSessions(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_PluginDataTransmission(Rest2, 0, 0, F, F@_1, NewSeq, F@_3, F@_4, TrUserData).

d_packed_field_PluginDataTransmission_receiverSessions(<<1:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) when N < 57 -> d_packed_field_PluginDataTransmission_receiverSessions(Rest, N + 7, X bsl N + Acc, F, AccSeq, TrUserData);
d_packed_field_PluginDataTransmission_receiverSessions(<<0:1, X:7, Rest/binary>>, N, Acc, F, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id((X bsl N + Acc) band 4294967295, TrUserData), Rest},
    d_packed_field_PluginDataTransmission_receiverSessions(RestF, 0, 0, F, [NewFValue | AccSeq], TrUserData);
d_packed_field_PluginDataTransmission_receiverSessions(<<>>, 0, 0, _, AccSeq, _) -> AccSeq.

d_field_PluginDataTransmission_data(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_PluginDataTransmission_data(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_PluginDataTransmission_data(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, Bytes2 = binary:copy(Bytes), {id(Bytes2, TrUserData), Rest2} end,
    dfp_read_field_def_PluginDataTransmission(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_PluginDataTransmission_dataID(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_PluginDataTransmission_dataID(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_PluginDataTransmission_dataID(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_PluginDataTransmission(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_PluginDataTransmission(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_PluginDataTransmission(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_PluginDataTransmission(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_PluginDataTransmission(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_PluginDataTransmission(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_PluginDataTransmission(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_PluginDataTransmission(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PluginDataTransmission(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_PluginDataTransmission(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PluginDataTransmission(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_PluginDataTransmission(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_PluginDataTransmission(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_PluginDataTransmission(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_PluginDataTransmission(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

'd_enum_Reject.RejectType'(0) -> 'None';
'd_enum_Reject.RejectType'(1) -> 'WrongVersion';
'd_enum_Reject.RejectType'(2) -> 'InvalidUsername';
'd_enum_Reject.RejectType'(3) -> 'WrongUserPW';
'd_enum_Reject.RejectType'(4) -> 'WrongServerPW';
'd_enum_Reject.RejectType'(5) -> 'UsernameInUse';
'd_enum_Reject.RejectType'(6) -> 'ServerFull';
'd_enum_Reject.RejectType'(7) -> 'NoCertificate';
'd_enum_Reject.RejectType'(8) -> 'AuthenticatorFail';
'd_enum_Reject.RejectType'(V) -> V.

'd_enum_PermissionDenied.DenyType'(0) -> 'Text';
'd_enum_PermissionDenied.DenyType'(1) -> 'Permission';
'd_enum_PermissionDenied.DenyType'(2) -> 'SuperUser';
'd_enum_PermissionDenied.DenyType'(3) -> 'ChannelName';
'd_enum_PermissionDenied.DenyType'(4) -> 'TextTooLong';
'd_enum_PermissionDenied.DenyType'(5) -> 'H9K';
'd_enum_PermissionDenied.DenyType'(6) -> 'TemporaryChannel';
'd_enum_PermissionDenied.DenyType'(7) -> 'MissingCertificate';
'd_enum_PermissionDenied.DenyType'(8) -> 'UserName';
'd_enum_PermissionDenied.DenyType'(9) -> 'ChannelFull';
'd_enum_PermissionDenied.DenyType'(10) -> 'NestingLimit';
'd_enum_PermissionDenied.DenyType'(11) -> 'ChannelCountLimit';
'd_enum_PermissionDenied.DenyType'(12) -> 'ChannelListenerLimit';
'd_enum_PermissionDenied.DenyType'(13) -> 'UserListenerLimit';
'd_enum_PermissionDenied.DenyType'(V) -> V.

'd_enum_ContextActionModify.Operation'(0) -> 'Add';
'd_enum_ContextActionModify.Operation'(1) -> 'Remove';
'd_enum_ContextActionModify.Operation'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Version' -> merge_msg_Version(Prev, New, TrUserData);
        'UDPTunnel' -> merge_msg_UDPTunnel(Prev, New, TrUserData);
        'Authenticate' -> merge_msg_Authenticate(Prev, New, TrUserData);
        'Ping' -> merge_msg_Ping(Prev, New, TrUserData);
        'Reject' -> merge_msg_Reject(Prev, New, TrUserData);
        'ServerSync' -> merge_msg_ServerSync(Prev, New, TrUserData);
        'ChannelRemove' -> merge_msg_ChannelRemove(Prev, New, TrUserData);
        'ChannelState' -> merge_msg_ChannelState(Prev, New, TrUserData);
        'UserRemove' -> merge_msg_UserRemove(Prev, New, TrUserData);
        'UserState.VolumeAdjustment' -> 'merge_msg_UserState.VolumeAdjustment'(Prev, New, TrUserData);
        'UserState' -> merge_msg_UserState(Prev, New, TrUserData);
        'BanList.BanEntry' -> 'merge_msg_BanList.BanEntry'(Prev, New, TrUserData);
        'BanList' -> merge_msg_BanList(Prev, New, TrUserData);
        'TextMessage' -> merge_msg_TextMessage(Prev, New, TrUserData);
        'PermissionDenied' -> merge_msg_PermissionDenied(Prev, New, TrUserData);
        'ACL.ChanGroup' -> 'merge_msg_ACL.ChanGroup'(Prev, New, TrUserData);
        'ACL.ChanACL' -> 'merge_msg_ACL.ChanACL'(Prev, New, TrUserData);
        'ACL' -> merge_msg_ACL(Prev, New, TrUserData);
        'QueryUsers' -> merge_msg_QueryUsers(Prev, New, TrUserData);
        'CryptSetup' -> merge_msg_CryptSetup(Prev, New, TrUserData);
        'ContextActionModify' -> merge_msg_ContextActionModify(Prev, New, TrUserData);
        'ContextAction' -> merge_msg_ContextAction(Prev, New, TrUserData);
        'UserList.User' -> 'merge_msg_UserList.User'(Prev, New, TrUserData);
        'UserList' -> merge_msg_UserList(Prev, New, TrUserData);
        'VoiceTarget.Target' -> 'merge_msg_VoiceTarget.Target'(Prev, New, TrUserData);
        'VoiceTarget' -> merge_msg_VoiceTarget(Prev, New, TrUserData);
        'PermissionQuery' -> merge_msg_PermissionQuery(Prev, New, TrUserData);
        'CodecVersion' -> merge_msg_CodecVersion(Prev, New, TrUserData);
        'UserStats.Stats' -> 'merge_msg_UserStats.Stats'(Prev, New, TrUserData);
        'UserStats' -> merge_msg_UserStats(Prev, New, TrUserData);
        'RequestBlob' -> merge_msg_RequestBlob(Prev, New, TrUserData);
        'ServerConfig' -> merge_msg_ServerConfig(Prev, New, TrUserData);
        'SuggestConfig' -> merge_msg_SuggestConfig(Prev, New, TrUserData);
        'PluginDataTransmission' -> merge_msg_PluginDataTransmission(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Version/3}).
merge_msg_Version(#'Version'{version_v1 = PFversion_v1, version_v2 = PFversion_v2, release = PFrelease, os = PFos, os_version = PFos_version},
                  #'Version'{version_v1 = NFversion_v1, version_v2 = NFversion_v2, release = NFrelease, os = NFos, os_version = NFos_version}, _) ->
    #'Version'{version_v1 =
                   if NFversion_v1 =:= undefined -> PFversion_v1;
                      true -> NFversion_v1
                   end,
               version_v2 =
                   if NFversion_v2 =:= undefined -> PFversion_v2;
                      true -> NFversion_v2
                   end,
               release =
                   if NFrelease =:= undefined -> PFrelease;
                      true -> NFrelease
                   end,
               os =
                   if NFos =:= undefined -> PFos;
                      true -> NFos
                   end,
               os_version =
                   if NFos_version =:= undefined -> PFos_version;
                      true -> NFos_version
                   end}.

-compile({nowarn_unused_function,merge_msg_UDPTunnel/3}).
merge_msg_UDPTunnel(#'UDPTunnel'{}, #'UDPTunnel'{packet = NFpacket}, _) -> #'UDPTunnel'{packet = NFpacket}.

-compile({nowarn_unused_function,merge_msg_Authenticate/3}).
merge_msg_Authenticate(#'Authenticate'{username = PFusername, password = PFpassword, tokens = PFtokens, celt_versions = PFcelt_versions, opus = PFopus, client_type = PFclient_type},
                       #'Authenticate'{username = NFusername, password = NFpassword, tokens = NFtokens, celt_versions = NFcelt_versions, opus = NFopus, client_type = NFclient_type}, TrUserData) ->
    #'Authenticate'{username =
                        if NFusername =:= undefined -> PFusername;
                           true -> NFusername
                        end,
                    password =
                        if NFpassword =:= undefined -> PFpassword;
                           true -> NFpassword
                        end,
                    tokens =
                        if PFtokens /= undefined, NFtokens /= undefined -> 'erlang_++'(PFtokens, NFtokens, TrUserData);
                           PFtokens == undefined -> NFtokens;
                           NFtokens == undefined -> PFtokens
                        end,
                    celt_versions =
                        if PFcelt_versions /= undefined, NFcelt_versions /= undefined -> 'erlang_++'(PFcelt_versions, NFcelt_versions, TrUserData);
                           PFcelt_versions == undefined -> NFcelt_versions;
                           NFcelt_versions == undefined -> PFcelt_versions
                        end,
                    opus =
                        if NFopus =:= undefined -> PFopus;
                           true -> NFopus
                        end,
                    client_type =
                        if NFclient_type =:= undefined -> PFclient_type;
                           true -> NFclient_type
                        end}.

-compile({nowarn_unused_function,merge_msg_Ping/3}).
merge_msg_Ping(#'Ping'{timestamp = PFtimestamp, good = PFgood, late = PFlate, lost = PFlost, resync = PFresync, udp_packets = PFudp_packets, tcp_packets = PFtcp_packets, udp_ping_avg = PFudp_ping_avg, udp_ping_var = PFudp_ping_var,
                       tcp_ping_avg = PFtcp_ping_avg, tcp_ping_var = PFtcp_ping_var},
               #'Ping'{timestamp = NFtimestamp, good = NFgood, late = NFlate, lost = NFlost, resync = NFresync, udp_packets = NFudp_packets, tcp_packets = NFtcp_packets, udp_ping_avg = NFudp_ping_avg, udp_ping_var = NFudp_ping_var, tcp_ping_avg = NFtcp_ping_avg,
                       tcp_ping_var = NFtcp_ping_var},
               _) ->
    #'Ping'{timestamp =
                if NFtimestamp =:= undefined -> PFtimestamp;
                   true -> NFtimestamp
                end,
            good =
                if NFgood =:= undefined -> PFgood;
                   true -> NFgood
                end,
            late =
                if NFlate =:= undefined -> PFlate;
                   true -> NFlate
                end,
            lost =
                if NFlost =:= undefined -> PFlost;
                   true -> NFlost
                end,
            resync =
                if NFresync =:= undefined -> PFresync;
                   true -> NFresync
                end,
            udp_packets =
                if NFudp_packets =:= undefined -> PFudp_packets;
                   true -> NFudp_packets
                end,
            tcp_packets =
                if NFtcp_packets =:= undefined -> PFtcp_packets;
                   true -> NFtcp_packets
                end,
            udp_ping_avg =
                if NFudp_ping_avg =:= undefined -> PFudp_ping_avg;
                   true -> NFudp_ping_avg
                end,
            udp_ping_var =
                if NFudp_ping_var =:= undefined -> PFudp_ping_var;
                   true -> NFudp_ping_var
                end,
            tcp_ping_avg =
                if NFtcp_ping_avg =:= undefined -> PFtcp_ping_avg;
                   true -> NFtcp_ping_avg
                end,
            tcp_ping_var =
                if NFtcp_ping_var =:= undefined -> PFtcp_ping_var;
                   true -> NFtcp_ping_var
                end}.

-compile({nowarn_unused_function,merge_msg_Reject/3}).
merge_msg_Reject(#'Reject'{type = PFtype, reason = PFreason}, #'Reject'{type = NFtype, reason = NFreason}, _) ->
    #'Reject'{type =
                  if NFtype =:= undefined -> PFtype;
                     true -> NFtype
                  end,
              reason =
                  if NFreason =:= undefined -> PFreason;
                     true -> NFreason
                  end}.

-compile({nowarn_unused_function,merge_msg_ServerSync/3}).
merge_msg_ServerSync(#'ServerSync'{session = PFsession, max_bandwidth = PFmax_bandwidth, welcome_text = PFwelcome_text, permissions = PFpermissions},
                     #'ServerSync'{session = NFsession, max_bandwidth = NFmax_bandwidth, welcome_text = NFwelcome_text, permissions = NFpermissions}, _) ->
    #'ServerSync'{session =
                      if NFsession =:= undefined -> PFsession;
                         true -> NFsession
                      end,
                  max_bandwidth =
                      if NFmax_bandwidth =:= undefined -> PFmax_bandwidth;
                         true -> NFmax_bandwidth
                      end,
                  welcome_text =
                      if NFwelcome_text =:= undefined -> PFwelcome_text;
                         true -> NFwelcome_text
                      end,
                  permissions =
                      if NFpermissions =:= undefined -> PFpermissions;
                         true -> NFpermissions
                      end}.

-compile({nowarn_unused_function,merge_msg_ChannelRemove/3}).
merge_msg_ChannelRemove(#'ChannelRemove'{}, #'ChannelRemove'{channel_id = NFchannel_id}, _) -> #'ChannelRemove'{channel_id = NFchannel_id}.

-compile({nowarn_unused_function,merge_msg_ChannelState/3}).
merge_msg_ChannelState(#'ChannelState'{channel_id = PFchannel_id, parent = PFparent, name = PFname, links = PFlinks, description = PFdescription, links_add = PFlinks_add, links_remove = PFlinks_remove, temporary = PFtemporary, position = PFposition,
                                       description_hash = PFdescription_hash, max_users = PFmax_users, is_enter_restricted = PFis_enter_restricted, can_enter = PFcan_enter},
                       #'ChannelState'{channel_id = NFchannel_id, parent = NFparent, name = NFname, links = NFlinks, description = NFdescription, links_add = NFlinks_add, links_remove = NFlinks_remove, temporary = NFtemporary, position = NFposition,
                                       description_hash = NFdescription_hash, max_users = NFmax_users, is_enter_restricted = NFis_enter_restricted, can_enter = NFcan_enter},
                       TrUserData) ->
    #'ChannelState'{channel_id =
                        if NFchannel_id =:= undefined -> PFchannel_id;
                           true -> NFchannel_id
                        end,
                    parent =
                        if NFparent =:= undefined -> PFparent;
                           true -> NFparent
                        end,
                    name =
                        if NFname =:= undefined -> PFname;
                           true -> NFname
                        end,
                    links =
                        if PFlinks /= undefined, NFlinks /= undefined -> 'erlang_++'(PFlinks, NFlinks, TrUserData);
                           PFlinks == undefined -> NFlinks;
                           NFlinks == undefined -> PFlinks
                        end,
                    description =
                        if NFdescription =:= undefined -> PFdescription;
                           true -> NFdescription
                        end,
                    links_add =
                        if PFlinks_add /= undefined, NFlinks_add /= undefined -> 'erlang_++'(PFlinks_add, NFlinks_add, TrUserData);
                           PFlinks_add == undefined -> NFlinks_add;
                           NFlinks_add == undefined -> PFlinks_add
                        end,
                    links_remove =
                        if PFlinks_remove /= undefined, NFlinks_remove /= undefined -> 'erlang_++'(PFlinks_remove, NFlinks_remove, TrUserData);
                           PFlinks_remove == undefined -> NFlinks_remove;
                           NFlinks_remove == undefined -> PFlinks_remove
                        end,
                    temporary =
                        if NFtemporary =:= undefined -> PFtemporary;
                           true -> NFtemporary
                        end,
                    position =
                        if NFposition =:= undefined -> PFposition;
                           true -> NFposition
                        end,
                    description_hash =
                        if NFdescription_hash =:= undefined -> PFdescription_hash;
                           true -> NFdescription_hash
                        end,
                    max_users =
                        if NFmax_users =:= undefined -> PFmax_users;
                           true -> NFmax_users
                        end,
                    is_enter_restricted =
                        if NFis_enter_restricted =:= undefined -> PFis_enter_restricted;
                           true -> NFis_enter_restricted
                        end,
                    can_enter =
                        if NFcan_enter =:= undefined -> PFcan_enter;
                           true -> NFcan_enter
                        end}.

-compile({nowarn_unused_function,merge_msg_UserRemove/3}).
merge_msg_UserRemove(#'UserRemove'{actor = PFactor, reason = PFreason, ban = PFban}, #'UserRemove'{session = NFsession, actor = NFactor, reason = NFreason, ban = NFban}, _) ->
    #'UserRemove'{session = NFsession,
                  actor =
                      if NFactor =:= undefined -> PFactor;
                         true -> NFactor
                      end,
                  reason =
                      if NFreason =:= undefined -> PFreason;
                         true -> NFreason
                      end,
                  ban =
                      if NFban =:= undefined -> PFban;
                         true -> NFban
                      end}.

-compile({nowarn_unused_function,'merge_msg_UserState.VolumeAdjustment'/3}).
'merge_msg_UserState.VolumeAdjustment'(#'UserState.VolumeAdjustment'{listening_channel = PFlistening_channel, volume_adjustment = PFvolume_adjustment},
                                       #'UserState.VolumeAdjustment'{listening_channel = NFlistening_channel, volume_adjustment = NFvolume_adjustment}, _) ->
    #'UserState.VolumeAdjustment'{listening_channel =
                                      if NFlistening_channel =:= undefined -> PFlistening_channel;
                                         true -> NFlistening_channel
                                      end,
                                  volume_adjustment =
                                      if NFvolume_adjustment =:= undefined -> PFvolume_adjustment;
                                         true -> NFvolume_adjustment
                                      end}.

-compile({nowarn_unused_function,merge_msg_UserState/3}).
merge_msg_UserState(#'UserState'{session = PFsession, actor = PFactor, name = PFname, user_id = PFuser_id, channel_id = PFchannel_id, mute = PFmute, deaf = PFdeaf, suppress = PFsuppress, self_mute = PFself_mute, self_deaf = PFself_deaf,
                                 texture = PFtexture, plugin_context = PFplugin_context, plugin_identity = PFplugin_identity, comment = PFcomment, hash = PFhash, comment_hash = PFcomment_hash, texture_hash = PFtexture_hash, priority_speaker = PFpriority_speaker,
                                 recording = PFrecording, temporary_access_tokens = PFtemporary_access_tokens, listening_channel_add = PFlistening_channel_add, listening_channel_remove = PFlistening_channel_remove, listening_volume_adjustment = PFlistening_volume_adjustment},
                    #'UserState'{session = NFsession, actor = NFactor, name = NFname, user_id = NFuser_id, channel_id = NFchannel_id, mute = NFmute, deaf = NFdeaf, suppress = NFsuppress, self_mute = NFself_mute, self_deaf = NFself_deaf, texture = NFtexture,
                                 plugin_context = NFplugin_context, plugin_identity = NFplugin_identity, comment = NFcomment, hash = NFhash, comment_hash = NFcomment_hash, texture_hash = NFtexture_hash, priority_speaker = NFpriority_speaker, recording = NFrecording,
                                 temporary_access_tokens = NFtemporary_access_tokens, listening_channel_add = NFlistening_channel_add, listening_channel_remove = NFlistening_channel_remove, listening_volume_adjustment = NFlistening_volume_adjustment},
                    TrUserData) ->
    #'UserState'{session =
                     if NFsession =:= undefined -> PFsession;
                        true -> NFsession
                     end,
                 actor =
                     if NFactor =:= undefined -> PFactor;
                        true -> NFactor
                     end,
                 name =
                     if NFname =:= undefined -> PFname;
                        true -> NFname
                     end,
                 user_id =
                     if NFuser_id =:= undefined -> PFuser_id;
                        true -> NFuser_id
                     end,
                 channel_id =
                     if NFchannel_id =:= undefined -> PFchannel_id;
                        true -> NFchannel_id
                     end,
                 mute =
                     if NFmute =:= undefined -> PFmute;
                        true -> NFmute
                     end,
                 deaf =
                     if NFdeaf =:= undefined -> PFdeaf;
                        true -> NFdeaf
                     end,
                 suppress =
                     if NFsuppress =:= undefined -> PFsuppress;
                        true -> NFsuppress
                     end,
                 self_mute =
                     if NFself_mute =:= undefined -> PFself_mute;
                        true -> NFself_mute
                     end,
                 self_deaf =
                     if NFself_deaf =:= undefined -> PFself_deaf;
                        true -> NFself_deaf
                     end,
                 texture =
                     if NFtexture =:= undefined -> PFtexture;
                        true -> NFtexture
                     end,
                 plugin_context =
                     if NFplugin_context =:= undefined -> PFplugin_context;
                        true -> NFplugin_context
                     end,
                 plugin_identity =
                     if NFplugin_identity =:= undefined -> PFplugin_identity;
                        true -> NFplugin_identity
                     end,
                 comment =
                     if NFcomment =:= undefined -> PFcomment;
                        true -> NFcomment
                     end,
                 hash =
                     if NFhash =:= undefined -> PFhash;
                        true -> NFhash
                     end,
                 comment_hash =
                     if NFcomment_hash =:= undefined -> PFcomment_hash;
                        true -> NFcomment_hash
                     end,
                 texture_hash =
                     if NFtexture_hash =:= undefined -> PFtexture_hash;
                        true -> NFtexture_hash
                     end,
                 priority_speaker =
                     if NFpriority_speaker =:= undefined -> PFpriority_speaker;
                        true -> NFpriority_speaker
                     end,
                 recording =
                     if NFrecording =:= undefined -> PFrecording;
                        true -> NFrecording
                     end,
                 temporary_access_tokens =
                     if PFtemporary_access_tokens /= undefined, NFtemporary_access_tokens /= undefined -> 'erlang_++'(PFtemporary_access_tokens, NFtemporary_access_tokens, TrUserData);
                        PFtemporary_access_tokens == undefined -> NFtemporary_access_tokens;
                        NFtemporary_access_tokens == undefined -> PFtemporary_access_tokens
                     end,
                 listening_channel_add =
                     if PFlistening_channel_add /= undefined, NFlistening_channel_add /= undefined -> 'erlang_++'(PFlistening_channel_add, NFlistening_channel_add, TrUserData);
                        PFlistening_channel_add == undefined -> NFlistening_channel_add;
                        NFlistening_channel_add == undefined -> PFlistening_channel_add
                     end,
                 listening_channel_remove =
                     if PFlistening_channel_remove /= undefined, NFlistening_channel_remove /= undefined -> 'erlang_++'(PFlistening_channel_remove, NFlistening_channel_remove, TrUserData);
                        PFlistening_channel_remove == undefined -> NFlistening_channel_remove;
                        NFlistening_channel_remove == undefined -> PFlistening_channel_remove
                     end,
                 listening_volume_adjustment =
                     if PFlistening_volume_adjustment /= undefined, NFlistening_volume_adjustment /= undefined -> 'erlang_++'(PFlistening_volume_adjustment, NFlistening_volume_adjustment, TrUserData);
                        PFlistening_volume_adjustment == undefined -> NFlistening_volume_adjustment;
                        NFlistening_volume_adjustment == undefined -> PFlistening_volume_adjustment
                     end}.

-compile({nowarn_unused_function,'merge_msg_BanList.BanEntry'/3}).
'merge_msg_BanList.BanEntry'(#'BanList.BanEntry'{name = PFname, hash = PFhash, reason = PFreason, start = PFstart, duration = PFduration},
                             #'BanList.BanEntry'{address = NFaddress, mask = NFmask, name = NFname, hash = NFhash, reason = NFreason, start = NFstart, duration = NFduration}, _) ->
    #'BanList.BanEntry'{address = NFaddress, mask = NFmask,
                        name =
                            if NFname =:= undefined -> PFname;
                               true -> NFname
                            end,
                        hash =
                            if NFhash =:= undefined -> PFhash;
                               true -> NFhash
                            end,
                        reason =
                            if NFreason =:= undefined -> PFreason;
                               true -> NFreason
                            end,
                        start =
                            if NFstart =:= undefined -> PFstart;
                               true -> NFstart
                            end,
                        duration =
                            if NFduration =:= undefined -> PFduration;
                               true -> NFduration
                            end}.

-compile({nowarn_unused_function,merge_msg_BanList/3}).
merge_msg_BanList(#'BanList'{bans = PFbans, query = PFquery}, #'BanList'{bans = NFbans, query = NFquery}, TrUserData) ->
    #'BanList'{bans =
                   if PFbans /= undefined, NFbans /= undefined -> 'erlang_++'(PFbans, NFbans, TrUserData);
                      PFbans == undefined -> NFbans;
                      NFbans == undefined -> PFbans
                   end,
               query =
                   if NFquery =:= undefined -> PFquery;
                      true -> NFquery
                   end}.

-compile({nowarn_unused_function,merge_msg_TextMessage/3}).
merge_msg_TextMessage(#'TextMessage'{actor = PFactor, session = PFsession, channel_id = PFchannel_id, tree_id = PFtree_id}, #'TextMessage'{actor = NFactor, session = NFsession, channel_id = NFchannel_id, tree_id = NFtree_id, message = NFmessage},
                      TrUserData) ->
    #'TextMessage'{actor =
                       if NFactor =:= undefined -> PFactor;
                          true -> NFactor
                       end,
                   session =
                       if PFsession /= undefined, NFsession /= undefined -> 'erlang_++'(PFsession, NFsession, TrUserData);
                          PFsession == undefined -> NFsession;
                          NFsession == undefined -> PFsession
                       end,
                   channel_id =
                       if PFchannel_id /= undefined, NFchannel_id /= undefined -> 'erlang_++'(PFchannel_id, NFchannel_id, TrUserData);
                          PFchannel_id == undefined -> NFchannel_id;
                          NFchannel_id == undefined -> PFchannel_id
                       end,
                   tree_id =
                       if PFtree_id /= undefined, NFtree_id /= undefined -> 'erlang_++'(PFtree_id, NFtree_id, TrUserData);
                          PFtree_id == undefined -> NFtree_id;
                          NFtree_id == undefined -> PFtree_id
                       end,
                   message = NFmessage}.

-compile({nowarn_unused_function,merge_msg_PermissionDenied/3}).
merge_msg_PermissionDenied(#'PermissionDenied'{permission = PFpermission, channel_id = PFchannel_id, session = PFsession, reason = PFreason, type = PFtype, name = PFname},
                           #'PermissionDenied'{permission = NFpermission, channel_id = NFchannel_id, session = NFsession, reason = NFreason, type = NFtype, name = NFname}, _) ->
    #'PermissionDenied'{permission =
                            if NFpermission =:= undefined -> PFpermission;
                               true -> NFpermission
                            end,
                        channel_id =
                            if NFchannel_id =:= undefined -> PFchannel_id;
                               true -> NFchannel_id
                            end,
                        session =
                            if NFsession =:= undefined -> PFsession;
                               true -> NFsession
                            end,
                        reason =
                            if NFreason =:= undefined -> PFreason;
                               true -> NFreason
                            end,
                        type =
                            if NFtype =:= undefined -> PFtype;
                               true -> NFtype
                            end,
                        name =
                            if NFname =:= undefined -> PFname;
                               true -> NFname
                            end}.

-compile({nowarn_unused_function,'merge_msg_ACL.ChanGroup'/3}).
'merge_msg_ACL.ChanGroup'(#'ACL.ChanGroup'{inherited = PFinherited, inherit = PFinherit, inheritable = PFinheritable, add = PFadd, remove = PFremove, inherited_members = PFinherited_members},
                          #'ACL.ChanGroup'{name = NFname, inherited = NFinherited, inherit = NFinherit, inheritable = NFinheritable, add = NFadd, remove = NFremove, inherited_members = NFinherited_members}, TrUserData) ->
    #'ACL.ChanGroup'{name = NFname,
                     inherited =
                         if NFinherited =:= undefined -> PFinherited;
                            true -> NFinherited
                         end,
                     inherit =
                         if NFinherit =:= undefined -> PFinherit;
                            true -> NFinherit
                         end,
                     inheritable =
                         if NFinheritable =:= undefined -> PFinheritable;
                            true -> NFinheritable
                         end,
                     add =
                         if PFadd /= undefined, NFadd /= undefined -> 'erlang_++'(PFadd, NFadd, TrUserData);
                            PFadd == undefined -> NFadd;
                            NFadd == undefined -> PFadd
                         end,
                     remove =
                         if PFremove /= undefined, NFremove /= undefined -> 'erlang_++'(PFremove, NFremove, TrUserData);
                            PFremove == undefined -> NFremove;
                            NFremove == undefined -> PFremove
                         end,
                     inherited_members =
                         if PFinherited_members /= undefined, NFinherited_members /= undefined -> 'erlang_++'(PFinherited_members, NFinherited_members, TrUserData);
                            PFinherited_members == undefined -> NFinherited_members;
                            NFinherited_members == undefined -> PFinherited_members
                         end}.

-compile({nowarn_unused_function,'merge_msg_ACL.ChanACL'/3}).
'merge_msg_ACL.ChanACL'(#'ACL.ChanACL'{apply_here = PFapply_here, apply_subs = PFapply_subs, inherited = PFinherited, user_id = PFuser_id, group = PFgroup, grant = PFgrant, deny = PFdeny},
                        #'ACL.ChanACL'{apply_here = NFapply_here, apply_subs = NFapply_subs, inherited = NFinherited, user_id = NFuser_id, group = NFgroup, grant = NFgrant, deny = NFdeny}, _) ->
    #'ACL.ChanACL'{apply_here =
                       if NFapply_here =:= undefined -> PFapply_here;
                          true -> NFapply_here
                       end,
                   apply_subs =
                       if NFapply_subs =:= undefined -> PFapply_subs;
                          true -> NFapply_subs
                       end,
                   inherited =
                       if NFinherited =:= undefined -> PFinherited;
                          true -> NFinherited
                       end,
                   user_id =
                       if NFuser_id =:= undefined -> PFuser_id;
                          true -> NFuser_id
                       end,
                   group =
                       if NFgroup =:= undefined -> PFgroup;
                          true -> NFgroup
                       end,
                   grant =
                       if NFgrant =:= undefined -> PFgrant;
                          true -> NFgrant
                       end,
                   deny =
                       if NFdeny =:= undefined -> PFdeny;
                          true -> NFdeny
                       end}.

-compile({nowarn_unused_function,merge_msg_ACL/3}).
merge_msg_ACL(#'ACL'{inherit_acls = PFinherit_acls, groups = PFgroups, acls = PFacls, query = PFquery}, #'ACL'{channel_id = NFchannel_id, inherit_acls = NFinherit_acls, groups = NFgroups, acls = NFacls, query = NFquery}, TrUserData) ->
    #'ACL'{channel_id = NFchannel_id,
           inherit_acls =
               if NFinherit_acls =:= undefined -> PFinherit_acls;
                  true -> NFinherit_acls
               end,
           groups =
               if PFgroups /= undefined, NFgroups /= undefined -> 'erlang_++'(PFgroups, NFgroups, TrUserData);
                  PFgroups == undefined -> NFgroups;
                  NFgroups == undefined -> PFgroups
               end,
           acls =
               if PFacls /= undefined, NFacls /= undefined -> 'erlang_++'(PFacls, NFacls, TrUserData);
                  PFacls == undefined -> NFacls;
                  NFacls == undefined -> PFacls
               end,
           query =
               if NFquery =:= undefined -> PFquery;
                  true -> NFquery
               end}.

-compile({nowarn_unused_function,merge_msg_QueryUsers/3}).
merge_msg_QueryUsers(#'QueryUsers'{ids = PFids, names = PFnames}, #'QueryUsers'{ids = NFids, names = NFnames}, TrUserData) ->
    #'QueryUsers'{ids =
                      if PFids /= undefined, NFids /= undefined -> 'erlang_++'(PFids, NFids, TrUserData);
                         PFids == undefined -> NFids;
                         NFids == undefined -> PFids
                      end,
                  names =
                      if PFnames /= undefined, NFnames /= undefined -> 'erlang_++'(PFnames, NFnames, TrUserData);
                         PFnames == undefined -> NFnames;
                         NFnames == undefined -> PFnames
                      end}.

-compile({nowarn_unused_function,merge_msg_CryptSetup/3}).
merge_msg_CryptSetup(#'CryptSetup'{key = PFkey, client_nonce = PFclient_nonce, server_nonce = PFserver_nonce}, #'CryptSetup'{key = NFkey, client_nonce = NFclient_nonce, server_nonce = NFserver_nonce}, _) ->
    #'CryptSetup'{key =
                      if NFkey =:= undefined -> PFkey;
                         true -> NFkey
                      end,
                  client_nonce =
                      if NFclient_nonce =:= undefined -> PFclient_nonce;
                         true -> NFclient_nonce
                      end,
                  server_nonce =
                      if NFserver_nonce =:= undefined -> PFserver_nonce;
                         true -> NFserver_nonce
                      end}.

-compile({nowarn_unused_function,merge_msg_ContextActionModify/3}).
merge_msg_ContextActionModify(#'ContextActionModify'{text = PFtext, context = PFcontext, operation = PFoperation}, #'ContextActionModify'{action = NFaction, text = NFtext, context = NFcontext, operation = NFoperation}, _) ->
    #'ContextActionModify'{action = NFaction,
                           text =
                               if NFtext =:= undefined -> PFtext;
                                  true -> NFtext
                               end,
                           context =
                               if NFcontext =:= undefined -> PFcontext;
                                  true -> NFcontext
                               end,
                           operation =
                               if NFoperation =:= undefined -> PFoperation;
                                  true -> NFoperation
                               end}.

-compile({nowarn_unused_function,merge_msg_ContextAction/3}).
merge_msg_ContextAction(#'ContextAction'{session = PFsession, channel_id = PFchannel_id}, #'ContextAction'{session = NFsession, channel_id = NFchannel_id, action = NFaction}, _) ->
    #'ContextAction'{session =
                         if NFsession =:= undefined -> PFsession;
                            true -> NFsession
                         end,
                     channel_id =
                         if NFchannel_id =:= undefined -> PFchannel_id;
                            true -> NFchannel_id
                         end,
                     action = NFaction}.

-compile({nowarn_unused_function,'merge_msg_UserList.User'/3}).
'merge_msg_UserList.User'(#'UserList.User'{name = PFname, last_seen = PFlast_seen, last_channel = PFlast_channel}, #'UserList.User'{user_id = NFuser_id, name = NFname, last_seen = NFlast_seen, last_channel = NFlast_channel}, _) ->
    #'UserList.User'{user_id = NFuser_id,
                     name =
                         if NFname =:= undefined -> PFname;
                            true -> NFname
                         end,
                     last_seen =
                         if NFlast_seen =:= undefined -> PFlast_seen;
                            true -> NFlast_seen
                         end,
                     last_channel =
                         if NFlast_channel =:= undefined -> PFlast_channel;
                            true -> NFlast_channel
                         end}.

-compile({nowarn_unused_function,merge_msg_UserList/3}).
merge_msg_UserList(#'UserList'{users = PFusers}, #'UserList'{users = NFusers}, TrUserData) ->
    #'UserList'{users =
                    if PFusers /= undefined, NFusers /= undefined -> 'erlang_++'(PFusers, NFusers, TrUserData);
                       PFusers == undefined -> NFusers;
                       NFusers == undefined -> PFusers
                    end}.

-compile({nowarn_unused_function,'merge_msg_VoiceTarget.Target'/3}).
'merge_msg_VoiceTarget.Target'(#'VoiceTarget.Target'{session = PFsession, channel_id = PFchannel_id, group = PFgroup, links = PFlinks, children = PFchildren},
                               #'VoiceTarget.Target'{session = NFsession, channel_id = NFchannel_id, group = NFgroup, links = NFlinks, children = NFchildren}, TrUserData) ->
    #'VoiceTarget.Target'{session =
                              if PFsession /= undefined, NFsession /= undefined -> 'erlang_++'(PFsession, NFsession, TrUserData);
                                 PFsession == undefined -> NFsession;
                                 NFsession == undefined -> PFsession
                              end,
                          channel_id =
                              if NFchannel_id =:= undefined -> PFchannel_id;
                                 true -> NFchannel_id
                              end,
                          group =
                              if NFgroup =:= undefined -> PFgroup;
                                 true -> NFgroup
                              end,
                          links =
                              if NFlinks =:= undefined -> PFlinks;
                                 true -> NFlinks
                              end,
                          children =
                              if NFchildren =:= undefined -> PFchildren;
                                 true -> NFchildren
                              end}.

-compile({nowarn_unused_function,merge_msg_VoiceTarget/3}).
merge_msg_VoiceTarget(#'VoiceTarget'{id = PFid, targets = PFtargets}, #'VoiceTarget'{id = NFid, targets = NFtargets}, TrUserData) ->
    #'VoiceTarget'{id =
                       if NFid =:= undefined -> PFid;
                          true -> NFid
                       end,
                   targets =
                       if PFtargets /= undefined, NFtargets /= undefined -> 'erlang_++'(PFtargets, NFtargets, TrUserData);
                          PFtargets == undefined -> NFtargets;
                          NFtargets == undefined -> PFtargets
                       end}.

-compile({nowarn_unused_function,merge_msg_PermissionQuery/3}).
merge_msg_PermissionQuery(#'PermissionQuery'{channel_id = PFchannel_id, permissions = PFpermissions, flush = PFflush}, #'PermissionQuery'{channel_id = NFchannel_id, permissions = NFpermissions, flush = NFflush}, _) ->
    #'PermissionQuery'{channel_id =
                           if NFchannel_id =:= undefined -> PFchannel_id;
                              true -> NFchannel_id
                           end,
                       permissions =
                           if NFpermissions =:= undefined -> PFpermissions;
                              true -> NFpermissions
                           end,
                       flush =
                           if NFflush =:= undefined -> PFflush;
                              true -> NFflush
                           end}.

-compile({nowarn_unused_function,merge_msg_CodecVersion/3}).
merge_msg_CodecVersion(#'CodecVersion'{opus = PFopus}, #'CodecVersion'{alpha = NFalpha, beta = NFbeta, prefer_alpha = NFprefer_alpha, opus = NFopus}, _) ->
    #'CodecVersion'{alpha = NFalpha, beta = NFbeta, prefer_alpha = NFprefer_alpha,
                    opus =
                        if NFopus =:= undefined -> PFopus;
                           true -> NFopus
                        end}.

-compile({nowarn_unused_function,'merge_msg_UserStats.Stats'/3}).
'merge_msg_UserStats.Stats'(#'UserStats.Stats'{good = PFgood, late = PFlate, lost = PFlost, resync = PFresync}, #'UserStats.Stats'{good = NFgood, late = NFlate, lost = NFlost, resync = NFresync}, _) ->
    #'UserStats.Stats'{good =
                           if NFgood =:= undefined -> PFgood;
                              true -> NFgood
                           end,
                       late =
                           if NFlate =:= undefined -> PFlate;
                              true -> NFlate
                           end,
                       lost =
                           if NFlost =:= undefined -> PFlost;
                              true -> NFlost
                           end,
                       resync =
                           if NFresync =:= undefined -> PFresync;
                              true -> NFresync
                           end}.

-compile({nowarn_unused_function,merge_msg_UserStats/3}).
merge_msg_UserStats(#'UserStats'{session = PFsession, stats_only = PFstats_only, certificates = PFcertificates, from_client = PFfrom_client, from_server = PFfrom_server, udp_packets = PFudp_packets, tcp_packets = PFtcp_packets,
                                 udp_ping_avg = PFudp_ping_avg, udp_ping_var = PFudp_ping_var, tcp_ping_avg = PFtcp_ping_avg, tcp_ping_var = PFtcp_ping_var, version = PFversion, celt_versions = PFcelt_versions, address = PFaddress, bandwidth = PFbandwidth, onlinesecs = PFonlinesecs,
                                 idlesecs = PFidlesecs, strong_certificate = PFstrong_certificate, opus = PFopus},
                    #'UserStats'{session = NFsession, stats_only = NFstats_only, certificates = NFcertificates, from_client = NFfrom_client, from_server = NFfrom_server, udp_packets = NFudp_packets, tcp_packets = NFtcp_packets, udp_ping_avg = NFudp_ping_avg,
                                 udp_ping_var = NFudp_ping_var, tcp_ping_avg = NFtcp_ping_avg, tcp_ping_var = NFtcp_ping_var, version = NFversion, celt_versions = NFcelt_versions, address = NFaddress, bandwidth = NFbandwidth, onlinesecs = NFonlinesecs, idlesecs = NFidlesecs,
                                 strong_certificate = NFstrong_certificate, opus = NFopus},
                    TrUserData) ->
    #'UserStats'{session =
                     if NFsession =:= undefined -> PFsession;
                        true -> NFsession
                     end,
                 stats_only =
                     if NFstats_only =:= undefined -> PFstats_only;
                        true -> NFstats_only
                     end,
                 certificates =
                     if PFcertificates /= undefined, NFcertificates /= undefined -> 'erlang_++'(PFcertificates, NFcertificates, TrUserData);
                        PFcertificates == undefined -> NFcertificates;
                        NFcertificates == undefined -> PFcertificates
                     end,
                 from_client =
                     if PFfrom_client /= undefined, NFfrom_client /= undefined -> 'merge_msg_UserStats.Stats'(PFfrom_client, NFfrom_client, TrUserData);
                        PFfrom_client == undefined -> NFfrom_client;
                        NFfrom_client == undefined -> PFfrom_client
                     end,
                 from_server =
                     if PFfrom_server /= undefined, NFfrom_server /= undefined -> 'merge_msg_UserStats.Stats'(PFfrom_server, NFfrom_server, TrUserData);
                        PFfrom_server == undefined -> NFfrom_server;
                        NFfrom_server == undefined -> PFfrom_server
                     end,
                 udp_packets =
                     if NFudp_packets =:= undefined -> PFudp_packets;
                        true -> NFudp_packets
                     end,
                 tcp_packets =
                     if NFtcp_packets =:= undefined -> PFtcp_packets;
                        true -> NFtcp_packets
                     end,
                 udp_ping_avg =
                     if NFudp_ping_avg =:= undefined -> PFudp_ping_avg;
                        true -> NFudp_ping_avg
                     end,
                 udp_ping_var =
                     if NFudp_ping_var =:= undefined -> PFudp_ping_var;
                        true -> NFudp_ping_var
                     end,
                 tcp_ping_avg =
                     if NFtcp_ping_avg =:= undefined -> PFtcp_ping_avg;
                        true -> NFtcp_ping_avg
                     end,
                 tcp_ping_var =
                     if NFtcp_ping_var =:= undefined -> PFtcp_ping_var;
                        true -> NFtcp_ping_var
                     end,
                 version =
                     if PFversion /= undefined, NFversion /= undefined -> merge_msg_Version(PFversion, NFversion, TrUserData);
                        PFversion == undefined -> NFversion;
                        NFversion == undefined -> PFversion
                     end,
                 celt_versions =
                     if PFcelt_versions /= undefined, NFcelt_versions /= undefined -> 'erlang_++'(PFcelt_versions, NFcelt_versions, TrUserData);
                        PFcelt_versions == undefined -> NFcelt_versions;
                        NFcelt_versions == undefined -> PFcelt_versions
                     end,
                 address =
                     if NFaddress =:= undefined -> PFaddress;
                        true -> NFaddress
                     end,
                 bandwidth =
                     if NFbandwidth =:= undefined -> PFbandwidth;
                        true -> NFbandwidth
                     end,
                 onlinesecs =
                     if NFonlinesecs =:= undefined -> PFonlinesecs;
                        true -> NFonlinesecs
                     end,
                 idlesecs =
                     if NFidlesecs =:= undefined -> PFidlesecs;
                        true -> NFidlesecs
                     end,
                 strong_certificate =
                     if NFstrong_certificate =:= undefined -> PFstrong_certificate;
                        true -> NFstrong_certificate
                     end,
                 opus =
                     if NFopus =:= undefined -> PFopus;
                        true -> NFopus
                     end}.

-compile({nowarn_unused_function,merge_msg_RequestBlob/3}).
merge_msg_RequestBlob(#'RequestBlob'{session_texture = PFsession_texture, session_comment = PFsession_comment, channel_description = PFchannel_description},
                      #'RequestBlob'{session_texture = NFsession_texture, session_comment = NFsession_comment, channel_description = NFchannel_description}, TrUserData) ->
    #'RequestBlob'{session_texture =
                       if PFsession_texture /= undefined, NFsession_texture /= undefined -> 'erlang_++'(PFsession_texture, NFsession_texture, TrUserData);
                          PFsession_texture == undefined -> NFsession_texture;
                          NFsession_texture == undefined -> PFsession_texture
                       end,
                   session_comment =
                       if PFsession_comment /= undefined, NFsession_comment /= undefined -> 'erlang_++'(PFsession_comment, NFsession_comment, TrUserData);
                          PFsession_comment == undefined -> NFsession_comment;
                          NFsession_comment == undefined -> PFsession_comment
                       end,
                   channel_description =
                       if PFchannel_description /= undefined, NFchannel_description /= undefined -> 'erlang_++'(PFchannel_description, NFchannel_description, TrUserData);
                          PFchannel_description == undefined -> NFchannel_description;
                          NFchannel_description == undefined -> PFchannel_description
                       end}.

-compile({nowarn_unused_function,merge_msg_ServerConfig/3}).
merge_msg_ServerConfig(#'ServerConfig'{max_bandwidth = PFmax_bandwidth, welcome_text = PFwelcome_text, allow_html = PFallow_html, message_length = PFmessage_length, image_message_length = PFimage_message_length, max_users = PFmax_users,
                                       recording_allowed = PFrecording_allowed},
                       #'ServerConfig'{max_bandwidth = NFmax_bandwidth, welcome_text = NFwelcome_text, allow_html = NFallow_html, message_length = NFmessage_length, image_message_length = NFimage_message_length, max_users = NFmax_users,
                                       recording_allowed = NFrecording_allowed},
                       _) ->
    #'ServerConfig'{max_bandwidth =
                        if NFmax_bandwidth =:= undefined -> PFmax_bandwidth;
                           true -> NFmax_bandwidth
                        end,
                    welcome_text =
                        if NFwelcome_text =:= undefined -> PFwelcome_text;
                           true -> NFwelcome_text
                        end,
                    allow_html =
                        if NFallow_html =:= undefined -> PFallow_html;
                           true -> NFallow_html
                        end,
                    message_length =
                        if NFmessage_length =:= undefined -> PFmessage_length;
                           true -> NFmessage_length
                        end,
                    image_message_length =
                        if NFimage_message_length =:= undefined -> PFimage_message_length;
                           true -> NFimage_message_length
                        end,
                    max_users =
                        if NFmax_users =:= undefined -> PFmax_users;
                           true -> NFmax_users
                        end,
                    recording_allowed =
                        if NFrecording_allowed =:= undefined -> PFrecording_allowed;
                           true -> NFrecording_allowed
                        end}.

-compile({nowarn_unused_function,merge_msg_SuggestConfig/3}).
merge_msg_SuggestConfig(#'SuggestConfig'{version_v1 = PFversion_v1, version_v2 = PFversion_v2, positional = PFpositional, push_to_talk = PFpush_to_talk},
                        #'SuggestConfig'{version_v1 = NFversion_v1, version_v2 = NFversion_v2, positional = NFpositional, push_to_talk = NFpush_to_talk}, _) ->
    #'SuggestConfig'{version_v1 =
                         if NFversion_v1 =:= undefined -> PFversion_v1;
                            true -> NFversion_v1
                         end,
                     version_v2 =
                         if NFversion_v2 =:= undefined -> PFversion_v2;
                            true -> NFversion_v2
                         end,
                     positional =
                         if NFpositional =:= undefined -> PFpositional;
                            true -> NFpositional
                         end,
                     push_to_talk =
                         if NFpush_to_talk =:= undefined -> PFpush_to_talk;
                            true -> NFpush_to_talk
                         end}.

-compile({nowarn_unused_function,merge_msg_PluginDataTransmission/3}).
merge_msg_PluginDataTransmission(#'PluginDataTransmission'{senderSession = PFsenderSession, receiverSessions = PFreceiverSessions, data = PFdata, dataID = PFdataID},
                                 #'PluginDataTransmission'{senderSession = NFsenderSession, receiverSessions = NFreceiverSessions, data = NFdata, dataID = NFdataID}, TrUserData) ->
    #'PluginDataTransmission'{senderSession =
                                  if NFsenderSession =:= undefined -> PFsenderSession;
                                     true -> NFsenderSession
                                  end,
                              receiverSessions =
                                  if PFreceiverSessions /= undefined, NFreceiverSessions /= undefined -> 'erlang_++'(PFreceiverSessions, NFreceiverSessions, TrUserData);
                                     PFreceiverSessions == undefined -> NFreceiverSessions;
                                     NFreceiverSessions == undefined -> PFreceiverSessions
                                  end,
                              data =
                                  if NFdata =:= undefined -> PFdata;
                                     true -> NFdata
                                  end,
                              dataID =
                                  if NFdataID =:= undefined -> PFdataID;
                                     true -> NFdataID
                                  end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Version' -> v_msg_Version(Msg, [MsgName], TrUserData);
        'UDPTunnel' -> v_msg_UDPTunnel(Msg, [MsgName], TrUserData);
        'Authenticate' -> v_msg_Authenticate(Msg, [MsgName], TrUserData);
        'Ping' -> v_msg_Ping(Msg, [MsgName], TrUserData);
        'Reject' -> v_msg_Reject(Msg, [MsgName], TrUserData);
        'ServerSync' -> v_msg_ServerSync(Msg, [MsgName], TrUserData);
        'ChannelRemove' -> v_msg_ChannelRemove(Msg, [MsgName], TrUserData);
        'ChannelState' -> v_msg_ChannelState(Msg, [MsgName], TrUserData);
        'UserRemove' -> v_msg_UserRemove(Msg, [MsgName], TrUserData);
        'UserState.VolumeAdjustment' -> 'v_msg_UserState.VolumeAdjustment'(Msg, [MsgName], TrUserData);
        'UserState' -> v_msg_UserState(Msg, [MsgName], TrUserData);
        'BanList.BanEntry' -> 'v_msg_BanList.BanEntry'(Msg, [MsgName], TrUserData);
        'BanList' -> v_msg_BanList(Msg, [MsgName], TrUserData);
        'TextMessage' -> v_msg_TextMessage(Msg, [MsgName], TrUserData);
        'PermissionDenied' -> v_msg_PermissionDenied(Msg, [MsgName], TrUserData);
        'ACL.ChanGroup' -> 'v_msg_ACL.ChanGroup'(Msg, [MsgName], TrUserData);
        'ACL.ChanACL' -> 'v_msg_ACL.ChanACL'(Msg, [MsgName], TrUserData);
        'ACL' -> v_msg_ACL(Msg, [MsgName], TrUserData);
        'QueryUsers' -> v_msg_QueryUsers(Msg, [MsgName], TrUserData);
        'CryptSetup' -> v_msg_CryptSetup(Msg, [MsgName], TrUserData);
        'ContextActionModify' -> v_msg_ContextActionModify(Msg, [MsgName], TrUserData);
        'ContextAction' -> v_msg_ContextAction(Msg, [MsgName], TrUserData);
        'UserList.User' -> 'v_msg_UserList.User'(Msg, [MsgName], TrUserData);
        'UserList' -> v_msg_UserList(Msg, [MsgName], TrUserData);
        'VoiceTarget.Target' -> 'v_msg_VoiceTarget.Target'(Msg, [MsgName], TrUserData);
        'VoiceTarget' -> v_msg_VoiceTarget(Msg, [MsgName], TrUserData);
        'PermissionQuery' -> v_msg_PermissionQuery(Msg, [MsgName], TrUserData);
        'CodecVersion' -> v_msg_CodecVersion(Msg, [MsgName], TrUserData);
        'UserStats.Stats' -> 'v_msg_UserStats.Stats'(Msg, [MsgName], TrUserData);
        'UserStats' -> v_msg_UserStats(Msg, [MsgName], TrUserData);
        'RequestBlob' -> v_msg_RequestBlob(Msg, [MsgName], TrUserData);
        'ServerConfig' -> v_msg_ServerConfig(Msg, [MsgName], TrUserData);
        'SuggestConfig' -> v_msg_SuggestConfig(Msg, [MsgName], TrUserData);
        'PluginDataTransmission' -> v_msg_PluginDataTransmission(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_submsg_Version/3}).
-dialyzer({nowarn_function,v_submsg_Version/3}).
v_submsg_Version(Msg, Path, TrUserData) -> v_msg_Version(Msg, Path, TrUserData).

-compile({nowarn_unused_function,v_msg_Version/3}).
-dialyzer({nowarn_function,v_msg_Version/3}).
v_msg_Version(#'Version'{version_v1 = F1, version_v2 = F2, release = F3, os = F4, os_version = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [version_v1 | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [version_v2 | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [release | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [os | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [os_version | Path], TrUserData)
    end,
    ok;
v_msg_Version(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Version'}, X, Path).

-compile({nowarn_unused_function,v_msg_UDPTunnel/3}).
-dialyzer({nowarn_function,v_msg_UDPTunnel/3}).
v_msg_UDPTunnel(#'UDPTunnel'{packet = F1}, Path, TrUserData) ->
    v_type_bytes(F1, [packet | Path], TrUserData),
    ok;
v_msg_UDPTunnel(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UDPTunnel'}, X, Path).

-compile({nowarn_unused_function,v_msg_Authenticate/3}).
-dialyzer({nowarn_function,v_msg_Authenticate/3}).
v_msg_Authenticate(#'Authenticate'{username = F1, password = F2, tokens = F3, celt_versions = F4, opus = F5, client_type = F6}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [username | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [password | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_type_string(Elem, [tokens | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F3, [tokens | Path])
    end,
    if is_list(F4) ->
           _ = [v_type_int32(Elem, [celt_versions | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, int32}, F4, [celt_versions | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [opus | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [client_type | Path], TrUserData)
    end,
    ok;
v_msg_Authenticate(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Authenticate'}, X, Path).

-compile({nowarn_unused_function,v_msg_Ping/3}).
-dialyzer({nowarn_function,v_msg_Ping/3}).
v_msg_Ping(#'Ping'{timestamp = F1, good = F2, late = F3, lost = F4, resync = F5, udp_packets = F6, tcp_packets = F7, udp_ping_avg = F8, udp_ping_var = F9, tcp_ping_avg = F10, tcp_ping_var = F11}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [timestamp | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [good | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [late | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [lost | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [resync | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [udp_packets | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [tcp_packets | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [udp_ping_avg | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_float(F9, [udp_ping_var | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_float(F10, [tcp_ping_avg | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_float(F11, [tcp_ping_var | Path], TrUserData)
    end,
    ok;
v_msg_Ping(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Ping'}, X, Path).

-compile({nowarn_unused_function,v_msg_Reject/3}).
-dialyzer({nowarn_function,v_msg_Reject/3}).
v_msg_Reject(#'Reject'{type = F1, reason = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_Reject.RejectType'(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [reason | Path], TrUserData)
    end,
    ok;
v_msg_Reject(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Reject'}, X, Path).

-compile({nowarn_unused_function,v_msg_ServerSync/3}).
-dialyzer({nowarn_function,v_msg_ServerSync/3}).
v_msg_ServerSync(#'ServerSync'{session = F1, max_bandwidth = F2, welcome_text = F3, permissions = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [session | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [max_bandwidth | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [welcome_text | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [permissions | Path], TrUserData)
    end,
    ok;
v_msg_ServerSync(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ServerSync'}, X, Path).

-compile({nowarn_unused_function,v_msg_ChannelRemove/3}).
-dialyzer({nowarn_function,v_msg_ChannelRemove/3}).
v_msg_ChannelRemove(#'ChannelRemove'{channel_id = F1}, Path, TrUserData) ->
    v_type_uint32(F1, [channel_id | Path], TrUserData),
    ok;
v_msg_ChannelRemove(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ChannelRemove'}, X, Path).

-compile({nowarn_unused_function,v_msg_ChannelState/3}).
-dialyzer({nowarn_function,v_msg_ChannelState/3}).
v_msg_ChannelState(#'ChannelState'{channel_id = F1, parent = F2, name = F3, links = F4, description = F5, links_add = F6, links_remove = F7, temporary = F8, position = F9, description_hash = F10, max_users = F11, is_enter_restricted = F12,
                                   can_enter = F13},
                   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [channel_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [parent | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path], TrUserData)
    end,
    if is_list(F4) ->
           _ = [v_type_uint32(Elem, [links | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F4, [links | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [description | Path], TrUserData)
    end,
    if is_list(F6) ->
           _ = [v_type_uint32(Elem, [links_add | Path], TrUserData) || Elem <- F6],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F6, [links_add | Path])
    end,
    if is_list(F7) ->
           _ = [v_type_uint32(Elem, [links_remove | Path], TrUserData) || Elem <- F7],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F7, [links_remove | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [temporary | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_int32(F9, [position | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [description_hash | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint32(F11, [max_users | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_bool(F12, [is_enter_restricted | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_bool(F13, [can_enter | Path], TrUserData)
    end,
    ok;
v_msg_ChannelState(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ChannelState'}, X, Path).

-compile({nowarn_unused_function,v_msg_UserRemove/3}).
-dialyzer({nowarn_function,v_msg_UserRemove/3}).
v_msg_UserRemove(#'UserRemove'{session = F1, actor = F2, reason = F3, ban = F4}, Path, TrUserData) ->
    v_type_uint32(F1, [session | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [actor | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [reason | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [ban | Path], TrUserData)
    end,
    ok;
v_msg_UserRemove(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserRemove'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_UserState.VolumeAdjustment'/3}).
-dialyzer({nowarn_function,'v_submsg_UserState.VolumeAdjustment'/3}).
'v_submsg_UserState.VolumeAdjustment'(Msg, Path, TrUserData) -> 'v_msg_UserState.VolumeAdjustment'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_UserState.VolumeAdjustment'/3}).
-dialyzer({nowarn_function,'v_msg_UserState.VolumeAdjustment'/3}).
'v_msg_UserState.VolumeAdjustment'(#'UserState.VolumeAdjustment'{listening_channel = F1, volume_adjustment = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [listening_channel | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_float(F2, [volume_adjustment | Path], TrUserData)
    end,
    ok;
'v_msg_UserState.VolumeAdjustment'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserState.VolumeAdjustment'}, X, Path).

-compile({nowarn_unused_function,v_msg_UserState/3}).
-dialyzer({nowarn_function,v_msg_UserState/3}).
v_msg_UserState(#'UserState'{session = F1, actor = F2, name = F3, user_id = F4, channel_id = F5, mute = F6, deaf = F7, suppress = F8, self_mute = F9, self_deaf = F10, texture = F11, plugin_context = F12, plugin_identity = F13, comment = F14,
                             hash = F15, comment_hash = F16, texture_hash = F17, priority_speaker = F18, recording = F19, temporary_access_tokens = F20, listening_channel_add = F21, listening_channel_remove = F22, listening_volume_adjustment = F23},
                Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [session | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [actor | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [user_id | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [channel_id | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [mute | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [deaf | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [suppress | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_bool(F9, [self_mute | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_bool(F10, [self_deaf | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_bytes(F11, [texture | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_bytes(F12, [plugin_context | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_string(F13, [plugin_identity | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true -> v_type_string(F14, [comment | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true -> v_type_string(F15, [hash | Path], TrUserData)
    end,
    if F16 == undefined -> ok;
       true -> v_type_bytes(F16, [comment_hash | Path], TrUserData)
    end,
    if F17 == undefined -> ok;
       true -> v_type_bytes(F17, [texture_hash | Path], TrUserData)
    end,
    if F18 == undefined -> ok;
       true -> v_type_bool(F18, [priority_speaker | Path], TrUserData)
    end,
    if F19 == undefined -> ok;
       true -> v_type_bool(F19, [recording | Path], TrUserData)
    end,
    if is_list(F20) ->
           _ = [v_type_string(Elem, [temporary_access_tokens | Path], TrUserData) || Elem <- F20],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F20, [temporary_access_tokens | Path])
    end,
    if is_list(F21) ->
           _ = [v_type_uint32(Elem, [listening_channel_add | Path], TrUserData) || Elem <- F21],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F21, [listening_channel_add | Path])
    end,
    if is_list(F22) ->
           _ = [v_type_uint32(Elem, [listening_channel_remove | Path], TrUserData) || Elem <- F22],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F22, [listening_channel_remove | Path])
    end,
    if is_list(F23) ->
           _ = ['v_submsg_UserState.VolumeAdjustment'(Elem, [listening_volume_adjustment | Path], TrUserData) || Elem <- F23],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'UserState.VolumeAdjustment'}}, F23, [listening_volume_adjustment | Path])
    end,
    ok;
v_msg_UserState(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserState'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_BanList.BanEntry'/3}).
-dialyzer({nowarn_function,'v_submsg_BanList.BanEntry'/3}).
'v_submsg_BanList.BanEntry'(Msg, Path, TrUserData) -> 'v_msg_BanList.BanEntry'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_BanList.BanEntry'/3}).
-dialyzer({nowarn_function,'v_msg_BanList.BanEntry'/3}).
'v_msg_BanList.BanEntry'(#'BanList.BanEntry'{address = F1, mask = F2, name = F3, hash = F4, reason = F5, start = F6, duration = F7}, Path, TrUserData) ->
    v_type_bytes(F1, [address | Path], TrUserData),
    v_type_uint32(F2, [mask | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [hash | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [reason | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [start | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [duration | Path], TrUserData)
    end,
    ok;
'v_msg_BanList.BanEntry'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BanList.BanEntry'}, X, Path).

-compile({nowarn_unused_function,v_msg_BanList/3}).
-dialyzer({nowarn_function,v_msg_BanList/3}).
v_msg_BanList(#'BanList'{bans = F1, query = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = ['v_submsg_BanList.BanEntry'(Elem, [bans | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'BanList.BanEntry'}}, F1, [bans | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [query | Path], TrUserData)
    end,
    ok;
v_msg_BanList(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'BanList'}, X, Path).

-compile({nowarn_unused_function,v_msg_TextMessage/3}).
-dialyzer({nowarn_function,v_msg_TextMessage/3}).
v_msg_TextMessage(#'TextMessage'{actor = F1, session = F2, channel_id = F3, tree_id = F4, message = F5}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [actor | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = [v_type_uint32(Elem, [session | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F2, [session | Path])
    end,
    if is_list(F3) ->
           _ = [v_type_uint32(Elem, [channel_id | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F3, [channel_id | Path])
    end,
    if is_list(F4) ->
           _ = [v_type_uint32(Elem, [tree_id | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F4, [tree_id | Path])
    end,
    v_type_string(F5, [message | Path], TrUserData),
    ok;
v_msg_TextMessage(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TextMessage'}, X, Path).

-compile({nowarn_unused_function,v_msg_PermissionDenied/3}).
-dialyzer({nowarn_function,v_msg_PermissionDenied/3}).
v_msg_PermissionDenied(#'PermissionDenied'{permission = F1, channel_id = F2, session = F3, reason = F4, type = F5, name = F6}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [permission | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [channel_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [session | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [reason | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> 'v_enum_PermissionDenied.DenyType'(F5, [type | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [name | Path], TrUserData)
    end,
    ok;
v_msg_PermissionDenied(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PermissionDenied'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_ACL.ChanGroup'/3}).
-dialyzer({nowarn_function,'v_submsg_ACL.ChanGroup'/3}).
'v_submsg_ACL.ChanGroup'(Msg, Path, TrUserData) -> 'v_msg_ACL.ChanGroup'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_ACL.ChanGroup'/3}).
-dialyzer({nowarn_function,'v_msg_ACL.ChanGroup'/3}).
'v_msg_ACL.ChanGroup'(#'ACL.ChanGroup'{name = F1, inherited = F2, inherit = F3, inheritable = F4, add = F5, remove = F6, inherited_members = F7}, Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [inherited | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [inherit | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [inheritable | Path], TrUserData)
    end,
    if is_list(F5) ->
           _ = [v_type_uint32(Elem, [add | Path], TrUserData) || Elem <- F5],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F5, [add | Path])
    end,
    if is_list(F6) ->
           _ = [v_type_uint32(Elem, [remove | Path], TrUserData) || Elem <- F6],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F6, [remove | Path])
    end,
    if is_list(F7) ->
           _ = [v_type_uint32(Elem, [inherited_members | Path], TrUserData) || Elem <- F7],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F7, [inherited_members | Path])
    end,
    ok;
'v_msg_ACL.ChanGroup'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ACL.ChanGroup'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_ACL.ChanACL'/3}).
-dialyzer({nowarn_function,'v_submsg_ACL.ChanACL'/3}).
'v_submsg_ACL.ChanACL'(Msg, Path, TrUserData) -> 'v_msg_ACL.ChanACL'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_ACL.ChanACL'/3}).
-dialyzer({nowarn_function,'v_msg_ACL.ChanACL'/3}).
'v_msg_ACL.ChanACL'(#'ACL.ChanACL'{apply_here = F1, apply_subs = F2, inherited = F3, user_id = F4, group = F5, grant = F6, deny = F7}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [apply_here | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [apply_subs | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [inherited | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [user_id | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [group | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [grant | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [deny | Path], TrUserData)
    end,
    ok;
'v_msg_ACL.ChanACL'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ACL.ChanACL'}, X, Path).

-compile({nowarn_unused_function,v_msg_ACL/3}).
-dialyzer({nowarn_function,v_msg_ACL/3}).
v_msg_ACL(#'ACL'{channel_id = F1, inherit_acls = F2, groups = F3, acls = F4, query = F5}, Path, TrUserData) ->
    v_type_uint32(F1, [channel_id | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [inherit_acls | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = ['v_submsg_ACL.ChanGroup'(Elem, [groups | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'ACL.ChanGroup'}}, F3, [groups | Path])
    end,
    if is_list(F4) ->
           _ = ['v_submsg_ACL.ChanACL'(Elem, [acls | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'ACL.ChanACL'}}, F4, [acls | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [query | Path], TrUserData)
    end,
    ok;
v_msg_ACL(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ACL'}, X, Path).

-compile({nowarn_unused_function,v_msg_QueryUsers/3}).
-dialyzer({nowarn_function,v_msg_QueryUsers/3}).
v_msg_QueryUsers(#'QueryUsers'{ids = F1, names = F2}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_uint32(Elem, [ids | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F1, [ids | Path])
    end,
    if is_list(F2) ->
           _ = [v_type_string(Elem, [names | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F2, [names | Path])
    end,
    ok;
v_msg_QueryUsers(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'QueryUsers'}, X, Path).

-compile({nowarn_unused_function,v_msg_CryptSetup/3}).
-dialyzer({nowarn_function,v_msg_CryptSetup/3}).
v_msg_CryptSetup(#'CryptSetup'{key = F1, client_nonce = F2, server_nonce = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [client_nonce | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [server_nonce | Path], TrUserData)
    end,
    ok;
v_msg_CryptSetup(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CryptSetup'}, X, Path).

-compile({nowarn_unused_function,v_msg_ContextActionModify/3}).
-dialyzer({nowarn_function,v_msg_ContextActionModify/3}).
v_msg_ContextActionModify(#'ContextActionModify'{action = F1, text = F2, context = F3, operation = F4}, Path, TrUserData) ->
    v_type_string(F1, [action | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [text | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [context | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> 'v_enum_ContextActionModify.Operation'(F4, [operation | Path], TrUserData)
    end,
    ok;
v_msg_ContextActionModify(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ContextActionModify'}, X, Path).

-compile({nowarn_unused_function,v_msg_ContextAction/3}).
-dialyzer({nowarn_function,v_msg_ContextAction/3}).
v_msg_ContextAction(#'ContextAction'{session = F1, channel_id = F2, action = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [session | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [channel_id | Path], TrUserData)
    end,
    v_type_string(F3, [action | Path], TrUserData),
    ok;
v_msg_ContextAction(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ContextAction'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_UserList.User'/3}).
-dialyzer({nowarn_function,'v_submsg_UserList.User'/3}).
'v_submsg_UserList.User'(Msg, Path, TrUserData) -> 'v_msg_UserList.User'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_UserList.User'/3}).
-dialyzer({nowarn_function,'v_msg_UserList.User'/3}).
'v_msg_UserList.User'(#'UserList.User'{user_id = F1, name = F2, last_seen = F3, last_channel = F4}, Path, TrUserData) ->
    v_type_uint32(F1, [user_id | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [last_seen | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [last_channel | Path], TrUserData)
    end,
    ok;
'v_msg_UserList.User'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserList.User'}, X, Path).

-compile({nowarn_unused_function,v_msg_UserList/3}).
-dialyzer({nowarn_function,v_msg_UserList/3}).
v_msg_UserList(#'UserList'{users = F1}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = ['v_submsg_UserList.User'(Elem, [users | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'UserList.User'}}, F1, [users | Path])
    end,
    ok;
v_msg_UserList(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserList'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_VoiceTarget.Target'/3}).
-dialyzer({nowarn_function,'v_submsg_VoiceTarget.Target'/3}).
'v_submsg_VoiceTarget.Target'(Msg, Path, TrUserData) -> 'v_msg_VoiceTarget.Target'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_VoiceTarget.Target'/3}).
-dialyzer({nowarn_function,'v_msg_VoiceTarget.Target'/3}).
'v_msg_VoiceTarget.Target'(#'VoiceTarget.Target'{session = F1, channel_id = F2, group = F3, links = F4, children = F5}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_uint32(Elem, [session | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F1, [session | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [channel_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [group | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [links | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [children | Path], TrUserData)
    end,
    ok;
'v_msg_VoiceTarget.Target'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'VoiceTarget.Target'}, X, Path).

-compile({nowarn_unused_function,v_msg_VoiceTarget/3}).
-dialyzer({nowarn_function,v_msg_VoiceTarget/3}).
v_msg_VoiceTarget(#'VoiceTarget'{id = F1, targets = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [id | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = ['v_submsg_VoiceTarget.Target'(Elem, [targets | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, {msg, 'VoiceTarget.Target'}}, F2, [targets | Path])
    end,
    ok;
v_msg_VoiceTarget(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'VoiceTarget'}, X, Path).

-compile({nowarn_unused_function,v_msg_PermissionQuery/3}).
-dialyzer({nowarn_function,v_msg_PermissionQuery/3}).
v_msg_PermissionQuery(#'PermissionQuery'{channel_id = F1, permissions = F2, flush = F3}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [channel_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [permissions | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [flush | Path], TrUserData)
    end,
    ok;
v_msg_PermissionQuery(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PermissionQuery'}, X, Path).

-compile({nowarn_unused_function,v_msg_CodecVersion/3}).
-dialyzer({nowarn_function,v_msg_CodecVersion/3}).
v_msg_CodecVersion(#'CodecVersion'{alpha = F1, beta = F2, prefer_alpha = F3, opus = F4}, Path, TrUserData) ->
    v_type_int32(F1, [alpha | Path], TrUserData),
    v_type_int32(F2, [beta | Path], TrUserData),
    v_type_bool(F3, [prefer_alpha | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [opus | Path], TrUserData)
    end,
    ok;
v_msg_CodecVersion(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'CodecVersion'}, X, Path).

-compile({nowarn_unused_function,'v_submsg_UserStats.Stats'/3}).
-dialyzer({nowarn_function,'v_submsg_UserStats.Stats'/3}).
'v_submsg_UserStats.Stats'(Msg, Path, TrUserData) -> 'v_msg_UserStats.Stats'(Msg, Path, TrUserData).

-compile({nowarn_unused_function,'v_msg_UserStats.Stats'/3}).
-dialyzer({nowarn_function,'v_msg_UserStats.Stats'/3}).
'v_msg_UserStats.Stats'(#'UserStats.Stats'{good = F1, late = F2, lost = F3, resync = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [good | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [late | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [lost | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [resync | Path], TrUserData)
    end,
    ok;
'v_msg_UserStats.Stats'(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserStats.Stats'}, X, Path).

-compile({nowarn_unused_function,v_msg_UserStats/3}).
-dialyzer({nowarn_function,v_msg_UserStats/3}).
v_msg_UserStats(#'UserStats'{session = F1, stats_only = F2, certificates = F3, from_client = F4, from_server = F5, udp_packets = F6, tcp_packets = F7, udp_ping_avg = F8, udp_ping_var = F9, tcp_ping_avg = F10, tcp_ping_var = F11, version = F12,
                             celt_versions = F13, address = F14, bandwidth = F15, onlinesecs = F16, idlesecs = F17, strong_certificate = F18, opus = F19},
                Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [session | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [stats_only | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_type_bytes(Elem, [certificates | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, bytes}, F3, [certificates | Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_submsg_UserStats.Stats'(F4, [from_client | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> 'v_submsg_UserStats.Stats'(F5, [from_server | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [udp_packets | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [tcp_packets | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [udp_ping_avg | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_float(F9, [udp_ping_var | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_float(F10, [tcp_ping_avg | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_float(F11, [tcp_ping_var | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_submsg_Version(F12, [version | Path], TrUserData)
    end,
    if is_list(F13) ->
           _ = [v_type_int32(Elem, [celt_versions | Path], TrUserData) || Elem <- F13],
           ok;
       true -> mk_type_error({invalid_list_of, int32}, F13, [celt_versions | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_bytes(F14, [address | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint32(F15, [bandwidth | Path], TrUserData)
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint32(F16, [onlinesecs | Path], TrUserData)
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint32(F17, [idlesecs | Path], TrUserData)
    end,
    if F18 == undefined -> ok;
       true -> v_type_bool(F18, [strong_certificate | Path], TrUserData)
    end,
    if F19 == undefined -> ok;
       true -> v_type_bool(F19, [opus | Path], TrUserData)
    end,
    ok;
v_msg_UserStats(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'UserStats'}, X, Path).

-compile({nowarn_unused_function,v_msg_RequestBlob/3}).
-dialyzer({nowarn_function,v_msg_RequestBlob/3}).
v_msg_RequestBlob(#'RequestBlob'{session_texture = F1, session_comment = F2, channel_description = F3}, Path, TrUserData) ->
    if is_list(F1) ->
           _ = [v_type_uint32(Elem, [session_texture | Path], TrUserData) || Elem <- F1],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F1, [session_texture | Path])
    end,
    if is_list(F2) ->
           _ = [v_type_uint32(Elem, [session_comment | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F2, [session_comment | Path])
    end,
    if is_list(F3) ->
           _ = [v_type_uint32(Elem, [channel_description | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F3, [channel_description | Path])
    end,
    ok;
v_msg_RequestBlob(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'RequestBlob'}, X, Path).

-compile({nowarn_unused_function,v_msg_ServerConfig/3}).
-dialyzer({nowarn_function,v_msg_ServerConfig/3}).
v_msg_ServerConfig(#'ServerConfig'{max_bandwidth = F1, welcome_text = F2, allow_html = F3, message_length = F4, image_message_length = F5, max_users = F6, recording_allowed = F7}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [max_bandwidth | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [welcome_text | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [allow_html | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [message_length | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [image_message_length | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint32(F6, [max_users | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_bool(F7, [recording_allowed | Path], TrUserData)
    end,
    ok;
v_msg_ServerConfig(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ServerConfig'}, X, Path).

-compile({nowarn_unused_function,v_msg_SuggestConfig/3}).
-dialyzer({nowarn_function,v_msg_SuggestConfig/3}).
v_msg_SuggestConfig(#'SuggestConfig'{version_v1 = F1, version_v2 = F2, positional = F3, push_to_talk = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [version_v1 | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [version_v2 | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [positional | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [push_to_talk | Path], TrUserData)
    end,
    ok;
v_msg_SuggestConfig(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SuggestConfig'}, X, Path).

-compile({nowarn_unused_function,v_msg_PluginDataTransmission/3}).
-dialyzer({nowarn_function,v_msg_PluginDataTransmission/3}).
v_msg_PluginDataTransmission(#'PluginDataTransmission'{senderSession = F1, receiverSessions = F2, data = F3, dataID = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [senderSession | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = [v_type_uint32(Elem, [receiverSessions | Path], TrUserData) || Elem <- F2],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F2, [receiverSessions | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bytes(F3, [data | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [dataID | Path], TrUserData)
    end,
    ok;
v_msg_PluginDataTransmission(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PluginDataTransmission'}, X, Path).

-compile({nowarn_unused_function,'v_enum_Reject.RejectType'/3}).
-dialyzer({nowarn_function,'v_enum_Reject.RejectType'/3}).
'v_enum_Reject.RejectType'('None', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'('WrongVersion', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'('InvalidUsername', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'('WrongUserPW', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'('WrongServerPW', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'('UsernameInUse', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'('ServerFull', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'('NoCertificate', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'('AuthenticatorFail', _Path, _TrUserData) -> ok;
'v_enum_Reject.RejectType'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_Reject.RejectType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'Reject.RejectType'}, X, Path).

-compile({nowarn_unused_function,'v_enum_PermissionDenied.DenyType'/3}).
-dialyzer({nowarn_function,'v_enum_PermissionDenied.DenyType'/3}).
'v_enum_PermissionDenied.DenyType'('Text', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('Permission', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('SuperUser', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('ChannelName', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('TextTooLong', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('H9K', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('TemporaryChannel', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('MissingCertificate', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('UserName', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('ChannelFull', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('NestingLimit', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('ChannelCountLimit', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('ChannelListenerLimit', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'('UserListenerLimit', _Path, _TrUserData) -> ok;
'v_enum_PermissionDenied.DenyType'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_PermissionDenied.DenyType'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'PermissionDenied.DenyType'}, X, Path).

-compile({nowarn_unused_function,'v_enum_ContextActionModify.Operation'/3}).
-dialyzer({nowarn_function,'v_enum_ContextActionModify.Operation'/3}).
'v_enum_ContextActionModify.Operation'('Add', _Path, _TrUserData) -> ok;
'v_enum_ContextActionModify.Operation'('Remove', _Path, _TrUserData) -> ok;
'v_enum_ContextActionModify.Operation'(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
'v_enum_ContextActionModify.Operation'(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'ContextActionModify.Operation'}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when is_integer(N), -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when is_integer(N), 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_float(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) -> mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR)))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'Reject.RejectType'}, [{'None', 0}, {'WrongVersion', 1}, {'InvalidUsername', 2}, {'WrongUserPW', 3}, {'WrongServerPW', 4}, {'UsernameInUse', 5}, {'ServerFull', 6}, {'NoCertificate', 7}, {'AuthenticatorFail', 8}]},
     {{enum, 'PermissionDenied.DenyType'},
      [{'Text', 0},
       {'Permission', 1},
       {'SuperUser', 2},
       {'ChannelName', 3},
       {'TextTooLong', 4},
       {'H9K', 5},
       {'TemporaryChannel', 6},
       {'MissingCertificate', 7},
       {'UserName', 8},
       {'ChannelFull', 9},
       {'NestingLimit', 10},
       {'ChannelCountLimit', 11},
       {'ChannelListenerLimit', 12},
       {'UserListenerLimit', 13}]},
     {{enum, 'ContextActionModify.Context'}, [{'Server', 1}, {'Channel', 2}, {'User', 4}]},
     {{enum, 'ContextActionModify.Operation'}, [{'Add', 0}, {'Remove', 1}]},
     {{msg, 'Version'},
      [#field{name = version_v1, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = version_v2, fnum = 5, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = release, fnum = 2, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = os, fnum = 3, rnum = 5, type = string, occurrence = optional, opts = []},
       #field{name = os_version, fnum = 4, rnum = 6, type = string, occurrence = optional, opts = []}]},
     {{msg, 'UDPTunnel'}, [#field{name = packet, fnum = 1, rnum = 2, type = bytes, occurrence = required, opts = []}]},
     {{msg, 'Authenticate'},
      [#field{name = username, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = password, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = tokens, fnum = 3, rnum = 4, type = string, occurrence = repeated, opts = []},
       #field{name = celt_versions, fnum = 4, rnum = 5, type = int32, occurrence = repeated, opts = []},
       #field{name = opus, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = [{default, false}]},
       #field{name = client_type, fnum = 6, rnum = 7, type = int32, occurrence = optional, opts = [{default, 0}]}]},
     {{msg, 'Ping'},
      [#field{name = timestamp, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
       #field{name = good, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = late, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = lost, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = resync, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = udp_packets, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = tcp_packets, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = udp_ping_avg, fnum = 8, rnum = 9, type = float, occurrence = optional, opts = []},
       #field{name = udp_ping_var, fnum = 9, rnum = 10, type = float, occurrence = optional, opts = []},
       #field{name = tcp_ping_avg, fnum = 10, rnum = 11, type = float, occurrence = optional, opts = []},
       #field{name = tcp_ping_var, fnum = 11, rnum = 12, type = float, occurrence = optional, opts = []}]},
     {{msg, 'Reject'}, [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'Reject.RejectType'}, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}]},
     {{msg, 'ServerSync'},
      [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = max_bandwidth, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = welcome_text, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = permissions, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'ChannelRemove'}, [#field{name = channel_id, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []}]},
     {{msg, 'ChannelState'},
      [#field{name = channel_id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = parent, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = links, fnum = 4, rnum = 5, type = uint32, occurrence = repeated, opts = []},
       #field{name = description, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
       #field{name = links_add, fnum = 6, rnum = 7, type = uint32, occurrence = repeated, opts = []},
       #field{name = links_remove, fnum = 7, rnum = 8, type = uint32, occurrence = repeated, opts = []},
       #field{name = temporary, fnum = 8, rnum = 9, type = bool, occurrence = optional, opts = [{default, false}]},
       #field{name = position, fnum = 9, rnum = 10, type = int32, occurrence = optional, opts = [{default, 0}]},
       #field{name = description_hash, fnum = 10, rnum = 11, type = bytes, occurrence = optional, opts = []},
       #field{name = max_users, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []},
       #field{name = is_enter_restricted, fnum = 12, rnum = 13, type = bool, occurrence = optional, opts = []},
       #field{name = can_enter, fnum = 13, rnum = 14, type = bool, occurrence = optional, opts = []}]},
     {{msg, 'UserRemove'},
      [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = actor, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = reason, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = ban, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []}]},
     {{msg, 'UserState.VolumeAdjustment'}, [#field{name = listening_channel, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}, #field{name = volume_adjustment, fnum = 2, rnum = 3, type = float, occurrence = optional, opts = []}]},
     {{msg, 'UserState'},
      [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = actor, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = user_id, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = mute, fnum = 6, rnum = 7, type = bool, occurrence = optional, opts = []},
       #field{name = deaf, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []},
       #field{name = suppress, fnum = 8, rnum = 9, type = bool, occurrence = optional, opts = []},
       #field{name = self_mute, fnum = 9, rnum = 10, type = bool, occurrence = optional, opts = []},
       #field{name = self_deaf, fnum = 10, rnum = 11, type = bool, occurrence = optional, opts = []},
       #field{name = texture, fnum = 11, rnum = 12, type = bytes, occurrence = optional, opts = []},
       #field{name = plugin_context, fnum = 12, rnum = 13, type = bytes, occurrence = optional, opts = []},
       #field{name = plugin_identity, fnum = 13, rnum = 14, type = string, occurrence = optional, opts = []},
       #field{name = comment, fnum = 14, rnum = 15, type = string, occurrence = optional, opts = []},
       #field{name = hash, fnum = 15, rnum = 16, type = string, occurrence = optional, opts = []},
       #field{name = comment_hash, fnum = 16, rnum = 17, type = bytes, occurrence = optional, opts = []},
       #field{name = texture_hash, fnum = 17, rnum = 18, type = bytes, occurrence = optional, opts = []},
       #field{name = priority_speaker, fnum = 18, rnum = 19, type = bool, occurrence = optional, opts = []},
       #field{name = recording, fnum = 19, rnum = 20, type = bool, occurrence = optional, opts = []},
       #field{name = temporary_access_tokens, fnum = 20, rnum = 21, type = string, occurrence = repeated, opts = []},
       #field{name = listening_channel_add, fnum = 21, rnum = 22, type = uint32, occurrence = repeated, opts = []},
       #field{name = listening_channel_remove, fnum = 22, rnum = 23, type = uint32, occurrence = repeated, opts = []},
       #field{name = listening_volume_adjustment, fnum = 23, rnum = 24, type = {msg, 'UserState.VolumeAdjustment'}, occurrence = repeated, opts = []}]},
     {{msg, 'BanList.BanEntry'},
      [#field{name = address, fnum = 1, rnum = 2, type = bytes, occurrence = required, opts = []},
       #field{name = mask, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = hash, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []},
       #field{name = reason, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
       #field{name = start, fnum = 6, rnum = 7, type = string, occurrence = optional, opts = []},
       #field{name = duration, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'BanList'}, [#field{name = bans, fnum = 1, rnum = 2, type = {msg, 'BanList.BanEntry'}, occurrence = repeated, opts = []}, #field{name = query, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, false}]}]},
     {{msg, 'TextMessage'},
      [#field{name = actor, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = session, fnum = 2, rnum = 3, type = uint32, occurrence = repeated, opts = []},
       #field{name = channel_id, fnum = 3, rnum = 4, type = uint32, occurrence = repeated, opts = []},
       #field{name = tree_id, fnum = 4, rnum = 5, type = uint32, occurrence = repeated, opts = []},
       #field{name = message, fnum = 5, rnum = 6, type = string, occurrence = required, opts = []}]},
     {{msg, 'PermissionDenied'},
      [#field{name = permission, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = session, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = reason, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []},
       #field{name = type, fnum = 5, rnum = 6, type = {enum, 'PermissionDenied.DenyType'}, occurrence = optional, opts = []},
       #field{name = name, fnum = 6, rnum = 7, type = string, occurrence = optional, opts = []}]},
     {{msg, 'ACL.ChanGroup'},
      [#field{name = name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = inherited, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, true}]},
       #field{name = inherit, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = [{default, true}]},
       #field{name = inheritable, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = [{default, true}]},
       #field{name = add, fnum = 5, rnum = 6, type = uint32, occurrence = repeated, opts = []},
       #field{name = remove, fnum = 6, rnum = 7, type = uint32, occurrence = repeated, opts = []},
       #field{name = inherited_members, fnum = 7, rnum = 8, type = uint32, occurrence = repeated, opts = []}]},
     {{msg, 'ACL.ChanACL'},
      [#field{name = apply_here, fnum = 1, rnum = 2, type = bool, occurrence = optional, opts = [{default, true}]},
       #field{name = apply_subs, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, true}]},
       #field{name = inherited, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = [{default, true}]},
       #field{name = user_id, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = group, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
       #field{name = grant, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = deny, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'ACL'},
      [#field{name = channel_id, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = inherit_acls, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, true}]},
       #field{name = groups, fnum = 3, rnum = 4, type = {msg, 'ACL.ChanGroup'}, occurrence = repeated, opts = []},
       #field{name = acls, fnum = 4, rnum = 5, type = {msg, 'ACL.ChanACL'}, occurrence = repeated, opts = []},
       #field{name = query, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = [{default, false}]}]},
     {{msg, 'QueryUsers'}, [#field{name = ids, fnum = 1, rnum = 2, type = uint32, occurrence = repeated, opts = []}, #field{name = names, fnum = 2, rnum = 3, type = string, occurrence = repeated, opts = []}]},
     {{msg, 'CryptSetup'},
      [#field{name = key, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
       #field{name = client_nonce, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
       #field{name = server_nonce, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'ContextActionModify'},
      [#field{name = action, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
       #field{name = text, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = context, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = operation, fnum = 4, rnum = 5, type = {enum, 'ContextActionModify.Operation'}, occurrence = optional, opts = []}]},
     {{msg, 'ContextAction'},
      [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = action, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}]},
     {{msg, 'UserList.User'},
      [#field{name = user_id, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = last_seen, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = last_channel, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'UserList'}, [#field{name = users, fnum = 1, rnum = 2, type = {msg, 'UserList.User'}, occurrence = repeated, opts = []}]},
     {{msg, 'VoiceTarget.Target'},
      [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = repeated, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = group, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
       #field{name = links, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = [{default, false}]},
       #field{name = children, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = [{default, false}]}]},
     {{msg, 'VoiceTarget'}, [#field{name = id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}, #field{name = targets, fnum = 2, rnum = 3, type = {msg, 'VoiceTarget.Target'}, occurrence = repeated, opts = []}]},
     {{msg, 'PermissionQuery'},
      [#field{name = channel_id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = permissions, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = flush, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = [{default, false}]}]},
     {{msg, 'CodecVersion'},
      [#field{name = alpha, fnum = 1, rnum = 2, type = int32, occurrence = required, opts = []},
       #field{name = beta, fnum = 2, rnum = 3, type = int32, occurrence = required, opts = []},
       #field{name = prefer_alpha, fnum = 3, rnum = 4, type = bool, occurrence = required, opts = [{default, true}]},
       #field{name = opus, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = [{default, false}]}]},
     {{msg, 'UserStats.Stats'},
      [#field{name = good, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = late, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = lost, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
       #field{name = resync, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'UserStats'},
      [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = stats_only, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, false}]},
       #field{name = certificates, fnum = 3, rnum = 4, type = bytes, occurrence = repeated, opts = []},
       #field{name = from_client, fnum = 4, rnum = 5, type = {msg, 'UserStats.Stats'}, occurrence = optional, opts = []},
       #field{name = from_server, fnum = 5, rnum = 6, type = {msg, 'UserStats.Stats'}, occurrence = optional, opts = []},
       #field{name = udp_packets, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = tcp_packets, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
       #field{name = udp_ping_avg, fnum = 8, rnum = 9, type = float, occurrence = optional, opts = []},
       #field{name = udp_ping_var, fnum = 9, rnum = 10, type = float, occurrence = optional, opts = []},
       #field{name = tcp_ping_avg, fnum = 10, rnum = 11, type = float, occurrence = optional, opts = []},
       #field{name = tcp_ping_var, fnum = 11, rnum = 12, type = float, occurrence = optional, opts = []},
       #field{name = version, fnum = 12, rnum = 13, type = {msg, 'Version'}, occurrence = optional, opts = []},
       #field{name = celt_versions, fnum = 13, rnum = 14, type = int32, occurrence = repeated, opts = []},
       #field{name = address, fnum = 14, rnum = 15, type = bytes, occurrence = optional, opts = []},
       #field{name = bandwidth, fnum = 15, rnum = 16, type = uint32, occurrence = optional, opts = []},
       #field{name = onlinesecs, fnum = 16, rnum = 17, type = uint32, occurrence = optional, opts = []},
       #field{name = idlesecs, fnum = 17, rnum = 18, type = uint32, occurrence = optional, opts = []},
       #field{name = strong_certificate, fnum = 18, rnum = 19, type = bool, occurrence = optional, opts = [{default, false}]},
       #field{name = opus, fnum = 19, rnum = 20, type = bool, occurrence = optional, opts = [{default, false}]}]},
     {{msg, 'RequestBlob'},
      [#field{name = session_texture, fnum = 1, rnum = 2, type = uint32, occurrence = repeated, opts = []},
       #field{name = session_comment, fnum = 2, rnum = 3, type = uint32, occurrence = repeated, opts = []},
       #field{name = channel_description, fnum = 3, rnum = 4, type = uint32, occurrence = repeated, opts = []}]},
     {{msg, 'ServerConfig'},
      [#field{name = max_bandwidth, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = welcome_text, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
       #field{name = allow_html, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = []},
       #field{name = message_length, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
       #field{name = image_message_length, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
       #field{name = max_users, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
       #field{name = recording_allowed, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []}]},
     {{msg, 'SuggestConfig'},
      [#field{name = version_v1, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = version_v2, fnum = 4, rnum = 3, type = uint64, occurrence = optional, opts = []},
       #field{name = positional, fnum = 2, rnum = 4, type = bool, occurrence = optional, opts = []},
       #field{name = push_to_talk, fnum = 3, rnum = 5, type = bool, occurrence = optional, opts = []}]},
     {{msg, 'PluginDataTransmission'},
      [#field{name = senderSession, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
       #field{name = receiverSessions, fnum = 2, rnum = 3, type = uint32, occurrence = repeated, opts = [packed]},
       #field{name = data, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
       #field{name = dataID, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['Version',
     'UDPTunnel',
     'Authenticate',
     'Ping',
     'Reject',
     'ServerSync',
     'ChannelRemove',
     'ChannelState',
     'UserRemove',
     'UserState.VolumeAdjustment',
     'UserState',
     'BanList.BanEntry',
     'BanList',
     'TextMessage',
     'PermissionDenied',
     'ACL.ChanGroup',
     'ACL.ChanACL',
     'ACL',
     'QueryUsers',
     'CryptSetup',
     'ContextActionModify',
     'ContextAction',
     'UserList.User',
     'UserList',
     'VoiceTarget.Target',
     'VoiceTarget',
     'PermissionQuery',
     'CodecVersion',
     'UserStats.Stats',
     'UserStats',
     'RequestBlob',
     'ServerConfig',
     'SuggestConfig',
     'PluginDataTransmission'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Version',
     'UDPTunnel',
     'Authenticate',
     'Ping',
     'Reject',
     'ServerSync',
     'ChannelRemove',
     'ChannelState',
     'UserRemove',
     'UserState.VolumeAdjustment',
     'UserState',
     'BanList.BanEntry',
     'BanList',
     'TextMessage',
     'PermissionDenied',
     'ACL.ChanGroup',
     'ACL.ChanACL',
     'ACL',
     'QueryUsers',
     'CryptSetup',
     'ContextActionModify',
     'ContextAction',
     'UserList.User',
     'UserList',
     'VoiceTarget.Target',
     'VoiceTarget',
     'PermissionQuery',
     'CodecVersion',
     'UserStats.Stats',
     'UserStats',
     'RequestBlob',
     'ServerConfig',
     'SuggestConfig',
     'PluginDataTransmission'].


get_enum_names() -> ['Reject.RejectType', 'PermissionDenied.DenyType', 'ContextActionModify.Context', 'ContextActionModify.Operation'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Version') ->
    [#field{name = version_v1, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = version_v2, fnum = 5, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = release, fnum = 2, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = os, fnum = 3, rnum = 5, type = string, occurrence = optional, opts = []},
     #field{name = os_version, fnum = 4, rnum = 6, type = string, occurrence = optional, opts = []}];
find_msg_def('UDPTunnel') -> [#field{name = packet, fnum = 1, rnum = 2, type = bytes, occurrence = required, opts = []}];
find_msg_def('Authenticate') ->
    [#field{name = username, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = password, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = tokens, fnum = 3, rnum = 4, type = string, occurrence = repeated, opts = []},
     #field{name = celt_versions, fnum = 4, rnum = 5, type = int32, occurrence = repeated, opts = []},
     #field{name = opus, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = [{default, false}]},
     #field{name = client_type, fnum = 6, rnum = 7, type = int32, occurrence = optional, opts = [{default, 0}]}];
find_msg_def('Ping') ->
    [#field{name = timestamp, fnum = 1, rnum = 2, type = uint64, occurrence = optional, opts = []},
     #field{name = good, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = late, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = lost, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = resync, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = udp_packets, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = tcp_packets, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = udp_ping_avg, fnum = 8, rnum = 9, type = float, occurrence = optional, opts = []},
     #field{name = udp_ping_var, fnum = 9, rnum = 10, type = float, occurrence = optional, opts = []},
     #field{name = tcp_ping_avg, fnum = 10, rnum = 11, type = float, occurrence = optional, opts = []},
     #field{name = tcp_ping_var, fnum = 11, rnum = 12, type = float, occurrence = optional, opts = []}];
find_msg_def('Reject') -> [#field{name = type, fnum = 1, rnum = 2, type = {enum, 'Reject.RejectType'}, occurrence = optional, opts = []}, #field{name = reason, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []}];
find_msg_def('ServerSync') ->
    [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = max_bandwidth, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = welcome_text, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = permissions, fnum = 4, rnum = 5, type = uint64, occurrence = optional, opts = []}];
find_msg_def('ChannelRemove') -> [#field{name = channel_id, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []}];
find_msg_def('ChannelState') ->
    [#field{name = channel_id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = parent, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = links, fnum = 4, rnum = 5, type = uint32, occurrence = repeated, opts = []},
     #field{name = description, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
     #field{name = links_add, fnum = 6, rnum = 7, type = uint32, occurrence = repeated, opts = []},
     #field{name = links_remove, fnum = 7, rnum = 8, type = uint32, occurrence = repeated, opts = []},
     #field{name = temporary, fnum = 8, rnum = 9, type = bool, occurrence = optional, opts = [{default, false}]},
     #field{name = position, fnum = 9, rnum = 10, type = int32, occurrence = optional, opts = [{default, 0}]},
     #field{name = description_hash, fnum = 10, rnum = 11, type = bytes, occurrence = optional, opts = []},
     #field{name = max_users, fnum = 11, rnum = 12, type = uint32, occurrence = optional, opts = []},
     #field{name = is_enter_restricted, fnum = 12, rnum = 13, type = bool, occurrence = optional, opts = []},
     #field{name = can_enter, fnum = 13, rnum = 14, type = bool, occurrence = optional, opts = []}];
find_msg_def('UserRemove') ->
    [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = actor, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = reason, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = ban, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = []}];
find_msg_def('UserState.VolumeAdjustment') ->
    [#field{name = listening_channel, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}, #field{name = volume_adjustment, fnum = 2, rnum = 3, type = float, occurrence = optional, opts = []}];
find_msg_def('UserState') ->
    [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = actor, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = user_id, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = mute, fnum = 6, rnum = 7, type = bool, occurrence = optional, opts = []},
     #field{name = deaf, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []},
     #field{name = suppress, fnum = 8, rnum = 9, type = bool, occurrence = optional, opts = []},
     #field{name = self_mute, fnum = 9, rnum = 10, type = bool, occurrence = optional, opts = []},
     #field{name = self_deaf, fnum = 10, rnum = 11, type = bool, occurrence = optional, opts = []},
     #field{name = texture, fnum = 11, rnum = 12, type = bytes, occurrence = optional, opts = []},
     #field{name = plugin_context, fnum = 12, rnum = 13, type = bytes, occurrence = optional, opts = []},
     #field{name = plugin_identity, fnum = 13, rnum = 14, type = string, occurrence = optional, opts = []},
     #field{name = comment, fnum = 14, rnum = 15, type = string, occurrence = optional, opts = []},
     #field{name = hash, fnum = 15, rnum = 16, type = string, occurrence = optional, opts = []},
     #field{name = comment_hash, fnum = 16, rnum = 17, type = bytes, occurrence = optional, opts = []},
     #field{name = texture_hash, fnum = 17, rnum = 18, type = bytes, occurrence = optional, opts = []},
     #field{name = priority_speaker, fnum = 18, rnum = 19, type = bool, occurrence = optional, opts = []},
     #field{name = recording, fnum = 19, rnum = 20, type = bool, occurrence = optional, opts = []},
     #field{name = temporary_access_tokens, fnum = 20, rnum = 21, type = string, occurrence = repeated, opts = []},
     #field{name = listening_channel_add, fnum = 21, rnum = 22, type = uint32, occurrence = repeated, opts = []},
     #field{name = listening_channel_remove, fnum = 22, rnum = 23, type = uint32, occurrence = repeated, opts = []},
     #field{name = listening_volume_adjustment, fnum = 23, rnum = 24, type = {msg, 'UserState.VolumeAdjustment'}, occurrence = repeated, opts = []}];
find_msg_def('BanList.BanEntry') ->
    [#field{name = address, fnum = 1, rnum = 2, type = bytes, occurrence = required, opts = []},
     #field{name = mask, fnum = 2, rnum = 3, type = uint32, occurrence = required, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = hash, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []},
     #field{name = reason, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
     #field{name = start, fnum = 6, rnum = 7, type = string, occurrence = optional, opts = []},
     #field{name = duration, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []}];
find_msg_def('BanList') -> [#field{name = bans, fnum = 1, rnum = 2, type = {msg, 'BanList.BanEntry'}, occurrence = repeated, opts = []}, #field{name = query, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, false}]}];
find_msg_def('TextMessage') ->
    [#field{name = actor, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = session, fnum = 2, rnum = 3, type = uint32, occurrence = repeated, opts = []},
     #field{name = channel_id, fnum = 3, rnum = 4, type = uint32, occurrence = repeated, opts = []},
     #field{name = tree_id, fnum = 4, rnum = 5, type = uint32, occurrence = repeated, opts = []},
     #field{name = message, fnum = 5, rnum = 6, type = string, occurrence = required, opts = []}];
find_msg_def('PermissionDenied') ->
    [#field{name = permission, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = session, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = reason, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []},
     #field{name = type, fnum = 5, rnum = 6, type = {enum, 'PermissionDenied.DenyType'}, occurrence = optional, opts = []},
     #field{name = name, fnum = 6, rnum = 7, type = string, occurrence = optional, opts = []}];
find_msg_def('ACL.ChanGroup') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = inherited, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, true}]},
     #field{name = inherit, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = [{default, true}]},
     #field{name = inheritable, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = [{default, true}]},
     #field{name = add, fnum = 5, rnum = 6, type = uint32, occurrence = repeated, opts = []},
     #field{name = remove, fnum = 6, rnum = 7, type = uint32, occurrence = repeated, opts = []},
     #field{name = inherited_members, fnum = 7, rnum = 8, type = uint32, occurrence = repeated, opts = []}];
find_msg_def('ACL.ChanACL') ->
    [#field{name = apply_here, fnum = 1, rnum = 2, type = bool, occurrence = optional, opts = [{default, true}]},
     #field{name = apply_subs, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, true}]},
     #field{name = inherited, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = [{default, true}]},
     #field{name = user_id, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = group, fnum = 5, rnum = 6, type = string, occurrence = optional, opts = []},
     #field{name = grant, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = deny, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []}];
find_msg_def('ACL') ->
    [#field{name = channel_id, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = inherit_acls, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, true}]},
     #field{name = groups, fnum = 3, rnum = 4, type = {msg, 'ACL.ChanGroup'}, occurrence = repeated, opts = []},
     #field{name = acls, fnum = 4, rnum = 5, type = {msg, 'ACL.ChanACL'}, occurrence = repeated, opts = []},
     #field{name = query, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = [{default, false}]}];
find_msg_def('QueryUsers') -> [#field{name = ids, fnum = 1, rnum = 2, type = uint32, occurrence = repeated, opts = []}, #field{name = names, fnum = 2, rnum = 3, type = string, occurrence = repeated, opts = []}];
find_msg_def('CryptSetup') ->
    [#field{name = key, fnum = 1, rnum = 2, type = bytes, occurrence = optional, opts = []},
     #field{name = client_nonce, fnum = 2, rnum = 3, type = bytes, occurrence = optional, opts = []},
     #field{name = server_nonce, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []}];
find_msg_def('ContextActionModify') ->
    [#field{name = action, fnum = 1, rnum = 2, type = string, occurrence = required, opts = []},
     #field{name = text, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = context, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = operation, fnum = 4, rnum = 5, type = {enum, 'ContextActionModify.Operation'}, occurrence = optional, opts = []}];
find_msg_def('ContextAction') ->
    [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = action, fnum = 3, rnum = 4, type = string, occurrence = required, opts = []}];
find_msg_def('UserList.User') ->
    [#field{name = user_id, fnum = 1, rnum = 2, type = uint32, occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = last_seen, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = last_channel, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}];
find_msg_def('UserList') -> [#field{name = users, fnum = 1, rnum = 2, type = {msg, 'UserList.User'}, occurrence = repeated, opts = []}];
find_msg_def('VoiceTarget.Target') ->
    [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = repeated, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = group, fnum = 3, rnum = 4, type = string, occurrence = optional, opts = []},
     #field{name = links, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = [{default, false}]},
     #field{name = children, fnum = 5, rnum = 6, type = bool, occurrence = optional, opts = [{default, false}]}];
find_msg_def('VoiceTarget') -> [#field{name = id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}, #field{name = targets, fnum = 2, rnum = 3, type = {msg, 'VoiceTarget.Target'}, occurrence = repeated, opts = []}];
find_msg_def('PermissionQuery') ->
    [#field{name = channel_id, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = permissions, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = flush, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = [{default, false}]}];
find_msg_def('CodecVersion') ->
    [#field{name = alpha, fnum = 1, rnum = 2, type = int32, occurrence = required, opts = []},
     #field{name = beta, fnum = 2, rnum = 3, type = int32, occurrence = required, opts = []},
     #field{name = prefer_alpha, fnum = 3, rnum = 4, type = bool, occurrence = required, opts = [{default, true}]},
     #field{name = opus, fnum = 4, rnum = 5, type = bool, occurrence = optional, opts = [{default, false}]}];
find_msg_def('UserStats.Stats') ->
    [#field{name = good, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = late, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = lost, fnum = 3, rnum = 4, type = uint32, occurrence = optional, opts = []},
     #field{name = resync, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []}];
find_msg_def('UserStats') ->
    [#field{name = session, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = stats_only, fnum = 2, rnum = 3, type = bool, occurrence = optional, opts = [{default, false}]},
     #field{name = certificates, fnum = 3, rnum = 4, type = bytes, occurrence = repeated, opts = []},
     #field{name = from_client, fnum = 4, rnum = 5, type = {msg, 'UserStats.Stats'}, occurrence = optional, opts = []},
     #field{name = from_server, fnum = 5, rnum = 6, type = {msg, 'UserStats.Stats'}, occurrence = optional, opts = []},
     #field{name = udp_packets, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = tcp_packets, fnum = 7, rnum = 8, type = uint32, occurrence = optional, opts = []},
     #field{name = udp_ping_avg, fnum = 8, rnum = 9, type = float, occurrence = optional, opts = []},
     #field{name = udp_ping_var, fnum = 9, rnum = 10, type = float, occurrence = optional, opts = []},
     #field{name = tcp_ping_avg, fnum = 10, rnum = 11, type = float, occurrence = optional, opts = []},
     #field{name = tcp_ping_var, fnum = 11, rnum = 12, type = float, occurrence = optional, opts = []},
     #field{name = version, fnum = 12, rnum = 13, type = {msg, 'Version'}, occurrence = optional, opts = []},
     #field{name = celt_versions, fnum = 13, rnum = 14, type = int32, occurrence = repeated, opts = []},
     #field{name = address, fnum = 14, rnum = 15, type = bytes, occurrence = optional, opts = []},
     #field{name = bandwidth, fnum = 15, rnum = 16, type = uint32, occurrence = optional, opts = []},
     #field{name = onlinesecs, fnum = 16, rnum = 17, type = uint32, occurrence = optional, opts = []},
     #field{name = idlesecs, fnum = 17, rnum = 18, type = uint32, occurrence = optional, opts = []},
     #field{name = strong_certificate, fnum = 18, rnum = 19, type = bool, occurrence = optional, opts = [{default, false}]},
     #field{name = opus, fnum = 19, rnum = 20, type = bool, occurrence = optional, opts = [{default, false}]}];
find_msg_def('RequestBlob') ->
    [#field{name = session_texture, fnum = 1, rnum = 2, type = uint32, occurrence = repeated, opts = []},
     #field{name = session_comment, fnum = 2, rnum = 3, type = uint32, occurrence = repeated, opts = []},
     #field{name = channel_description, fnum = 3, rnum = 4, type = uint32, occurrence = repeated, opts = []}];
find_msg_def('ServerConfig') ->
    [#field{name = max_bandwidth, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = welcome_text, fnum = 2, rnum = 3, type = string, occurrence = optional, opts = []},
     #field{name = allow_html, fnum = 3, rnum = 4, type = bool, occurrence = optional, opts = []},
     #field{name = message_length, fnum = 4, rnum = 5, type = uint32, occurrence = optional, opts = []},
     #field{name = image_message_length, fnum = 5, rnum = 6, type = uint32, occurrence = optional, opts = []},
     #field{name = max_users, fnum = 6, rnum = 7, type = uint32, occurrence = optional, opts = []},
     #field{name = recording_allowed, fnum = 7, rnum = 8, type = bool, occurrence = optional, opts = []}];
find_msg_def('SuggestConfig') ->
    [#field{name = version_v1, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = version_v2, fnum = 4, rnum = 3, type = uint64, occurrence = optional, opts = []},
     #field{name = positional, fnum = 2, rnum = 4, type = bool, occurrence = optional, opts = []},
     #field{name = push_to_talk, fnum = 3, rnum = 5, type = bool, occurrence = optional, opts = []}];
find_msg_def('PluginDataTransmission') ->
    [#field{name = senderSession, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []},
     #field{name = receiverSessions, fnum = 2, rnum = 3, type = uint32, occurrence = repeated, opts = [packed]},
     #field{name = data, fnum = 3, rnum = 4, type = bytes, occurrence = optional, opts = []},
     #field{name = dataID, fnum = 4, rnum = 5, type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('Reject.RejectType') -> [{'None', 0}, {'WrongVersion', 1}, {'InvalidUsername', 2}, {'WrongUserPW', 3}, {'WrongServerPW', 4}, {'UsernameInUse', 5}, {'ServerFull', 6}, {'NoCertificate', 7}, {'AuthenticatorFail', 8}];
find_enum_def('PermissionDenied.DenyType') ->
    [{'Text', 0},
     {'Permission', 1},
     {'SuperUser', 2},
     {'ChannelName', 3},
     {'TextTooLong', 4},
     {'H9K', 5},
     {'TemporaryChannel', 6},
     {'MissingCertificate', 7},
     {'UserName', 8},
     {'ChannelFull', 9},
     {'NestingLimit', 10},
     {'ChannelCountLimit', 11},
     {'ChannelListenerLimit', 12},
     {'UserListenerLimit', 13}];
find_enum_def('ContextActionModify.Context') -> [{'Server', 1}, {'Channel', 2}, {'User', 4}];
find_enum_def('ContextActionModify.Operation') -> [{'Add', 0}, {'Remove', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('Reject.RejectType', Value) -> 'enum_symbol_by_value_Reject.RejectType'(Value);
enum_symbol_by_value('PermissionDenied.DenyType', Value) -> 'enum_symbol_by_value_PermissionDenied.DenyType'(Value);
enum_symbol_by_value('ContextActionModify.Context', Value) -> 'enum_symbol_by_value_ContextActionModify.Context'(Value);
enum_symbol_by_value('ContextActionModify.Operation', Value) -> 'enum_symbol_by_value_ContextActionModify.Operation'(Value).


enum_value_by_symbol('Reject.RejectType', Sym) -> 'enum_value_by_symbol_Reject.RejectType'(Sym);
enum_value_by_symbol('PermissionDenied.DenyType', Sym) -> 'enum_value_by_symbol_PermissionDenied.DenyType'(Sym);
enum_value_by_symbol('ContextActionModify.Context', Sym) -> 'enum_value_by_symbol_ContextActionModify.Context'(Sym);
enum_value_by_symbol('ContextActionModify.Operation', Sym) -> 'enum_value_by_symbol_ContextActionModify.Operation'(Sym).


'enum_symbol_by_value_Reject.RejectType'(0) -> 'None';
'enum_symbol_by_value_Reject.RejectType'(1) -> 'WrongVersion';
'enum_symbol_by_value_Reject.RejectType'(2) -> 'InvalidUsername';
'enum_symbol_by_value_Reject.RejectType'(3) -> 'WrongUserPW';
'enum_symbol_by_value_Reject.RejectType'(4) -> 'WrongServerPW';
'enum_symbol_by_value_Reject.RejectType'(5) -> 'UsernameInUse';
'enum_symbol_by_value_Reject.RejectType'(6) -> 'ServerFull';
'enum_symbol_by_value_Reject.RejectType'(7) -> 'NoCertificate';
'enum_symbol_by_value_Reject.RejectType'(8) -> 'AuthenticatorFail'.


'enum_value_by_symbol_Reject.RejectType'('None') -> 0;
'enum_value_by_symbol_Reject.RejectType'('WrongVersion') -> 1;
'enum_value_by_symbol_Reject.RejectType'('InvalidUsername') -> 2;
'enum_value_by_symbol_Reject.RejectType'('WrongUserPW') -> 3;
'enum_value_by_symbol_Reject.RejectType'('WrongServerPW') -> 4;
'enum_value_by_symbol_Reject.RejectType'('UsernameInUse') -> 5;
'enum_value_by_symbol_Reject.RejectType'('ServerFull') -> 6;
'enum_value_by_symbol_Reject.RejectType'('NoCertificate') -> 7;
'enum_value_by_symbol_Reject.RejectType'('AuthenticatorFail') -> 8.

'enum_symbol_by_value_PermissionDenied.DenyType'(0) -> 'Text';
'enum_symbol_by_value_PermissionDenied.DenyType'(1) -> 'Permission';
'enum_symbol_by_value_PermissionDenied.DenyType'(2) -> 'SuperUser';
'enum_symbol_by_value_PermissionDenied.DenyType'(3) -> 'ChannelName';
'enum_symbol_by_value_PermissionDenied.DenyType'(4) -> 'TextTooLong';
'enum_symbol_by_value_PermissionDenied.DenyType'(5) -> 'H9K';
'enum_symbol_by_value_PermissionDenied.DenyType'(6) -> 'TemporaryChannel';
'enum_symbol_by_value_PermissionDenied.DenyType'(7) -> 'MissingCertificate';
'enum_symbol_by_value_PermissionDenied.DenyType'(8) -> 'UserName';
'enum_symbol_by_value_PermissionDenied.DenyType'(9) -> 'ChannelFull';
'enum_symbol_by_value_PermissionDenied.DenyType'(10) -> 'NestingLimit';
'enum_symbol_by_value_PermissionDenied.DenyType'(11) -> 'ChannelCountLimit';
'enum_symbol_by_value_PermissionDenied.DenyType'(12) -> 'ChannelListenerLimit';
'enum_symbol_by_value_PermissionDenied.DenyType'(13) -> 'UserListenerLimit'.


'enum_value_by_symbol_PermissionDenied.DenyType'('Text') -> 0;
'enum_value_by_symbol_PermissionDenied.DenyType'('Permission') -> 1;
'enum_value_by_symbol_PermissionDenied.DenyType'('SuperUser') -> 2;
'enum_value_by_symbol_PermissionDenied.DenyType'('ChannelName') -> 3;
'enum_value_by_symbol_PermissionDenied.DenyType'('TextTooLong') -> 4;
'enum_value_by_symbol_PermissionDenied.DenyType'('H9K') -> 5;
'enum_value_by_symbol_PermissionDenied.DenyType'('TemporaryChannel') -> 6;
'enum_value_by_symbol_PermissionDenied.DenyType'('MissingCertificate') -> 7;
'enum_value_by_symbol_PermissionDenied.DenyType'('UserName') -> 8;
'enum_value_by_symbol_PermissionDenied.DenyType'('ChannelFull') -> 9;
'enum_value_by_symbol_PermissionDenied.DenyType'('NestingLimit') -> 10;
'enum_value_by_symbol_PermissionDenied.DenyType'('ChannelCountLimit') -> 11;
'enum_value_by_symbol_PermissionDenied.DenyType'('ChannelListenerLimit') -> 12;
'enum_value_by_symbol_PermissionDenied.DenyType'('UserListenerLimit') -> 13.

'enum_symbol_by_value_ContextActionModify.Context'(1) -> 'Server';
'enum_symbol_by_value_ContextActionModify.Context'(2) -> 'Channel';
'enum_symbol_by_value_ContextActionModify.Context'(4) -> 'User'.


'enum_value_by_symbol_ContextActionModify.Context'('Server') -> 1;
'enum_value_by_symbol_ContextActionModify.Context'('Channel') -> 2;
'enum_value_by_symbol_ContextActionModify.Context'('User') -> 4.

'enum_symbol_by_value_ContextActionModify.Operation'(0) -> 'Add';
'enum_symbol_by_value_ContextActionModify.Operation'(1) -> 'Remove'.


'enum_value_by_symbol_ContextActionModify.Operation'('Add') -> 0;
'enum_value_by_symbol_ContextActionModify.Operation'('Remove') -> 1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"MumbleProto.Version">>) -> 'Version';
fqbin_to_msg_name(<<"MumbleProto.UDPTunnel">>) -> 'UDPTunnel';
fqbin_to_msg_name(<<"MumbleProto.Authenticate">>) -> 'Authenticate';
fqbin_to_msg_name(<<"MumbleProto.Ping">>) -> 'Ping';
fqbin_to_msg_name(<<"MumbleProto.Reject">>) -> 'Reject';
fqbin_to_msg_name(<<"MumbleProto.ServerSync">>) -> 'ServerSync';
fqbin_to_msg_name(<<"MumbleProto.ChannelRemove">>) -> 'ChannelRemove';
fqbin_to_msg_name(<<"MumbleProto.ChannelState">>) -> 'ChannelState';
fqbin_to_msg_name(<<"MumbleProto.UserRemove">>) -> 'UserRemove';
fqbin_to_msg_name(<<"MumbleProto.UserState.VolumeAdjustment">>) -> 'UserState.VolumeAdjustment';
fqbin_to_msg_name(<<"MumbleProto.UserState">>) -> 'UserState';
fqbin_to_msg_name(<<"MumbleProto.BanList.BanEntry">>) -> 'BanList.BanEntry';
fqbin_to_msg_name(<<"MumbleProto.BanList">>) -> 'BanList';
fqbin_to_msg_name(<<"MumbleProto.TextMessage">>) -> 'TextMessage';
fqbin_to_msg_name(<<"MumbleProto.PermissionDenied">>) -> 'PermissionDenied';
fqbin_to_msg_name(<<"MumbleProto.ACL.ChanGroup">>) -> 'ACL.ChanGroup';
fqbin_to_msg_name(<<"MumbleProto.ACL.ChanACL">>) -> 'ACL.ChanACL';
fqbin_to_msg_name(<<"MumbleProto.ACL">>) -> 'ACL';
fqbin_to_msg_name(<<"MumbleProto.QueryUsers">>) -> 'QueryUsers';
fqbin_to_msg_name(<<"MumbleProto.CryptSetup">>) -> 'CryptSetup';
fqbin_to_msg_name(<<"MumbleProto.ContextActionModify">>) -> 'ContextActionModify';
fqbin_to_msg_name(<<"MumbleProto.ContextAction">>) -> 'ContextAction';
fqbin_to_msg_name(<<"MumbleProto.UserList.User">>) -> 'UserList.User';
fqbin_to_msg_name(<<"MumbleProto.UserList">>) -> 'UserList';
fqbin_to_msg_name(<<"MumbleProto.VoiceTarget.Target">>) -> 'VoiceTarget.Target';
fqbin_to_msg_name(<<"MumbleProto.VoiceTarget">>) -> 'VoiceTarget';
fqbin_to_msg_name(<<"MumbleProto.PermissionQuery">>) -> 'PermissionQuery';
fqbin_to_msg_name(<<"MumbleProto.CodecVersion">>) -> 'CodecVersion';
fqbin_to_msg_name(<<"MumbleProto.UserStats.Stats">>) -> 'UserStats.Stats';
fqbin_to_msg_name(<<"MumbleProto.UserStats">>) -> 'UserStats';
fqbin_to_msg_name(<<"MumbleProto.RequestBlob">>) -> 'RequestBlob';
fqbin_to_msg_name(<<"MumbleProto.ServerConfig">>) -> 'ServerConfig';
fqbin_to_msg_name(<<"MumbleProto.SuggestConfig">>) -> 'SuggestConfig';
fqbin_to_msg_name(<<"MumbleProto.PluginDataTransmission">>) -> 'PluginDataTransmission';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Version') -> <<"MumbleProto.Version">>;
msg_name_to_fqbin('UDPTunnel') -> <<"MumbleProto.UDPTunnel">>;
msg_name_to_fqbin('Authenticate') -> <<"MumbleProto.Authenticate">>;
msg_name_to_fqbin('Ping') -> <<"MumbleProto.Ping">>;
msg_name_to_fqbin('Reject') -> <<"MumbleProto.Reject">>;
msg_name_to_fqbin('ServerSync') -> <<"MumbleProto.ServerSync">>;
msg_name_to_fqbin('ChannelRemove') -> <<"MumbleProto.ChannelRemove">>;
msg_name_to_fqbin('ChannelState') -> <<"MumbleProto.ChannelState">>;
msg_name_to_fqbin('UserRemove') -> <<"MumbleProto.UserRemove">>;
msg_name_to_fqbin('UserState.VolumeAdjustment') -> <<"MumbleProto.UserState.VolumeAdjustment">>;
msg_name_to_fqbin('UserState') -> <<"MumbleProto.UserState">>;
msg_name_to_fqbin('BanList.BanEntry') -> <<"MumbleProto.BanList.BanEntry">>;
msg_name_to_fqbin('BanList') -> <<"MumbleProto.BanList">>;
msg_name_to_fqbin('TextMessage') -> <<"MumbleProto.TextMessage">>;
msg_name_to_fqbin('PermissionDenied') -> <<"MumbleProto.PermissionDenied">>;
msg_name_to_fqbin('ACL.ChanGroup') -> <<"MumbleProto.ACL.ChanGroup">>;
msg_name_to_fqbin('ACL.ChanACL') -> <<"MumbleProto.ACL.ChanACL">>;
msg_name_to_fqbin('ACL') -> <<"MumbleProto.ACL">>;
msg_name_to_fqbin('QueryUsers') -> <<"MumbleProto.QueryUsers">>;
msg_name_to_fqbin('CryptSetup') -> <<"MumbleProto.CryptSetup">>;
msg_name_to_fqbin('ContextActionModify') -> <<"MumbleProto.ContextActionModify">>;
msg_name_to_fqbin('ContextAction') -> <<"MumbleProto.ContextAction">>;
msg_name_to_fqbin('UserList.User') -> <<"MumbleProto.UserList.User">>;
msg_name_to_fqbin('UserList') -> <<"MumbleProto.UserList">>;
msg_name_to_fqbin('VoiceTarget.Target') -> <<"MumbleProto.VoiceTarget.Target">>;
msg_name_to_fqbin('VoiceTarget') -> <<"MumbleProto.VoiceTarget">>;
msg_name_to_fqbin('PermissionQuery') -> <<"MumbleProto.PermissionQuery">>;
msg_name_to_fqbin('CodecVersion') -> <<"MumbleProto.CodecVersion">>;
msg_name_to_fqbin('UserStats.Stats') -> <<"MumbleProto.UserStats.Stats">>;
msg_name_to_fqbin('UserStats') -> <<"MumbleProto.UserStats">>;
msg_name_to_fqbin('RequestBlob') -> <<"MumbleProto.RequestBlob">>;
msg_name_to_fqbin('ServerConfig') -> <<"MumbleProto.ServerConfig">>;
msg_name_to_fqbin('SuggestConfig') -> <<"MumbleProto.SuggestConfig">>;
msg_name_to_fqbin('PluginDataTransmission') -> <<"MumbleProto.PluginDataTransmission">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"MumbleProto.Reject.RejectType">>) -> 'Reject.RejectType';
fqbin_to_enum_name(<<"MumbleProto.PermissionDenied.DenyType">>) -> 'PermissionDenied.DenyType';
fqbin_to_enum_name(<<"MumbleProto.ContextActionModify.Context">>) -> 'ContextActionModify.Context';
fqbin_to_enum_name(<<"MumbleProto.ContextActionModify.Operation">>) -> 'ContextActionModify.Operation';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Reject.RejectType') -> <<"MumbleProto.Reject.RejectType">>;
enum_name_to_fqbin('PermissionDenied.DenyType') -> <<"MumbleProto.PermissionDenied.DenyType">>;
enum_name_to_fqbin('ContextActionModify.Context') -> <<"MumbleProto.ContextActionModify.Context">>;
enum_name_to_fqbin('ContextActionModify.Operation') -> <<"MumbleProto.ContextActionModify.Operation">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'MumbleProto'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "mumble.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["mumble.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["mumble"].


get_msg_containment("mumble") ->
    ['ACL',
     'ACL.ChanACL',
     'ACL.ChanGroup',
     'Authenticate',
     'BanList',
     'BanList.BanEntry',
     'ChannelRemove',
     'ChannelState',
     'CodecVersion',
     'ContextAction',
     'ContextActionModify',
     'CryptSetup',
     'PermissionDenied',
     'PermissionQuery',
     'Ping',
     'PluginDataTransmission',
     'QueryUsers',
     'Reject',
     'RequestBlob',
     'ServerConfig',
     'ServerSync',
     'SuggestConfig',
     'TextMessage',
     'UDPTunnel',
     'UserList',
     'UserList.User',
     'UserRemove',
     'UserState',
     'UserState.VolumeAdjustment',
     'UserStats',
     'UserStats.Stats',
     'Version',
     'VoiceTarget',
     'VoiceTarget.Target'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("mumble") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("mumble") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("mumble") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("mumble") -> ['ContextActionModify.Context', 'ContextActionModify.Operation', 'PermissionDenied.DenyType', 'Reject.RejectType'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"MumbleProto.CryptSetup">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ACL.ChanGroup">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.UserList.User">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.RequestBlob">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.UserStats.Stats">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.UserStats">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ServerSync">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.QueryUsers">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.VoiceTarget.Target">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.VoiceTarget">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.UserState.VolumeAdjustment">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.UserList">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.Reject">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.PermissionDenied">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.BanList">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.UserState">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.UserRemove">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.TextMessage">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ChannelState">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ChannelRemove">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.Authenticate">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.SuggestConfig">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ServerConfig">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.Ping">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.PermissionQuery">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ContextActionModify">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.BanList.BanEntry">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.UDPTunnel">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ACL.ChanACL">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ACL">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.Version">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.PluginDataTransmission">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.ContextAction">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(<<"MumbleProto.CodecVersion">>) -> "mumble";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"MumbleProto.ContextActionModify.Context">>) -> "mumble";
get_proto_by_enum_name_as_fqbin(<<"MumbleProto.Reject.RejectType">>) -> "mumble";
get_proto_by_enum_name_as_fqbin(<<"MumbleProto.PermissionDenied.DenyType">>) -> "mumble";
get_proto_by_enum_name_as_fqbin(<<"MumbleProto.ContextActionModify.Operation">>) -> "mumble";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.21.1".

gpb_version_as_list() ->
    [4,21,1].

gpb_version_source() ->
    "file".
