%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.21.1

-ifndef(mumble).
-define(mumble, true).

-define(mumble_gpb_version, "4.21.1").


-ifndef('VERSION_PB_H').
-define('VERSION_PB_H', true).
-record('Version',
        {version_v1             :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         version_v2             :: non_neg_integer() | undefined, % = 5, optional, 64 bits
         release                :: unicode:chardata() | undefined, % = 2, optional
         os                     :: unicode:chardata() | undefined, % = 3, optional
         os_version             :: unicode:chardata() | undefined % = 4, optional
        }).
-endif.

-ifndef('UDPTUNNEL_PB_H').
-define('UDPTUNNEL_PB_H', true).
-record('UDPTunnel',
        {packet                 :: iodata() | undefined % = 1, required
        }).
-endif.

-ifndef('AUTHENTICATE_PB_H').
-define('AUTHENTICATE_PB_H', true).
-record('Authenticate',
        {username               :: unicode:chardata() | undefined, % = 1, optional
         password               :: unicode:chardata() | undefined, % = 2, optional
         tokens = []            :: [unicode:chardata()] | undefined, % = 3, repeated
         celt_versions = []     :: [integer()] | undefined, % = 4, repeated, 32 bits
         opus = false           :: boolean() | 0 | 1 | undefined, % = 5, optional
         client_type = 0        :: integer() | undefined % = 6, optional, 32 bits
        }).
-endif.

-ifndef('PING_PB_H').
-define('PING_PB_H', true).
-record('Ping',
        {timestamp              :: non_neg_integer() | undefined, % = 1, optional, 64 bits
         good                   :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         late                   :: non_neg_integer() | undefined, % = 3, optional, 32 bits
         lost                   :: non_neg_integer() | undefined, % = 4, optional, 32 bits
         resync                 :: non_neg_integer() | undefined, % = 5, optional, 32 bits
         udp_packets            :: non_neg_integer() | undefined, % = 6, optional, 32 bits
         tcp_packets            :: non_neg_integer() | undefined, % = 7, optional, 32 bits
         udp_ping_avg           :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 8, optional
         udp_ping_var           :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 9, optional
         tcp_ping_avg           :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 10, optional
         tcp_ping_var           :: float() | integer() | infinity | '-infinity' | nan | undefined % = 11, optional
        }).
-endif.

-ifndef('REJECT_PB_H').
-define('REJECT_PB_H', true).
-record('Reject',
        {type                   :: 'None' | 'WrongVersion' | 'InvalidUsername' | 'WrongUserPW' | 'WrongServerPW' | 'UsernameInUse' | 'ServerFull' | 'NoCertificate' | 'AuthenticatorFail' | integer() | undefined, % = 1, optional, enum Reject.RejectType
         reason                 :: unicode:chardata() | undefined % = 2, optional
        }).
-endif.

-ifndef('SERVERSYNC_PB_H').
-define('SERVERSYNC_PB_H', true).
-record('ServerSync',
        {session                :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         max_bandwidth          :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         welcome_text           :: unicode:chardata() | undefined, % = 3, optional
         permissions            :: non_neg_integer() | undefined % = 4, optional, 64 bits
        }).
-endif.

-ifndef('CHANNELREMOVE_PB_H').
-define('CHANNELREMOVE_PB_H', true).
-record('ChannelRemove',
        {channel_id             :: non_neg_integer() | undefined % = 1, required, 32 bits
        }).
-endif.

-ifndef('CHANNELSTATE_PB_H').
-define('CHANNELSTATE_PB_H', true).
-record('ChannelState',
        {channel_id             :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         parent                 :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         name                   :: unicode:chardata() | undefined, % = 3, optional
         links = []             :: [non_neg_integer()] | undefined, % = 4, repeated, 32 bits
         description            :: unicode:chardata() | undefined, % = 5, optional
         links_add = []         :: [non_neg_integer()] | undefined, % = 6, repeated, 32 bits
         links_remove = []      :: [non_neg_integer()] | undefined, % = 7, repeated, 32 bits
         temporary = false      :: boolean() | 0 | 1 | undefined, % = 8, optional
         position = 0           :: integer() | undefined, % = 9, optional, 32 bits
         description_hash       :: iodata() | undefined, % = 10, optional
         max_users              :: non_neg_integer() | undefined, % = 11, optional, 32 bits
         is_enter_restricted    :: boolean() | 0 | 1 | undefined, % = 12, optional
         can_enter              :: boolean() | 0 | 1 | undefined % = 13, optional
        }).
-endif.

-ifndef('USERREMOVE_PB_H').
-define('USERREMOVE_PB_H', true).
-record('UserRemove',
        {session                :: non_neg_integer() | undefined, % = 1, required, 32 bits
         actor                  :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         reason                 :: unicode:chardata() | undefined, % = 3, optional
         ban                    :: boolean() | 0 | 1 | undefined % = 4, optional
        }).
-endif.

-ifndef('USERSTATE.VOLUMEADJUSTMENT_PB_H').
-define('USERSTATE.VOLUMEADJUSTMENT_PB_H', true).
-record('UserState.VolumeAdjustment',
        {listening_channel      :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         volume_adjustment      :: float() | integer() | infinity | '-infinity' | nan | undefined % = 2, optional
        }).
-endif.

-ifndef('USERSTATE_PB_H').
-define('USERSTATE_PB_H', true).
-record('UserState',
        {session                :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         actor                  :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         name                   :: unicode:chardata() | undefined, % = 3, optional
         user_id                :: non_neg_integer() | undefined, % = 4, optional, 32 bits
         channel_id             :: non_neg_integer() | undefined, % = 5, optional, 32 bits
         mute                   :: boolean() | 0 | 1 | undefined, % = 6, optional
         deaf                   :: boolean() | 0 | 1 | undefined, % = 7, optional
         suppress               :: boolean() | 0 | 1 | undefined, % = 8, optional
         self_mute              :: boolean() | 0 | 1 | undefined, % = 9, optional
         self_deaf              :: boolean() | 0 | 1 | undefined, % = 10, optional
         texture                :: iodata() | undefined, % = 11, optional
         plugin_context         :: iodata() | undefined, % = 12, optional
         plugin_identity        :: unicode:chardata() | undefined, % = 13, optional
         comment                :: unicode:chardata() | undefined, % = 14, optional
         hash                   :: unicode:chardata() | undefined, % = 15, optional
         comment_hash           :: iodata() | undefined, % = 16, optional
         texture_hash           :: iodata() | undefined, % = 17, optional
         priority_speaker       :: boolean() | 0 | 1 | undefined, % = 18, optional
         recording              :: boolean() | 0 | 1 | undefined, % = 19, optional
         temporary_access_tokens = [] :: [unicode:chardata()] | undefined, % = 20, repeated
         listening_channel_add = [] :: [non_neg_integer()] | undefined, % = 21, repeated, 32 bits
         listening_channel_remove = [] :: [non_neg_integer()] | undefined, % = 22, repeated, 32 bits
         listening_volume_adjustment = [] :: [mumble:'UserState.VolumeAdjustment'()] | undefined % = 23, repeated
        }).
-endif.

-ifndef('BANLIST.BANENTRY_PB_H').
-define('BANLIST.BANENTRY_PB_H', true).
-record('BanList.BanEntry',
        {address                :: iodata() | undefined, % = 1, required
         mask                   :: non_neg_integer() | undefined, % = 2, required, 32 bits
         name                   :: unicode:chardata() | undefined, % = 3, optional
         hash                   :: unicode:chardata() | undefined, % = 4, optional
         reason                 :: unicode:chardata() | undefined, % = 5, optional
         start                  :: unicode:chardata() | undefined, % = 6, optional
         duration               :: non_neg_integer() | undefined % = 7, optional, 32 bits
        }).
-endif.

-ifndef('BANLIST_PB_H').
-define('BANLIST_PB_H', true).
-record('BanList',
        {bans = []              :: [mumble:'BanList.BanEntry'()] | undefined, % = 1, repeated
         query = false          :: boolean() | 0 | 1 | undefined % = 2, optional
        }).
-endif.

-ifndef('TEXTMESSAGE_PB_H').
-define('TEXTMESSAGE_PB_H', true).
-record('TextMessage',
        {actor                  :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         session = []           :: [non_neg_integer()] | undefined, % = 2, repeated, 32 bits
         channel_id = []        :: [non_neg_integer()] | undefined, % = 3, repeated, 32 bits
         tree_id = []           :: [non_neg_integer()] | undefined, % = 4, repeated, 32 bits
         message                :: unicode:chardata() | undefined % = 5, required
        }).
-endif.

-ifndef('PERMISSIONDENIED_PB_H').
-define('PERMISSIONDENIED_PB_H', true).
-record('PermissionDenied',
        {permission             :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         channel_id             :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         session                :: non_neg_integer() | undefined, % = 3, optional, 32 bits
         reason                 :: unicode:chardata() | undefined, % = 4, optional
         type                   :: 'Text' | 'Permission' | 'SuperUser' | 'ChannelName' | 'TextTooLong' | 'H9K' | 'TemporaryChannel' | 'MissingCertificate' | 'UserName' | 'ChannelFull' | 'NestingLimit' | 'ChannelCountLimit' | 'ChannelListenerLimit' | 'UserListenerLimit' | integer() | undefined, % = 5, optional, enum PermissionDenied.DenyType
         name                   :: unicode:chardata() | undefined % = 6, optional
        }).
-endif.

-ifndef('ACL.CHANGROUP_PB_H').
-define('ACL.CHANGROUP_PB_H', true).
-record('ACL.ChanGroup',
        {name                   :: unicode:chardata() | undefined, % = 1, required
         inherited = true       :: boolean() | 0 | 1 | undefined, % = 2, optional
         inherit = true         :: boolean() | 0 | 1 | undefined, % = 3, optional
         inheritable = true     :: boolean() | 0 | 1 | undefined, % = 4, optional
         add = []               :: [non_neg_integer()] | undefined, % = 5, repeated, 32 bits
         remove = []            :: [non_neg_integer()] | undefined, % = 6, repeated, 32 bits
         inherited_members = [] :: [non_neg_integer()] | undefined % = 7, repeated, 32 bits
        }).
-endif.

-ifndef('ACL.CHANACL_PB_H').
-define('ACL.CHANACL_PB_H', true).
-record('ACL.ChanACL',
        {apply_here = true      :: boolean() | 0 | 1 | undefined, % = 1, optional
         apply_subs = true      :: boolean() | 0 | 1 | undefined, % = 2, optional
         inherited = true       :: boolean() | 0 | 1 | undefined, % = 3, optional
         user_id                :: non_neg_integer() | undefined, % = 4, optional, 32 bits
         group                  :: unicode:chardata() | undefined, % = 5, optional
         grant                  :: non_neg_integer() | undefined, % = 6, optional, 32 bits
         deny                   :: non_neg_integer() | undefined % = 7, optional, 32 bits
        }).
-endif.

-ifndef('ACL_PB_H').
-define('ACL_PB_H', true).
-record('ACL',
        {channel_id             :: non_neg_integer() | undefined, % = 1, required, 32 bits
         inherit_acls = true    :: boolean() | 0 | 1 | undefined, % = 2, optional
         groups = []            :: [mumble:'ACL.ChanGroup'()] | undefined, % = 3, repeated
         acls = []              :: [mumble:'ACL.ChanACL'()] | undefined, % = 4, repeated
         query = false          :: boolean() | 0 | 1 | undefined % = 5, optional
        }).
-endif.

-ifndef('QUERYUSERS_PB_H').
-define('QUERYUSERS_PB_H', true).
-record('QueryUsers',
        {ids = []               :: [non_neg_integer()] | undefined, % = 1, repeated, 32 bits
         names = []             :: [unicode:chardata()] | undefined % = 2, repeated
        }).
-endif.

-ifndef('CRYPTSETUP_PB_H').
-define('CRYPTSETUP_PB_H', true).
-record('CryptSetup',
        {key                    :: iodata() | undefined, % = 1, optional
         client_nonce           :: iodata() | undefined, % = 2, optional
         server_nonce           :: iodata() | undefined % = 3, optional
        }).
-endif.

-ifndef('CONTEXTACTIONMODIFY_PB_H').
-define('CONTEXTACTIONMODIFY_PB_H', true).
-record('ContextActionModify',
        {action                 :: unicode:chardata() | undefined, % = 1, required
         text                   :: unicode:chardata() | undefined, % = 2, optional
         context                :: non_neg_integer() | undefined, % = 3, optional, 32 bits
         operation              :: 'Add' | 'Remove' | integer() | undefined % = 4, optional, enum ContextActionModify.Operation
        }).
-endif.

-ifndef('CONTEXTACTION_PB_H').
-define('CONTEXTACTION_PB_H', true).
-record('ContextAction',
        {session                :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         channel_id             :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         action                 :: unicode:chardata() | undefined % = 3, required
        }).
-endif.

-ifndef('USERLIST.USER_PB_H').
-define('USERLIST.USER_PB_H', true).
-record('UserList.User',
        {user_id                :: non_neg_integer() | undefined, % = 1, required, 32 bits
         name                   :: unicode:chardata() | undefined, % = 2, optional
         last_seen              :: unicode:chardata() | undefined, % = 3, optional
         last_channel           :: non_neg_integer() | undefined % = 4, optional, 32 bits
        }).
-endif.

-ifndef('USERLIST_PB_H').
-define('USERLIST_PB_H', true).
-record('UserList',
        {users = []             :: [mumble:'UserList.User'()] | undefined % = 1, repeated
        }).
-endif.

-ifndef('VOICETARGET.TARGET_PB_H').
-define('VOICETARGET.TARGET_PB_H', true).
-record('VoiceTarget.Target',
        {session = []           :: [non_neg_integer()] | undefined, % = 1, repeated, 32 bits
         channel_id             :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         group                  :: unicode:chardata() | undefined, % = 3, optional
         links = false          :: boolean() | 0 | 1 | undefined, % = 4, optional
         children = false       :: boolean() | 0 | 1 | undefined % = 5, optional
        }).
-endif.

-ifndef('VOICETARGET_PB_H').
-define('VOICETARGET_PB_H', true).
-record('VoiceTarget',
        {id                     :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         targets = []           :: [mumble:'VoiceTarget.Target'()] | undefined % = 2, repeated
        }).
-endif.

-ifndef('PERMISSIONQUERY_PB_H').
-define('PERMISSIONQUERY_PB_H', true).
-record('PermissionQuery',
        {channel_id             :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         permissions            :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         flush = false          :: boolean() | 0 | 1 | undefined % = 3, optional
        }).
-endif.

-ifndef('CODECVERSION_PB_H').
-define('CODECVERSION_PB_H', true).
-record('CodecVersion',
        {alpha                  :: integer() | undefined, % = 1, required, 32 bits
         beta                   :: integer() | undefined, % = 2, required, 32 bits
         prefer_alpha = true    :: boolean() | 0 | 1 | undefined, % = 3, required
         opus = false           :: boolean() | 0 | 1 | undefined % = 4, optional
        }).
-endif.

-ifndef('USERSTATS.STATS_PB_H').
-define('USERSTATS.STATS_PB_H', true).
-record('UserStats.Stats',
        {good                   :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         late                   :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         lost                   :: non_neg_integer() | undefined, % = 3, optional, 32 bits
         resync                 :: non_neg_integer() | undefined % = 4, optional, 32 bits
        }).
-endif.

-ifndef('USERSTATS_PB_H').
-define('USERSTATS_PB_H', true).
-record('UserStats',
        {session                :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         stats_only = false     :: boolean() | 0 | 1 | undefined, % = 2, optional
         certificates = []      :: [iodata()] | undefined, % = 3, repeated
         from_client            :: mumble:'UserStats.Stats'() | undefined, % = 4, optional
         from_server            :: mumble:'UserStats.Stats'() | undefined, % = 5, optional
         udp_packets            :: non_neg_integer() | undefined, % = 6, optional, 32 bits
         tcp_packets            :: non_neg_integer() | undefined, % = 7, optional, 32 bits
         udp_ping_avg           :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 8, optional
         udp_ping_var           :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 9, optional
         tcp_ping_avg           :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 10, optional
         tcp_ping_var           :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 11, optional
         version                :: mumble:'Version'() | undefined, % = 12, optional
         celt_versions = []     :: [integer()] | undefined, % = 13, repeated, 32 bits
         address                :: iodata() | undefined, % = 14, optional
         bandwidth              :: non_neg_integer() | undefined, % = 15, optional, 32 bits
         onlinesecs             :: non_neg_integer() | undefined, % = 16, optional, 32 bits
         idlesecs               :: non_neg_integer() | undefined, % = 17, optional, 32 bits
         strong_certificate = false :: boolean() | 0 | 1 | undefined, % = 18, optional
         opus = false           :: boolean() | 0 | 1 | undefined % = 19, optional
        }).
-endif.

-ifndef('REQUESTBLOB_PB_H').
-define('REQUESTBLOB_PB_H', true).
-record('RequestBlob',
        {session_texture = []   :: [non_neg_integer()] | undefined, % = 1, repeated, 32 bits
         session_comment = []   :: [non_neg_integer()] | undefined, % = 2, repeated, 32 bits
         channel_description = [] :: [non_neg_integer()] | undefined % = 3, repeated, 32 bits
        }).
-endif.

-ifndef('SERVERCONFIG_PB_H').
-define('SERVERCONFIG_PB_H', true).
-record('ServerConfig',
        {max_bandwidth          :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         welcome_text           :: unicode:chardata() | undefined, % = 2, optional
         allow_html             :: boolean() | 0 | 1 | undefined, % = 3, optional
         message_length         :: non_neg_integer() | undefined, % = 4, optional, 32 bits
         image_message_length   :: non_neg_integer() | undefined, % = 5, optional, 32 bits
         max_users              :: non_neg_integer() | undefined, % = 6, optional, 32 bits
         recording_allowed      :: boolean() | 0 | 1 | undefined % = 7, optional
        }).
-endif.

-ifndef('SUGGESTCONFIG_PB_H').
-define('SUGGESTCONFIG_PB_H', true).
-record('SuggestConfig',
        {version_v1             :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         version_v2             :: non_neg_integer() | undefined, % = 4, optional, 64 bits
         positional             :: boolean() | 0 | 1 | undefined, % = 2, optional
         push_to_talk           :: boolean() | 0 | 1 | undefined % = 3, optional
        }).
-endif.

-ifndef('PLUGINDATATRANSMISSION_PB_H').
-define('PLUGINDATATRANSMISSION_PB_H', true).
-record('PluginDataTransmission',
        {senderSession          :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         receiverSessions = []  :: [non_neg_integer()] | undefined, % = 2, repeated, 32 bits
         data                   :: iodata() | undefined, % = 3, optional
         dataID                 :: unicode:chardata() | undefined % = 4, optional
        }).
-endif.

-endif.
